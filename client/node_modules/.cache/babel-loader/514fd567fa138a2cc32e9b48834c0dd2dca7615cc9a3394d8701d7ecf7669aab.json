{"ast":null,"code":"import { hasProperty } from '../util';\nexport function isAnyConcatSpec(spec) {\n  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n}\nexport function isConcatSpec(spec) {\n  return hasProperty(spec, 'concat');\n}\nexport function isVConcatSpec(spec) {\n  return hasProperty(spec, 'vconcat');\n}\nexport function isHConcatSpec(spec) {\n  return hasProperty(spec, 'hconcat');\n}","map":{"version":3,"names":["hasProperty","isAnyConcatSpec","spec","isVConcatSpec","isHConcatSpec","isConcatSpec"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\spec\\concat.ts"],"sourcesContent":["import {GenericSpec, NormalizedSpec} from '.';\nimport {hasProperty} from '../util';\nimport {BaseSpec, BoundsMixins, GenericCompositionLayoutWithColumns, ResolveMixins} from './base';\n\n/**\n * Base layout mixins for V/HConcatSpec, which should not have RowCol<T> generic fo its property.\n */\nexport interface OneDirectionalConcatLayout extends BoundsMixins, ResolveMixins {\n  /**\n   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n   *\n   * __Default value:__ `false`\n   */\n  center?: boolean;\n\n  /**\n   * The spacing in pixels between sub-views of the concat operator.\n   *\n   * __Default value__: `10`\n   */\n  spacing?: number;\n}\n\n/**\n * Base interface for a generalized concatenation specification.\n */\nexport interface GenericConcatSpec<S extends GenericSpec<any, any, any, any>>\n  extends BaseSpec,\n    GenericCompositionLayoutWithColumns,\n    ResolveMixins {\n  /**\n   * A list of views to be concatenated.\n   */\n  concat: S[];\n}\n\n/**\n * Base interface for a vertical concatenation specification.\n */\nexport interface GenericVConcatSpec<S extends GenericSpec<any, any, any, any>>\n  extends BaseSpec,\n    OneDirectionalConcatLayout {\n  /**\n   * A list of views to be concatenated and put into a column.\n   */\n  vconcat: S[];\n}\n\n/**\n * Base interface for a horizontal concatenation specification.\n */\nexport interface GenericHConcatSpec<S extends GenericSpec<any, any, any, any>>\n  extends BaseSpec,\n    OneDirectionalConcatLayout {\n  /**\n   * A list of views to be concatenated and put into a row.\n   */\n  hconcat: S[];\n}\n\n/** A concat spec without any shortcut/expansion syntax */\nexport type NormalizedConcatSpec =\n  | GenericConcatSpec<NormalizedSpec>\n  | GenericVConcatSpec<NormalizedSpec>\n  | GenericHConcatSpec<NormalizedSpec>;\n\nexport function isAnyConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any> | GenericHConcatSpec<any> {\n  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n}\n\nexport function isConcatSpec(spec: BaseSpec): spec is GenericConcatSpec<any> {\n  return hasProperty(spec, 'concat');\n}\n\nexport function isVConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any> {\n  return hasProperty(spec, 'vconcat');\n}\n\nexport function isHConcatSpec(spec: BaseSpec): spec is GenericHConcatSpec<any> {\n  return hasProperty(spec, 'hconcat');\n}\n"],"mappings":"AACA,SAAQA,WAAW,QAAO,SAAS;AAiEnC,OAAM,SAAUC,eAAeA,CAACC,IAAc;EAC5C,OAAOC,aAAa,CAACD,IAAI,CAAC,IAAIE,aAAa,CAACF,IAAI,CAAC,IAAIG,YAAY,CAACH,IAAI,CAAC;AACzE;AAEA,OAAM,SAAUG,YAAYA,CAACH,IAAc;EACzC,OAAOF,WAAW,CAACE,IAAI,EAAE,QAAQ,CAAC;AACpC;AAEA,OAAM,SAAUC,aAAaA,CAACD,IAAc;EAC1C,OAAOF,WAAW,CAACE,IAAI,EAAE,SAAS,CAAC;AACrC;AAEA,OAAM,SAAUE,aAAaA,CAACF,IAAc;EAC1C,OAAOF,WAAW,CAACE,IAAI,EAAE,SAAS,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}