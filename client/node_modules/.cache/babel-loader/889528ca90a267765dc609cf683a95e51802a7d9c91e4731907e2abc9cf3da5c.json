{"ast":null,"code":"import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n  dependentFields() {\n    const out = new Set();\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(out.add, out);\n    }\n    this.transform.joinaggregate.map(w => w.field).filter(f => f !== undefined).forEach(out.add, out);\n    return out;\n  }\n  producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n  getDefaultName(joinAggregateFieldDef) {\n    return joinAggregateFieldDef.as ?? vgField(joinAggregateFieldDef);\n  }\n  hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n  assemble() {\n    const fields = [];\n    const ops = [];\n    const as = [];\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n    const groupby = this.transform.groupby;\n    return {\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields,\n      ...(groupby !== undefined ? {\n        groupby\n      } : {})\n    };\n  }\n}","map":{"version":3,"names":["vgField","duplicate","hash","unique","DataFlowNode","JoinAggregateTransformNode","clone","transform","constructor","parent","addDimensions","fields","groupby","concat","d","dependentFields","out","Set","forEach","add","joinaggregate","map","w","field","filter","f","undefined","producedFields","getDefaultName","joinAggregateFieldDef","as","assemble","ops","push","op","type"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\joinaggregate.ts"],"sourcesContent":["import {AggregateOp} from 'vega';\nimport {vgField} from '../../channeldef';\nimport {JoinAggregateTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgJoinAggregateTransform} from '../../vega.schema';\nimport {JoinAggregateFieldDef} from '../../transform';\nimport {unique} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n  public clone() {\n    return new JoinAggregateTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private readonly transform: JoinAggregateTransform\n  ) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    if (this.transform.groupby) {\n      this.transform.groupby.forEach(out.add, out);\n    }\n    this.transform.joinaggregate\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(out.add, out);\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n  }\n\n  private getDefaultName(joinAggregateFieldDef: JoinAggregateFieldDef): string {\n    return joinAggregateFieldDef.as ?? vgField(joinAggregateFieldDef);\n  }\n\n  public hash() {\n    return `JoinAggregateTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n    for (const joinaggregate of this.transform.joinaggregate) {\n      ops.push(joinaggregate.op);\n      as.push(this.getDefaultName(joinaggregate));\n      fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n    }\n\n    const groupby = this.transform.groupby;\n\n    return {\n      type: 'joinaggregate',\n      as,\n      ops,\n      fields,\n      ...(groupby !== undefined ? {groupby} : {})\n    };\n  }\n}\n"],"mappings":"AACA,SAAQA,OAAO,QAAO,kBAAkB;AAExC,SAAQC,SAAS,EAAEC,IAAI,QAAO,YAAY;AAG1C,SAAQC,MAAM,QAAO,YAAY;AACjC,SAAQC,YAAY,QAAO,YAAY;AAEvC;;;AAGA,OAAM,MAAOC,0BAA2B,SAAQD,YAAY;EACnDE,KAAKA,CAAA;IACV,OAAO,IAAID,0BAA0B,CAAC,IAAI,EAAEJ,SAAS,CAAC,IAAI,CAACM,SAAS,CAAC,CAAC;EACxE;EAEAC,YACEC,MAAoB,EACHF,SAAiC;IAElD,KAAK,CAACE,MAAM,CAAC;IAFI,KAAAF,SAAS,GAATA,SAAS;EAG5B;EAEOG,aAAaA,CAACC,MAAgB;IACnC,IAAI,CAACJ,SAAS,CAACK,OAAO,GAAGT,MAAM,CAAC,IAAI,CAACI,SAAS,CAACK,OAAO,CAACC,MAAM,CAACF,MAAM,CAAC,EAAEG,CAAC,IAAIA,CAAC,CAAC;EAChF;EAEOC,eAAeA,CAAA;IACpB,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAU;IAE7B,IAAI,IAAI,CAACV,SAAS,CAACK,OAAO,EAAE;MAC1B,IAAI,CAACL,SAAS,CAACK,OAAO,CAACM,OAAO,CAACF,GAAG,CAACG,GAAG,EAAEH,GAAG,CAAC;IAC9C;IACA,IAAI,CAACT,SAAS,CAACa,aAAa,CACzBC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,CAAC,CACjBC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKC,SAAS,CAAC,CAC5BR,OAAO,CAACF,GAAG,CAACG,GAAG,EAAEH,GAAG,CAAC;IAExB,OAAOA,GAAG;EACZ;EAEOW,cAAcA,CAAA;IACnB,OAAO,IAAIV,GAAG,CAAC,IAAI,CAACV,SAAS,CAACa,aAAa,CAACC,GAAG,CAAC,IAAI,CAACO,cAAc,CAAC,CAAC;EACvE;EAEQA,cAAcA,CAACC,qBAA4C;IACjE,OAAOA,qBAAqB,CAACC,EAAE,IAAI9B,OAAO,CAAC6B,qBAAqB,CAAC;EACnE;EAEO3B,IAAIA,CAAA;IACT,OAAO,0BAA0BA,IAAI,CAAC,IAAI,CAACK,SAAS,CAAC,EAAE;EACzD;EAEOwB,QAAQA,CAAA;IACb,MAAMpB,MAAM,GAAa,EAAE;IAC3B,MAAMqB,GAAG,GAAkB,EAAE;IAC7B,MAAMF,EAAE,GAAa,EAAE;IACvB,KAAK,MAAMV,aAAa,IAAI,IAAI,CAACb,SAAS,CAACa,aAAa,EAAE;MACxDY,GAAG,CAACC,IAAI,CAACb,aAAa,CAACc,EAAE,CAAC;MAC1BJ,EAAE,CAACG,IAAI,CAAC,IAAI,CAACL,cAAc,CAACR,aAAa,CAAC,CAAC;MAC3CT,MAAM,CAACsB,IAAI,CAACb,aAAa,CAACG,KAAK,KAAKG,SAAS,GAAG,IAAI,GAAGN,aAAa,CAACG,KAAK,CAAC;IAC7E;IAEA,MAAMX,OAAO,GAAG,IAAI,CAACL,SAAS,CAACK,OAAO;IAEtC,OAAO;MACLuB,IAAI,EAAE,eAAe;MACrBL,EAAE;MACFE,GAAG;MACHrB,MAAM;MACN,IAAIC,OAAO,KAAKc,SAAS,GAAG;QAACd;MAAO,CAAC,GAAG,EAAE;KAC3C;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}