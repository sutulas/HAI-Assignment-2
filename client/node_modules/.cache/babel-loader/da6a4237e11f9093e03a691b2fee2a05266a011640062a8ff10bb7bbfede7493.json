{"ast":null,"code":"import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoJSONNode extends DataFlowNode {\n  clone() {\n    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n  }\n  static parseAll(parent, model) {\n    if (model.component.projection && !model.component.projection.isFit) {\n      return parent;\n    }\n    let geoJsonCounter = 0;\n    for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n      const pair = coordinates.map(channel => {\n        const def = getFieldOrDatumDef(model.encoding[channel]);\n        return isFieldDef(def) ? def.field : isDatumDef(def) ? {\n          expr: `${def.datum}`\n        } : isValueDef(def) ? {\n          expr: `${def['value']}`\n        } : undefined;\n      });\n      if (pair[0] || pair[1]) {\n        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n    if (model.channelHasField(SHAPE)) {\n      const fieldDef = model.typedFieldDef(SHAPE);\n      if (fieldDef.type === GEOJSON) {\n        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n    return parent;\n  }\n  constructor(parent, fields, geojson, signal) {\n    super(parent);\n    this.fields = fields;\n    this.geojson = geojson;\n    this.signal = signal;\n  }\n  dependentFields() {\n    const fields = (this.fields ?? []).filter(isString);\n    return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\n  }\n  producedFields() {\n    return new Set();\n  }\n  hash() {\n    return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;\n  }\n  assemble() {\n    return [...(this.geojson ? [{\n      type: 'filter',\n      expr: `isValid(datum[\"${this.geojson}\"])`\n    }] : []), {\n      type: 'geojson',\n      ...(this.fields ? {\n        fields: this.fields\n      } : {}),\n      ...(this.geojson ? {\n        geojson: this.geojson\n      } : {}),\n      signal: this.signal\n    }];\n  }\n}","map":{"version":3,"names":["isString","LATITUDE","LATITUDE2","LONGITUDE","LONGITUDE2","SHAPE","getFieldOrDatumDef","isDatumDef","isFieldDef","isValueDef","GEOJSON","duplicate","hash","DataFlowNode","GeoJSONNode","clone","fields","geojson","signal","parseAll","parent","model","component","projection","isFit","geoJsonCounter","coordinates","pair","map","channel","def","encoding","field","expr","datum","undefined","getName","channelHasField","fieldDef","typedFieldDef","type","constructor","dependentFields","filter","Set","producedFields","assemble"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\geojson.ts"],"sourcesContent":["import {Transforms as VgTransform, Vector2} from 'vega';\nimport {isString} from 'vega-util';\nimport {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {getFieldOrDatumDef, isDatumDef, isFieldDef, isValueDef} from '../../channeldef';\nimport {GEOJSON} from '../../type';\nimport {duplicate, hash} from '../../util';\nimport {VgExprRef} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoJSONNode extends DataFlowNode {\n  public clone() {\n    return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    if (model.component.projection && !model.component.projection.isFit) {\n      return parent;\n    }\n\n    let geoJsonCounter = 0;\n\n    for (const coordinates of [\n      [LONGITUDE, LATITUDE],\n      [LONGITUDE2, LATITUDE2]\n    ] as Vector2<GeoPositionChannel>[]) {\n      const pair = coordinates.map(channel => {\n        const def = getFieldOrDatumDef(model.encoding[channel]);\n        return isFieldDef(def)\n          ? def.field\n          : isDatumDef(def)\n            ? {expr: `${def.datum}`}\n            : isValueDef(def)\n              ? {expr: `${def['value']}`}\n              : undefined;\n      }) as [GeoPositionChannel, GeoPositionChannel];\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n\n    if (model.channelHasField(SHAPE)) {\n      const fieldDef = model.typedFieldDef(SHAPE);\n      if (fieldDef.type === GEOJSON) {\n        parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n      }\n    }\n\n    return parent;\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private fields?: Vector2<string | VgExprRef>,\n    private geojson?: string,\n    private signal?: string\n  ) {\n    super(parent);\n  }\n\n  public dependentFields() {\n    const fields = (this.fields ?? []).filter(isString) as string[];\n    return new Set([...(this.geojson ? [this.geojson] : []), ...fields]);\n  }\n\n  public producedFields() {\n    return new Set<string>();\n  }\n\n  public hash() {\n    return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;\n  }\n\n  public assemble(): VgTransform[] {\n    return [\n      ...(this.geojson\n        ? [\n            {\n              type: 'filter',\n              expr: `isValid(datum[\"${this.geojson}\"])`\n            } as const\n          ]\n        : []),\n      {\n        type: 'geojson',\n        ...(this.fields ? {fields: this.fields} : {}),\n        ...(this.geojson ? {geojson: this.geojson} : {}),\n        signal: this.signal\n      }\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}