{"ast":null,"code":"import { ascending, quantileSorted, deviation, quantile, median } from 'd3-array';\nfunction* numbers(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\nfunction quantiles(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n  return p.map(_ => quantileSorted(values, _));\n}\nfunction quartiles(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nfunction estimateBandwidth(array, f) {\n  const n = array.length,\n    d = deviation(array, f),\n    q = quartiles(array, f),\n    h = (q[2] - q[0]) / 1.34,\n    v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\nfunction bin(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n    base = _.base || 10,\n    logb = Math.log(base),\n    div = _.divide || [5, 2];\n  let min = _.extent[0],\n    max = _.extent[1],\n    step,\n    level,\n    minstep,\n    v,\n    i,\n    n;\n  const span = _.span || max - min || Math.abs(min) || 1;\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i - 1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level));\n\n    // increase step size if too many bins\n    while (Math.ceil(span / step) > maxb) {\n      step *= base;\n    }\n\n    // decrease step size if allowed\n    for (i = 0, n = div.length; i < n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n    eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n  return {\n    start: min,\n    stop: max === min ? min + step : max,\n    step: step\n  };\n}\nvar random = Math.random;\nfunction setRandom(r) {\n  random = r;\n}\nfunction bootstrapCI(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n  const values = Float64Array.from(numbers(array, f)),\n    n = values.length,\n    m = samples;\n  let a, i, j, mu;\n  for (j = 0, mu = Array(m); j < m; ++j) {\n    for (a = 0, i = 0; i < n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n  mu.sort(ascending);\n  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];\n}\n\n// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nfunction dotbin(array, step, smooth, f) {\n  f = f || (_ => _);\n  const n = array.length,\n    v = new Float64Array(n);\n  let i = 0,\n    j = 1,\n    a = f(array[0]),\n    b = a,\n    w = a + step,\n    x;\n  for (; j < n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i < j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n  b = (a + b) / 2;\n  for (; i < j; ++i) v[i] = b;\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n    b = 1,\n    c,\n    d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b - 1] < thresh) {\n      d = b + (a + c - b - b >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n  return v;\n}\nfunction lcg(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function () {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\nfunction integer(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  let a, b, d;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n  return dist.min(min).max(max);\n}\nconst SQRT2PI = Math.sqrt(2 * Math.PI);\nconst SQRT2 = Math.SQRT2;\nlet nextSample = NaN;\nfunction sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  let x = 0,\n    y = 0,\n    rds,\n    c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\nfunction densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nfunction cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - mean) / stdev,\n    Z = Math.abs(z);\n  let cd;\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nfunction quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = -Math.log((1 - x) * (1 + x)),\n    p;\n  if (w < 6.25) {\n    w -= 3.125;\n    p = -3.6444120640178196996e-21;\n    p = -1.685059138182016589e-19 + p * w;\n    p = 1.2858480715256400167e-18 + p * w;\n    p = 1.115787767802518096e-17 + p * w;\n    p = -1.333171662854620906e-16 + p * w;\n    p = 2.0972767875968561637e-17 + p * w;\n    p = 6.6376381343583238325e-15 + p * w;\n    p = -4.0545662729752068639e-14 + p * w;\n    p = -8.1519341976054721522e-14 + p * w;\n    p = 2.6335093153082322977e-12 + p * w;\n    p = -1.2975133253453532498e-11 + p * w;\n    p = -5.4154120542946279317e-11 + p * w;\n    p = 1.051212273321532285e-09 + p * w;\n    p = -4.1126339803469836976e-09 + p * w;\n    p = -2.9070369957882005086e-08 + p * w;\n    p = 4.2347877827932403518e-07 + p * w;\n    p = -1.3654692000834678645e-06 + p * w;\n    p = -1.3882523362786468719e-05 + p * w;\n    p = 0.0001867342080340571352 + p * w;\n    p = -0.00074070253416626697512 + p * w;\n    p = -0.0060336708714301490533 + p * w;\n    p = 0.24015818242558961693 + p * w;\n    p = 1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n    w = Math.sqrt(w) - 3.25;\n    p = 2.2137376921775787049e-09;\n    p = 9.0756561938885390979e-08 + p * w;\n    p = -2.7517406297064545428e-07 + p * w;\n    p = 1.8239629214389227755e-08 + p * w;\n    p = 1.5027403968909827627e-06 + p * w;\n    p = -4.013867526981545969e-06 + p * w;\n    p = 2.9234449089955446044e-06 + p * w;\n    p = 1.2475304481671778723e-05 + p * w;\n    p = -4.7318229009055733981e-05 + p * w;\n    p = 6.8284851459573175448e-05 + p * w;\n    p = 2.4031110387097893999e-05 + p * w;\n    p = -0.0003550375203628474796 + p * w;\n    p = 0.00095328937973738049703 + p * w;\n    p = -0.0016882755560235047313 + p * w;\n    p = 0.0024914420961078508066 + p * w;\n    p = -0.0037512085075692412107 + p * w;\n    p = 0.005370914553590063617 + p * w;\n    p = 1.0052589676941592334 + p * w;\n    p = 3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n    w = Math.sqrt(w) - 5.0;\n    p = -2.7109920616438573243e-11;\n    p = -2.5556418169965252055e-10 + p * w;\n    p = 1.5076572693500548083e-09 + p * w;\n    p = -3.7894654401267369937e-09 + p * w;\n    p = 7.6157012080783393804e-09 + p * w;\n    p = -1.4960026627149240478e-08 + p * w;\n    p = 2.9147953450901080826e-08 + p * w;\n    p = -6.7711997758452339498e-08 + p * w;\n    p = 2.2900482228026654717e-07 + p * w;\n    p = -9.9298272942317002539e-07 + p * w;\n    p = 4.5260625972231537039e-06 + p * w;\n    p = -1.9681778105531670567e-05 + p * w;\n    p = 7.5995277030017761139e-05 + p * w;\n    p = -0.00021503011930044477347 + p * w;\n    p = -0.00013871931833623122026 + p * w;\n    p = 1.0103004648645343977 + p * w;\n    p = 4.8499064014085844221 + p * w;\n  } else {\n    p = Infinity;\n  }\n  return p * x;\n}\nfunction gaussian(mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\nfunction kde(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n    pdf(x) {\n      let y = 0,\n        i = 0;\n      for (; i < n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n    cdf(x) {\n      let y = 0,\n        i = 0;\n      for (; i < n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n  return dist.data(support);\n}\nfunction sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\nfunction densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\nfunction cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\nfunction quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\nfunction lognormal(mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\nfunction mixture(dists, weights) {\n  let m = 0,\n    w;\n  function normalize(x) {\n    const w = [];\n    let sum = 0,\n      i;\n    for (i = 0; i < m; ++i) {\n      sum += w[i] = x[i] == null ? 1 : +x[i];\n    }\n    for (i = 0; i < m; ++i) {\n      w[i] /= sum;\n    }\n    return w;\n  }\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = _ || []);\n        return dist;\n      }\n      return weights;\n    },\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n    sample() {\n      const r = random();\n      let d = dists[m - 1],\n        v = w[0],\n        i = 0;\n\n      // first select distribution\n      for (; i < m - 1; v += w[++i]) {\n        if (r < v) {\n          d = dists[i];\n          break;\n        }\n      }\n      // then sample from it\n      return d.sample();\n    },\n    pdf(x) {\n      let p = 0,\n        i = 0;\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n    cdf(x) {\n      let p = 0,\n        i = 0;\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n  return dist.distributions(dists).weights(weights);\n}\nfunction sampleUniform(min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\nfunction densityUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return value >= min && value <= max ? 1 / (max - min) : 0;\n}\nfunction cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\nfunction quantileUniform(p, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n}\nfunction uniform(min, max) {\n  let a, b;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\nfunction constant(data, x, y) {\n  let mean = 0,\n    n = 0;\n  for (const d of data) {\n    const val = y(d);\n    if (x(d) == null || val == null || isNaN(val)) continue;\n    mean += (val - mean) / ++n;\n  }\n  return {\n    coef: [mean],\n    predict: () => mean,\n    rSquared: 0\n  };\n}\n\n// Ordinary Least Squares\nfunction ols(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n    slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n    intercept = uY - slope * uX;\n  return [intercept, slope];\n}\nfunction points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d),\n      v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n  const n = data.length,\n    X = new Float64Array(n),\n    Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0,\n    ux = 0,\n    uy = 0,\n    xv,\n    yv,\n    d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i = 0; i < n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n  return [X, Y, ux, uy];\n}\nfunction visitPoints(data, x, y, callback) {\n  let i = -1,\n    u,\n    v;\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction rSquared(data, x, y, uY, predict) {\n  let SSE = 0,\n    SST = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n      sst = dy - uY;\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n  return 1 - SSE / SST;\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction linear(data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] + coef[1] * x;\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction log(data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] + coef[1] * Math.log(x);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\nfunction exp(data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0,\n    XY = 0,\n    XYL = 0,\n    X2Y = 0,\n    n = 0,\n    dx,\n    ly,\n    xy;\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n    predict = x => Math.exp(c0 + c1 * (x - ux));\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction pow(data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    YS = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n      ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] * Math.pow(x, coef[1]);\n  coef[0] = Math.exp(coef[0]);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}\nfunction quad(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n    n = xv.length;\n  let X2 = 0,\n    X3 = 0,\n    X4 = 0,\n    XY = 0,\n    X2Y = 0,\n    i,\n    dx,\n    dy,\n    x2;\n  for (i = 0; i < n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n  const X2X2 = X4 - X2 * X2,\n    d = X2 * X2X2 - X3 * X3,\n    a = (X2Y * X2 - XY * X3) / d,\n    b = (XY * X2X2 - X2Y * X3) / d,\n    c = -a * X2,\n    predict = x => {\n      x = x - ux;\n      return a * x * x + b * x + c + uy;\n    };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nfunction poly(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 0) return constant(data, x, y);\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n  const [xv, yv, ux, uy] = points(data, x, y),\n    n = xv.length,\n    lhs = [],\n    rhs = [],\n    k = order + 1;\n  let i, j, l, v, c;\n  for (i = 0; i < k; ++i) {\n    for (l = 0, v = 0; l < n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n    c = new Float64Array(k);\n    for (j = 0; j < k; ++j) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n  const coef = gaussianElimination(rhs),\n    predict = x => {\n      x -= ux;\n      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n      return y;\n    };\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i = 0; i < k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n    coef = [];\n  let i, j, k, r, t;\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n  return coef;\n}\nconst maxiters = 2,\n  epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nfunction loess(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n    n = xv.length,\n    bw = Math.max(2, ~~(bandwidth * n)),\n    // # nearest neighbors\n    yhat = new Float64Array(n),\n    residuals = new Float64Array(n),\n    robustWeights = new Float64Array(n).fill(1);\n  for (let iter = -1; ++iter <= maxiters;) {\n    const interval = [0, bw - 1];\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n        i0 = interval[0],\n        i1 = interval[1],\n        edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n      let W = 0,\n        X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n          yk = yv[k],\n          w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n          xkw = xk * w;\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n      updateInterval(xv, i + 1, interval);\n    }\n    if (iter === maxiters) {\n      break;\n    }\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n    for (let i = 0, arg, w; i < n; ++i) {\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n    }\n  }\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n    right = interval[1] + 1;\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && xv[right] - val <= val - xv[left]) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length,\n    out = [];\n  let i = 0,\n    cnt = 0,\n    prev = [],\n    v;\n  for (; i < n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / ++cnt;\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n  return out;\n}\n\n// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nfunction sampleCurve(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n  const point = x => [x, f(x)],\n    minX = extent[0],\n    maxX = extent[1],\n    span = maxX - minX,\n    stop = span / maxSteps,\n    prev = [point(minX)],\n    next = [];\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + i / minSteps * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + i / minSteps * span));\n    }\n  }\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n  return prev;\n}\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n  return 1 / (ymax - ymin);\n}\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n    a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\nexport { estimateBandwidth as bandwidthNRD, bin, bootstrapCI, cumulativeLogNormal, cumulativeNormal, cumulativeUniform, densityLogNormal, densityNormal, densityUniform, dotbin, quantileLogNormal, quantileNormal, quantileUniform, quantiles, quartiles, random, integer as randomInteger, kde as randomKDE, lcg as randomLCG, lognormal as randomLogNormal, mixture as randomMixture, gaussian as randomNormal, uniform as randomUniform, constant as regressionConstant, exp as regressionExp, linear as regressionLinear, loess as regressionLoess, log as regressionLog, poly as regressionPoly, pow as regressionPow, quad as regressionQuad, sampleCurve, sampleLogNormal, sampleNormal, sampleUniform, setRandom };","map":{"version":3,"names":["ascending","quantileSorted","deviation","quantile","median","numbers","values","valueof","value","index","quantiles","array","p","f","Float64Array","from","sort","map","_","quartiles","estimateBandwidth","n","length","d","q","h","v","Math","min","abs","pow","bin","maxb","maxbins","base","logb","log","div","divide","extent","max","step","level","minstep","i","span","steps","ceil","round","precision","eps","nice","undefined","floor","start","stop","random","setRandom","r","bootstrapCI","samples","alpha","m","a","j","mu","Array","dotbin","smooth","b","w","x","smoothing","thresh","c","lcg","seed","integer","dist","arguments","sample","pdf","cdf","icdf","NaN","SQRT2PI","sqrt","PI","SQRT2","nextSample","sampleNormal","mean","stdev","y","rds","densityNormal","z","exp","cumulativeNormal","Z","cd","sum","quantileNormal","erfinv","Number","isFinite","Infinity","gaussian","sigma","kde","support","bandwidth","kernel","data","Error","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","lognormal","mixture","dists","weights","normalize","distributions","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","uniform","constant","val","isNaN","coef","predict","rSquared","ols","uX","uY","uXY","uX2","delta","slope","intercept","points","filter","u","X","Y","ux","uy","xv","yv","visitPoints","callback","SSE","SST","dx","dy","sse","sst","linear","XY","X2","YL","XYL","X2Y","ly","xy","c0","c1","YS","lx","quad","X3","X4","x2","X2X2","poly","order","lhs","rhs","k","l","push","gaussianElimination","uncenter","matrix","t","maxiters","epsilon","loess","bw","yhat","residuals","robustWeights","fill","iter","interval","i0","i1","edge","W","denom","xk","yk","tricube","xkw","updateInterval","medianResidual","arg","output","left","right","out","cnt","prev","MIN_RADIANS","sampleCurve","minSteps","maxSteps","point","minX","maxX","next","p0","p1","sx","sy","scaleY","pm","angleDelta","pop","init","ymin","ymax","a0","atan2","a1","bandwidthNRD","randomInteger","randomKDE","randomLCG","randomLogNormal","randomMixture","randomNormal","randomUniform","regressionConstant","regressionExp","regressionLinear","regressionLoess","regressionLog","regressionPoly","regressionPow","regressionQuad"],"sources":["C:/Users/sutul/node_modules/vega-statistics/build/vega-statistics.module.js"],"sourcesContent":["import { ascending, quantileSorted, deviation, quantile, median } from 'd3-array';\n\nfunction* numbers (values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nfunction quantiles (array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n  return p.map(_ => quantileSorted(values, _));\n}\n\nfunction quartiles (array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nfunction estimateBandwidth (array, f) {\n  const n = array.length,\n    d = deviation(array, f),\n    q = quartiles(array, f),\n    h = (q[2] - q[0]) / 1.34,\n    v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n\nfunction bin (_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n    base = _.base || 10,\n    logb = Math.log(base),\n    div = _.divide || [5, 2];\n  let min = _.extent[0],\n    max = _.extent[1],\n    step,\n    level,\n    minstep,\n    v,\n    i,\n    n;\n  const span = _.span || max - min || Math.abs(min) || 1;\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i - 1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level));\n\n    // increase step size if too many bins\n    while (Math.ceil(span / step) > maxb) {\n      step *= base;\n    }\n\n    // decrease step size if allowed\n    for (i = 0, n = div.length; i < n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n    eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n  return {\n    start: min,\n    stop: max === min ? min + step : max,\n    step: step\n  };\n}\n\nvar random = Math.random;\nfunction setRandom(r) {\n  random = r;\n}\n\nfunction bootstrapCI (array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n  const values = Float64Array.from(numbers(array, f)),\n    n = values.length,\n    m = samples;\n  let a, i, j, mu;\n  for (j = 0, mu = Array(m); j < m; ++j) {\n    for (a = 0, i = 0; i < n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n  mu.sort(ascending);\n  return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];\n}\n\n// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nfunction dotbin (array, step, smooth, f) {\n  f = f || (_ => _);\n  const n = array.length,\n    v = new Float64Array(n);\n  let i = 0,\n    j = 1,\n    a = f(array[0]),\n    b = a,\n    w = a + step,\n    x;\n  for (; j < n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i < j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n  b = (a + b) / 2;\n  for (; i < j; ++i) v[i] = b;\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n    b = 1,\n    c,\n    d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b - 1] < thresh) {\n      d = b + (a + c - b - b >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n  return v;\n}\n\nfunction lcg (seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function () {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n\nfunction integer (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  let a, b, d;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n  return dist.min(min).max(max);\n}\n\nconst SQRT2PI = Math.sqrt(2 * Math.PI);\nconst SQRT2 = Math.SQRT2;\n\nlet nextSample = NaN;\nfunction sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  let x = 0,\n    y = 0,\n    rds,\n    c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\nfunction densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nfunction cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - mean) / stdev,\n    Z = Math.abs(z);\n  let cd;\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nfunction quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = -Math.log((1 - x) * (1 + x)),\n    p;\n  if (w < 6.25) {\n    w -= 3.125;\n    p = -3.6444120640178196996e-21;\n    p = -1.685059138182016589e-19 + p * w;\n    p = 1.2858480715256400167e-18 + p * w;\n    p = 1.115787767802518096e-17 + p * w;\n    p = -1.333171662854620906e-16 + p * w;\n    p = 2.0972767875968561637e-17 + p * w;\n    p = 6.6376381343583238325e-15 + p * w;\n    p = -4.0545662729752068639e-14 + p * w;\n    p = -8.1519341976054721522e-14 + p * w;\n    p = 2.6335093153082322977e-12 + p * w;\n    p = -1.2975133253453532498e-11 + p * w;\n    p = -5.4154120542946279317e-11 + p * w;\n    p = 1.051212273321532285e-09 + p * w;\n    p = -4.1126339803469836976e-09 + p * w;\n    p = -2.9070369957882005086e-08 + p * w;\n    p = 4.2347877827932403518e-07 + p * w;\n    p = -1.3654692000834678645e-06 + p * w;\n    p = -1.3882523362786468719e-05 + p * w;\n    p = 0.0001867342080340571352 + p * w;\n    p = -0.00074070253416626697512 + p * w;\n    p = -0.0060336708714301490533 + p * w;\n    p = 0.24015818242558961693 + p * w;\n    p = 1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n    w = Math.sqrt(w) - 3.25;\n    p = 2.2137376921775787049e-09;\n    p = 9.0756561938885390979e-08 + p * w;\n    p = -2.7517406297064545428e-07 + p * w;\n    p = 1.8239629214389227755e-08 + p * w;\n    p = 1.5027403968909827627e-06 + p * w;\n    p = -4.013867526981545969e-06 + p * w;\n    p = 2.9234449089955446044e-06 + p * w;\n    p = 1.2475304481671778723e-05 + p * w;\n    p = -4.7318229009055733981e-05 + p * w;\n    p = 6.8284851459573175448e-05 + p * w;\n    p = 2.4031110387097893999e-05 + p * w;\n    p = -0.0003550375203628474796 + p * w;\n    p = 0.00095328937973738049703 + p * w;\n    p = -0.0016882755560235047313 + p * w;\n    p = 0.0024914420961078508066 + p * w;\n    p = -0.0037512085075692412107 + p * w;\n    p = 0.005370914553590063617 + p * w;\n    p = 1.0052589676941592334 + p * w;\n    p = 3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n    w = Math.sqrt(w) - 5.0;\n    p = -2.7109920616438573243e-11;\n    p = -2.5556418169965252055e-10 + p * w;\n    p = 1.5076572693500548083e-09 + p * w;\n    p = -3.7894654401267369937e-09 + p * w;\n    p = 7.6157012080783393804e-09 + p * w;\n    p = -1.4960026627149240478e-08 + p * w;\n    p = 2.9147953450901080826e-08 + p * w;\n    p = -6.7711997758452339498e-08 + p * w;\n    p = 2.2900482228026654717e-07 + p * w;\n    p = -9.9298272942317002539e-07 + p * w;\n    p = 4.5260625972231537039e-06 + p * w;\n    p = -1.9681778105531670567e-05 + p * w;\n    p = 7.5995277030017761139e-05 + p * w;\n    p = -0.00021503011930044477347 + p * w;\n    p = -0.00013871931833623122026 + p * w;\n    p = 1.0103004648645343977 + p * w;\n    p = 4.8499064014085844221 + p * w;\n  } else {\n    p = Infinity;\n  }\n  return p * x;\n}\nfunction gaussian (mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction kde (support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n    pdf(x) {\n      let y = 0,\n        i = 0;\n      for (; i < n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n    cdf(x) {\n      let y = 0,\n        i = 0;\n      for (; i < n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n  return dist.data(support);\n}\n\nfunction sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\nfunction densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\nfunction cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\nfunction quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\nfunction lognormal (mean, stdev) {\n  let mu, sigma;\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n  return dist.mean(mean).stdev(stdev);\n}\n\nfunction mixture (dists, weights) {\n  let m = 0,\n    w;\n  function normalize(x) {\n    const w = [];\n    let sum = 0,\n      i;\n    for (i = 0; i < m; ++i) {\n      sum += w[i] = x[i] == null ? 1 : +x[i];\n    }\n    for (i = 0; i < m; ++i) {\n      w[i] /= sum;\n    }\n    return w;\n  }\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = _ || []);\n        return dist;\n      }\n      return weights;\n    },\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n    sample() {\n      const r = random();\n      let d = dists[m - 1],\n        v = w[0],\n        i = 0;\n\n      // first select distribution\n      for (; i < m - 1; v += w[++i]) {\n        if (r < v) {\n          d = dists[i];\n          break;\n        }\n      }\n      // then sample from it\n      return d.sample();\n    },\n    pdf(x) {\n      let p = 0,\n        i = 0;\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n    cdf(x) {\n      let p = 0,\n        i = 0;\n      for (; i < m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n  return dist.distributions(dists).weights(weights);\n}\n\nfunction sampleUniform(min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\nfunction densityUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return value >= min && value <= max ? 1 / (max - min) : 0;\n}\nfunction cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\nfunction quantileUniform(p, min, max) {\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n}\nfunction uniform (min, max) {\n  let a, b;\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n  if (max == null) {\n    max = min == null ? 1 : min;\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n\nfunction constant (data, x, y) {\n  let mean = 0,\n    n = 0;\n  for (const d of data) {\n    const val = y(d);\n    if (x(d) == null || val == null || isNaN(val)) continue;\n    mean += (val - mean) / ++n;\n  }\n  return {\n    coef: [mean],\n    predict: () => mean,\n    rSquared: 0\n  };\n}\n\n// Ordinary Least Squares\nfunction ols (uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n    slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n    intercept = uY - slope * uX;\n  return [intercept, slope];\n}\n\nfunction points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d),\n      v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n  const n = data.length,\n    X = new Float64Array(n),\n    Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0,\n    ux = 0,\n    uy = 0,\n    xv,\n    yv,\n    d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i = 0; i < n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n  return [X, Y, ux, uy];\n}\nfunction visitPoints(data, x, y, callback) {\n  let i = -1,\n    u,\n    v;\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction rSquared (data, x, y, uY, predict) {\n  let SSE = 0,\n    SST = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n      sst = dy - uY;\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n  return 1 - SSE / SST;\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction linear (data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] + coef[1] * x;\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction log (data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] + coef[1] * Math.log(x);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n\nfunction exp (data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0,\n    XY = 0,\n    XYL = 0,\n    X2Y = 0,\n    n = 0,\n    dx,\n    ly,\n    xy;\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n    predict = x => Math.exp(c0 + c1 * (x - ux));\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nfunction pow (data, x, y) {\n  let X = 0,\n    Y = 0,\n    XY = 0,\n    X2 = 0,\n    YS = 0,\n    n = 0;\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n      ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n  const coef = ols(X, Y, XY, X2),\n    predict = x => coef[0] * Math.pow(x, coef[1]);\n  coef[0] = Math.exp(coef[0]);\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}\n\nfunction quad (data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n    n = xv.length;\n  let X2 = 0,\n    X3 = 0,\n    X4 = 0,\n    XY = 0,\n    X2Y = 0,\n    i,\n    dx,\n    dy,\n    x2;\n  for (i = 0; i < n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n  const X2X2 = X4 - X2 * X2,\n    d = X2 * X2X2 - X3 * X3,\n    a = (X2Y * X2 - XY * X3) / d,\n    b = (XY * X2X2 - X2Y * X3) / d,\n    c = -a * X2,\n    predict = x => {\n      x = x - ux;\n      return a * x * x + b * x + c + uy;\n    };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nfunction poly (data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 0) return constant(data, x, y);\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n  const [xv, yv, ux, uy] = points(data, x, y),\n    n = xv.length,\n    lhs = [],\n    rhs = [],\n    k = order + 1;\n  let i, j, l, v, c;\n  for (i = 0; i < k; ++i) {\n    for (l = 0, v = 0; l < n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n    c = new Float64Array(k);\n    for (j = 0; j < k; ++j) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n  const coef = gaussianElimination(rhs),\n    predict = x => {\n      x -= ux;\n      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n      return y;\n    };\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i = 0; i < k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n    coef = [];\n  let i, j, k, r, t;\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n  return coef;\n}\n\nconst maxiters = 2,\n  epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nfunction loess (data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n    n = xv.length,\n    bw = Math.max(2, ~~(bandwidth * n)),\n    // # nearest neighbors\n    yhat = new Float64Array(n),\n    residuals = new Float64Array(n),\n    robustWeights = new Float64Array(n).fill(1);\n  for (let iter = -1; ++iter <= maxiters;) {\n    const interval = [0, bw - 1];\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n        i0 = interval[0],\n        i1 = interval[1],\n        edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n      let W = 0,\n        X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n          yk = yv[k],\n          w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n          xkw = xk * w;\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n      updateInterval(xv, i + 1, interval);\n    }\n    if (iter === maxiters) {\n      break;\n    }\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n    for (let i = 0, arg, w; i < n; ++i) {\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n    }\n  }\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n    right = interval[1] + 1;\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && xv[right] - val <= val - xv[left]) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length,\n    out = [];\n  let i = 0,\n    cnt = 0,\n    prev = [],\n    v;\n  for (; i < n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / ++cnt;\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n  return out;\n}\n\n// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nfunction sampleCurve (f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n  const point = x => [x, f(x)],\n    minX = extent[0],\n    maxX = extent[1],\n    span = maxX - minX,\n    stop = span / maxSteps,\n    prev = [point(minX)],\n    next = [];\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + i / minSteps * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + i / minSteps * span));\n    }\n  }\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n  return prev;\n}\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n  return 1 / (ymax - ymin);\n}\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n    a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n\nexport { estimateBandwidth as bandwidthNRD, bin, bootstrapCI, cumulativeLogNormal, cumulativeNormal, cumulativeUniform, densityLogNormal, densityNormal, densityUniform, dotbin, quantileLogNormal, quantileNormal, quantileUniform, quantiles, quartiles, random, integer as randomInteger, kde as randomKDE, lcg as randomLCG, lognormal as randomLogNormal, mixture as randomMixture, gaussian as randomNormal, uniform as randomUniform, constant as regressionConstant, exp as regressionExp, linear as regressionLinear, loess as regressionLoess, log as regressionLog, poly as regressionPoly, pow as regressionPow, quad as regressionQuad, sampleCurve, sampleLogNormal, sampleNormal, sampleUniform, setRandom };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,UAAU;AAEjF,UAAUC,OAAOA,CAAEC,MAAM,EAAEC,OAAO,EAAE;EAClC,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,KAAK,IAAIC,KAAK,IAAIF,MAAM,EAAE;MACxB,IAAIE,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,EAAE,IAAI,CAACA,KAAK,GAAG,CAACA,KAAK,KAAKA,KAAK,EAAE;QAC9D,MAAMA,KAAK;MACb;IACF;EACF,CAAC,MAAM;IACL,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,IAAID,KAAK,IAAIF,MAAM,EAAE;MACxBE,KAAK,GAAGD,OAAO,CAACC,KAAK,EAAE,EAAEC,KAAK,EAAEH,MAAM,CAAC;MACvC,IAAIE,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,EAAE,IAAI,CAACA,KAAK,GAAG,CAACA,KAAK,KAAKA,KAAK,EAAE;QAC9D,MAAMA,KAAK;MACb;IACF;EACF;AACF;AAEA,SAASE,SAASA,CAAEC,KAAK,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC/B,MAAMP,MAAM,GAAGQ,YAAY,CAACC,IAAI,CAACV,OAAO,CAACM,KAAK,EAAEE,CAAC,CAAC,CAAC;;EAEnD;EACA;EACAP,MAAM,CAACU,IAAI,CAAChB,SAAS,CAAC;EACtB,OAAOY,CAAC,CAACK,GAAG,CAACC,CAAC,IAAIjB,cAAc,CAACK,MAAM,EAAEY,CAAC,CAAC,CAAC;AAC9C;AAEA,SAASC,SAASA,CAAER,KAAK,EAAEE,CAAC,EAAE;EAC5B,OAAOH,SAAS,CAACC,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,EAAEE,CAAC,CAAC;AAChD;;AAEA;AACA;AACA,SAASO,iBAAiBA,CAAET,KAAK,EAAEE,CAAC,EAAE;EACpC,MAAMQ,CAAC,GAAGV,KAAK,CAACW,MAAM;IACpBC,CAAC,GAAGrB,SAAS,CAACS,KAAK,EAAEE,CAAC,CAAC;IACvBW,CAAC,GAAGL,SAAS,CAACR,KAAK,EAAEE,CAAC,CAAC;IACvBY,CAAC,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;IACxBE,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACL,CAAC,EAAEE,CAAC,CAAC,IAAIF,CAAC,IAAII,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;EAChD,OAAO,IAAI,GAAGE,CAAC,GAAGC,IAAI,CAACG,GAAG,CAACT,CAAC,EAAE,CAAC,GAAG,CAAC;AACrC;AAEA,SAASU,GAAGA,CAAEb,CAAC,EAAE;EACf;EACA,MAAMc,IAAI,GAAGd,CAAC,CAACe,OAAO,IAAI,EAAE;IAC1BC,IAAI,GAAGhB,CAAC,CAACgB,IAAI,IAAI,EAAE;IACnBC,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACF,IAAI,CAAC;IACrBG,GAAG,GAAGnB,CAAC,CAACoB,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,IAAIV,GAAG,GAAGV,CAAC,CAACqB,MAAM,CAAC,CAAC,CAAC;IACnBC,GAAG,GAAGtB,CAAC,CAACqB,MAAM,CAAC,CAAC,CAAC;IACjBE,IAAI;IACJC,KAAK;IACLC,OAAO;IACPjB,CAAC;IACDkB,CAAC;IACDvB,CAAC;EACH,MAAMwB,IAAI,GAAG3B,CAAC,CAAC2B,IAAI,IAAIL,GAAG,GAAGZ,GAAG,IAAID,IAAI,CAACE,GAAG,CAACD,GAAG,CAAC,IAAI,CAAC;EACtD,IAAIV,CAAC,CAACuB,IAAI,EAAE;IACV;IACAA,IAAI,GAAGvB,CAAC,CAACuB,IAAI;EACf,CAAC,MAAM,IAAIvB,CAAC,CAAC4B,KAAK,EAAE;IAClB;IACApB,CAAC,GAAGmB,IAAI,GAAGb,IAAI;IACf,KAAKY,CAAC,GAAG,CAAC,EAAEvB,CAAC,GAAGH,CAAC,CAAC4B,KAAK,CAACxB,MAAM,EAAEsB,CAAC,GAAGvB,CAAC,IAAIH,CAAC,CAAC4B,KAAK,CAACF,CAAC,CAAC,GAAGlB,CAAC,EAAE,EAAEkB,CAAC,CAAC;IAC7DH,IAAI,GAAGvB,CAAC,CAAC4B,KAAK,CAACnB,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC,CAAC;EACpC,CAAC,MAAM;IACL;IACAF,KAAK,GAAGf,IAAI,CAACoB,IAAI,CAACpB,IAAI,CAACS,GAAG,CAACJ,IAAI,CAAC,GAAGG,IAAI,CAAC;IACxCQ,OAAO,GAAGzB,CAAC,CAACyB,OAAO,IAAI,CAAC;IACxBF,IAAI,GAAGd,IAAI,CAACa,GAAG,CAACG,OAAO,EAAEhB,IAAI,CAACG,GAAG,CAACI,IAAI,EAAEP,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACS,GAAG,CAACS,IAAI,CAAC,GAAGV,IAAI,CAAC,GAAGO,KAAK,CAAC,CAAC;;IAEnF;IACA,OAAOf,IAAI,CAACoB,IAAI,CAACF,IAAI,GAAGJ,IAAI,CAAC,GAAGT,IAAI,EAAE;MACpCS,IAAI,IAAIP,IAAI;IACd;;IAEA;IACA,KAAKU,CAAC,GAAG,CAAC,EAAEvB,CAAC,GAAGgB,GAAG,CAACf,MAAM,EAAEsB,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;MACtClB,CAAC,GAAGe,IAAI,GAAGJ,GAAG,CAACO,CAAC,CAAC;MACjB,IAAIlB,CAAC,IAAIiB,OAAO,IAAIE,IAAI,GAAGnB,CAAC,IAAIM,IAAI,EAAES,IAAI,GAAGf,CAAC;IAChD;EACF;;EAEA;EACAA,CAAC,GAAGC,IAAI,CAACS,GAAG,CAACK,IAAI,CAAC;EAClB,MAAMQ,SAAS,GAAGvB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAACA,CAAC,GAAGS,IAAI,CAAC,GAAG,CAAC;IAC9Ce,GAAG,GAAGvB,IAAI,CAACG,GAAG,CAACI,IAAI,EAAE,CAACe,SAAS,GAAG,CAAC,CAAC;EACtC,IAAI/B,CAAC,CAACiC,IAAI,IAAIjC,CAAC,CAACiC,IAAI,KAAKC,SAAS,EAAE;IAClC1B,CAAC,GAAGC,IAAI,CAAC0B,KAAK,CAACzB,GAAG,GAAGa,IAAI,GAAGS,GAAG,CAAC,GAAGT,IAAI;IACvCb,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAGA,CAAC,GAAGe,IAAI,GAAGf,CAAC;IAC5Bc,GAAG,GAAGb,IAAI,CAACoB,IAAI,CAACP,GAAG,GAAGC,IAAI,CAAC,GAAGA,IAAI;EACpC;EACA,OAAO;IACLa,KAAK,EAAE1B,GAAG;IACV2B,IAAI,EAAEf,GAAG,KAAKZ,GAAG,GAAGA,GAAG,GAAGa,IAAI,GAAGD,GAAG;IACpCC,IAAI,EAAEA;EACR,CAAC;AACH;AAEA,IAAIe,MAAM,GAAG7B,IAAI,CAAC6B,MAAM;AACxB,SAASC,SAASA,CAACC,CAAC,EAAE;EACpBF,MAAM,GAAGE,CAAC;AACZ;AAEA,SAASC,WAAWA,CAAEhD,KAAK,EAAEiD,OAAO,EAAEC,KAAK,EAAEhD,CAAC,EAAE;EAC9C,IAAI,CAACF,KAAK,CAACW,MAAM,EAAE,OAAO,CAAC8B,SAAS,EAAEA,SAAS,CAAC;EAChD,MAAM9C,MAAM,GAAGQ,YAAY,CAACC,IAAI,CAACV,OAAO,CAACM,KAAK,EAAEE,CAAC,CAAC,CAAC;IACjDQ,CAAC,GAAGf,MAAM,CAACgB,MAAM;IACjBwC,CAAC,GAAGF,OAAO;EACb,IAAIG,CAAC,EAAEnB,CAAC,EAAEoB,CAAC,EAAEC,EAAE;EACf,KAAKD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,KAAK,CAACJ,CAAC,CAAC,EAAEE,CAAC,GAAGF,CAAC,EAAE,EAAEE,CAAC,EAAE;IACrC,KAAKD,CAAC,GAAG,CAAC,EAAEnB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;MAC7BmB,CAAC,IAAIzD,MAAM,CAAC,CAAC,EAAEkD,MAAM,CAAC,CAAC,GAAGnC,CAAC,CAAC,CAAC;IAC/B;IACA4C,EAAE,CAACD,CAAC,CAAC,GAAGD,CAAC,GAAG1C,CAAC;EACf;EACA4C,EAAE,CAACjD,IAAI,CAAChB,SAAS,CAAC;EAClB,OAAO,CAACG,QAAQ,CAAC8D,EAAE,EAAEJ,KAAK,GAAG,CAAC,CAAC,EAAE1D,QAAQ,CAAC8D,EAAE,EAAE,CAAC,GAAGJ,KAAK,GAAG,CAAC,CAAC,CAAC;AAC/D;;AAEA;AACA;AACA;AACA,SAASM,MAAMA,CAAExD,KAAK,EAAE8B,IAAI,EAAE2B,MAAM,EAAEvD,CAAC,EAAE;EACvCA,CAAC,GAAGA,CAAC,KAAKK,CAAC,IAAIA,CAAC,CAAC;EACjB,MAAMG,CAAC,GAAGV,KAAK,CAACW,MAAM;IACpBI,CAAC,GAAG,IAAIZ,YAAY,CAACO,CAAC,CAAC;EACzB,IAAIuB,CAAC,GAAG,CAAC;IACPoB,CAAC,GAAG,CAAC;IACLD,CAAC,GAAGlD,CAAC,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;IACf0D,CAAC,GAAGN,CAAC;IACLO,CAAC,GAAGP,CAAC,GAAGtB,IAAI;IACZ8B,CAAC;EACH,OAAOP,CAAC,GAAG3C,CAAC,EAAE,EAAE2C,CAAC,EAAE;IACjBO,CAAC,GAAG1D,CAAC,CAACF,KAAK,CAACqD,CAAC,CAAC,CAAC;IACf,IAAIO,CAAC,IAAID,CAAC,EAAE;MACVD,CAAC,GAAG,CAACN,CAAC,GAAGM,CAAC,IAAI,CAAC;MACf,OAAOzB,CAAC,GAAGoB,CAAC,EAAE,EAAEpB,CAAC,EAAElB,CAAC,CAACkB,CAAC,CAAC,GAAGyB,CAAC;MAC3BC,CAAC,GAAGC,CAAC,GAAG9B,IAAI;MACZsB,CAAC,GAAGQ,CAAC;IACP;IACAF,CAAC,GAAGE,CAAC;EACP;EACAF,CAAC,GAAG,CAACN,CAAC,GAAGM,CAAC,IAAI,CAAC;EACf,OAAOzB,CAAC,GAAGoB,CAAC,EAAE,EAAEpB,CAAC,EAAElB,CAAC,CAACkB,CAAC,CAAC,GAAGyB,CAAC;EAC3B,OAAOD,MAAM,GAAGI,SAAS,CAAC9C,CAAC,EAAEe,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC,GAAGf,CAAC;AACnD;;AAEA;AACA;AACA;AACA,SAAS8C,SAASA,CAAC9C,CAAC,EAAE+C,MAAM,EAAE;EAC5B,MAAMpD,CAAC,GAAGK,CAAC,CAACJ,MAAM;EAClB,IAAIyC,CAAC,GAAG,CAAC;IACPM,CAAC,GAAG,CAAC;IACLK,CAAC;IACDnD,CAAC;;EAEH;EACA,OAAOG,CAAC,CAACqC,CAAC,CAAC,KAAKrC,CAAC,CAAC2C,CAAC,CAAC,EAAE,EAAEA,CAAC;EACzB,OAAOA,CAAC,GAAGhD,CAAC,EAAE;IACZ;IACAqD,CAAC,GAAGL,CAAC,GAAG,CAAC;IACT,OAAO3C,CAAC,CAAC2C,CAAC,CAAC,KAAK3C,CAAC,CAACgD,CAAC,CAAC,EAAE,EAAEA,CAAC;;IAEzB;IACA;IACA,IAAIhD,CAAC,CAAC2C,CAAC,CAAC,GAAG3C,CAAC,CAAC2C,CAAC,GAAG,CAAC,CAAC,GAAGI,MAAM,EAAE;MAC5BlD,CAAC,GAAG8C,CAAC,IAAIN,CAAC,GAAGW,CAAC,GAAGL,CAAC,GAAGA,CAAC,IAAI,CAAC,CAAC;MAC5B,OAAO9C,CAAC,GAAG8C,CAAC,EAAE3C,CAAC,CAACH,CAAC,EAAE,CAAC,GAAGG,CAAC,CAAC2C,CAAC,CAAC;MAC3B,OAAO9C,CAAC,GAAG8C,CAAC,EAAE3C,CAAC,CAACH,CAAC,EAAE,CAAC,GAAGG,CAAC,CAACqC,CAAC,CAAC;IAC7B;;IAEA;IACAA,CAAC,GAAGM,CAAC;IACLA,CAAC,GAAGK,CAAC;EACP;EACA,OAAOhD,CAAC;AACV;AAEA,SAASiD,GAAGA,CAAEC,IAAI,EAAE;EAClB;EACA;EACA,OAAO,YAAY;IACjBA,IAAI,GAAG,CAAC,UAAU,GAAGA,IAAI,GAAG,KAAK,IAAI,UAAU;IAC/C,OAAOA,IAAI,GAAG,UAAU;EAC1B,CAAC;AACH;AAEA,SAASC,OAAOA,CAAEjD,GAAG,EAAEY,GAAG,EAAE;EAC1B,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG;IACTA,GAAG,GAAG,CAAC;EACT;EACA,IAAImC,CAAC,EAAEM,CAAC,EAAE9C,CAAC;EACX,MAAMuD,IAAI,GAAG;IACXlD,GAAGA,CAACV,CAAC,EAAE;MACL,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpByC,CAAC,GAAG7C,CAAC,IAAI,CAAC;QACVK,CAAC,GAAG8C,CAAC,GAAGN,CAAC;QACT,OAAOe,IAAI;MACb,CAAC,MAAM;QACL,OAAOf,CAAC;MACV;IACF,CAAC;IACDvB,GAAGA,CAACtB,CAAC,EAAE;MACL,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpB+C,CAAC,GAAGnD,CAAC,IAAI,CAAC;QACVK,CAAC,GAAG8C,CAAC,GAAGN,CAAC;QACT,OAAOe,IAAI;MACb,CAAC,MAAM;QACL,OAAOT,CAAC;MACV;IACF,CAAC;IACDW,MAAMA,CAAA,EAAG;MACP,OAAOjB,CAAC,GAAGpC,IAAI,CAAC0B,KAAK,CAAC9B,CAAC,GAAGiC,MAAM,CAAC,CAAC,CAAC;IACrC,CAAC;IACDyB,GAAGA,CAACV,CAAC,EAAE;MACL,OAAOA,CAAC,KAAK5C,IAAI,CAAC0B,KAAK,CAACkB,CAAC,CAAC,IAAIA,CAAC,IAAIR,CAAC,IAAIQ,CAAC,GAAGF,CAAC,GAAG,CAAC,GAAG9C,CAAC,GAAG,CAAC;IAC3D,CAAC;IACD2D,GAAGA,CAACX,CAAC,EAAE;MACL,MAAM7C,CAAC,GAAGC,IAAI,CAAC0B,KAAK,CAACkB,CAAC,CAAC;MACvB,OAAO7C,CAAC,GAAGqC,CAAC,GAAG,CAAC,GAAGrC,CAAC,IAAI2C,CAAC,GAAG,CAAC,GAAG,CAAC3C,CAAC,GAAGqC,CAAC,GAAG,CAAC,IAAIxC,CAAC;IACjD,CAAC;IACD4D,IAAIA,CAACvE,CAAC,EAAE;MACN,OAAOA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,CAAC,GAAGmD,CAAC,GAAG,CAAC,GAAGpC,IAAI,CAAC0B,KAAK,CAACzC,CAAC,GAAGW,CAAC,CAAC,GAAG6D,GAAG;IAC3D;EACF,CAAC;EACD,OAAON,IAAI,CAAClD,GAAG,CAACA,GAAG,CAAC,CAACY,GAAG,CAACA,GAAG,CAAC;AAC/B;AAEA,MAAM6C,OAAO,GAAG1D,IAAI,CAAC2D,IAAI,CAAC,CAAC,GAAG3D,IAAI,CAAC4D,EAAE,CAAC;AACtC,MAAMC,KAAK,GAAG7D,IAAI,CAAC6D,KAAK;AAExB,IAAIC,UAAU,GAAGL,GAAG;AACpB,SAASM,YAAYA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACjCD,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChBC,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK;EACjC,IAAIrB,CAAC,GAAG,CAAC;IACPsB,CAAC,GAAG,CAAC;IACLC,GAAG;IACHpB,CAAC;EACH,IAAIe,UAAU,KAAKA,UAAU,EAAE;IAC7BlB,CAAC,GAAGkB,UAAU;IACdA,UAAU,GAAGL,GAAG;EAClB,CAAC,MAAM;IACL,GAAG;MACDb,CAAC,GAAGf,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACpBqC,CAAC,GAAGrC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACpBsC,GAAG,GAAGvB,CAAC,GAAGA,CAAC,GAAGsB,CAAC,GAAGA,CAAC;IACrB,CAAC,QAAQC,GAAG,KAAK,CAAC,IAAIA,GAAG,GAAG,CAAC;IAC7BpB,CAAC,GAAG/C,IAAI,CAAC2D,IAAI,CAAC,CAAC,CAAC,GAAG3D,IAAI,CAACS,GAAG,CAAC0D,GAAG,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IACzCvB,CAAC,IAAIG,CAAC;IACNe,UAAU,GAAGI,CAAC,GAAGnB,CAAC;EACpB;EACA,OAAOiB,IAAI,GAAGpB,CAAC,GAAGqB,KAAK;AACzB;AACA,SAASG,aAAaA,CAACvF,KAAK,EAAEmF,IAAI,EAAEC,KAAK,EAAE;EACzCA,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK;EACjC,MAAMI,CAAC,GAAG,CAACxF,KAAK,IAAImF,IAAI,IAAI,CAAC,CAAC,IAAIC,KAAK;EACvC,OAAOjE,IAAI,CAACsE,GAAG,CAAC,CAAC,GAAG,GAAGD,CAAC,GAAGA,CAAC,CAAC,IAAIJ,KAAK,GAAGP,OAAO,CAAC;AACnD;;AAEA;AACA;AACA,SAASa,gBAAgBA,CAAC1F,KAAK,EAAEmF,IAAI,EAAEC,KAAK,EAAE;EAC5CD,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChBC,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK;EACjC,MAAMI,CAAC,GAAG,CAACxF,KAAK,GAAGmF,IAAI,IAAIC,KAAK;IAC9BO,CAAC,GAAGxE,IAAI,CAACE,GAAG,CAACmE,CAAC,CAAC;EACjB,IAAII,EAAE;EACN,IAAID,CAAC,GAAG,EAAE,EAAE;IACVC,EAAE,GAAG,CAAC;EACR,CAAC,MAAM;IACL,MAAMH,GAAG,GAAGtE,IAAI,CAACsE,GAAG,CAAC,CAACE,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC;IAChC,IAAIE,GAAG;IACP,IAAIF,CAAC,GAAG,gBAAgB,EAAE;MACxBE,GAAG,GAAG,oBAAoB,GAAGF,CAAC,GAAG,iBAAiB;MAClDE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,eAAe;MAC/BE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCC,EAAE,GAAGH,GAAG,GAAGI,GAAG;MACdA,GAAG,GAAG,oBAAoB,GAAGF,CAAC,GAAG,gBAAgB;MACjDE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,eAAe;MAC/BE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCE,GAAG,GAAGA,GAAG,GAAGF,CAAC,GAAG,gBAAgB;MAChCC,EAAE,GAAGA,EAAE,GAAGC,GAAG;IACf,CAAC,MAAM;MACLA,GAAG,GAAGF,CAAC,GAAG,IAAI;MACdE,GAAG,GAAGF,CAAC,GAAG,CAAC,GAAGE,GAAG;MACjBA,GAAG,GAAGF,CAAC,GAAG,CAAC,GAAGE,GAAG;MACjBA,GAAG,GAAGF,CAAC,GAAG,CAAC,GAAGE,GAAG;MACjBA,GAAG,GAAGF,CAAC,GAAG,CAAC,GAAGE,GAAG;MACjBD,EAAE,GAAGH,GAAG,GAAGI,GAAG,GAAG,cAAc;IACjC;EACF;EACA,OAAOL,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGI,EAAE,GAAGA,EAAE;AAC5B;;AAEA;AACA,SAASE,cAAcA,CAAC1F,CAAC,EAAE+E,IAAI,EAAEC,KAAK,EAAE;EACtC,IAAIhF,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE,OAAOwE,GAAG;EAC9B,OAAO,CAACO,IAAI,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK,IAAIJ,KAAK,GAAGe,MAAM,CAAC,CAAC,GAAG3F,CAAC,GAAG,CAAC,CAAC;AAC9E;;AAEA;AACA;AACA;AACA,SAAS2F,MAAMA,CAAChC,CAAC,EAAE;EACjB;EACA;EACA;EACA;EACA,IAAID,CAAC,GAAG,CAAC3C,IAAI,CAACS,GAAG,CAAC,CAAC,CAAC,GAAGmC,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC,CAAC;IAClC3D,CAAC;EACH,IAAI0D,CAAC,GAAG,IAAI,EAAE;IACZA,CAAC,IAAI,KAAK;IACV1D,CAAC,GAAG,CAAC,yBAAyB;IAC9BA,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACpC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACpC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACpC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,sBAAsB,GAAGA,CAAC,GAAG0D,CAAC;IAClC1D,CAAC,GAAG,qBAAqB,GAAGA,CAAC,GAAG0D,CAAC;EACnC,CAAC,MAAM,IAAIA,CAAC,GAAG,IAAI,EAAE;IACnBA,CAAC,GAAG3C,IAAI,CAAC2D,IAAI,CAAChB,CAAC,CAAC,GAAG,IAAI;IACvB1D,CAAC,GAAG,yBAAyB;IAC7BA,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACpC1D,CAAC,GAAG,CAAC,wBAAwB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,uBAAuB,GAAGA,CAAC,GAAG0D,CAAC;IACnC1D,CAAC,GAAG,qBAAqB,GAAGA,CAAC,GAAG0D,CAAC;IACjC1D,CAAC,GAAG,qBAAqB,GAAGA,CAAC,GAAG0D,CAAC;EACnC,CAAC,MAAM,IAAIkC,MAAM,CAACC,QAAQ,CAACnC,CAAC,CAAC,EAAE;IAC7BA,CAAC,GAAG3C,IAAI,CAAC2D,IAAI,CAAChB,CAAC,CAAC,GAAG,GAAG;IACtB1D,CAAC,GAAG,CAAC,yBAAyB;IAC9BA,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACrC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,CAAC,yBAAyB,GAAGA,CAAC,GAAG0D,CAAC;IACtC1D,CAAC,GAAG,qBAAqB,GAAGA,CAAC,GAAG0D,CAAC;IACjC1D,CAAC,GAAG,qBAAqB,GAAGA,CAAC,GAAG0D,CAAC;EACnC,CAAC,MAAM;IACL1D,CAAC,GAAG8F,QAAQ;EACd;EACA,OAAO9F,CAAC,GAAG2D,CAAC;AACd;AACA,SAASoC,QAAQA,CAAEhB,IAAI,EAAEC,KAAK,EAAE;EAC9B,IAAI3B,EAAE,EAAE2C,KAAK;EACb,MAAM9B,IAAI,GAAG;IACXa,IAAIA,CAACzE,CAAC,EAAE;MACN,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpB2C,EAAE,GAAG/C,CAAC,IAAI,CAAC;QACX,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAOb,EAAE;MACX;IACF,CAAC;IACD2B,KAAKA,CAAC1E,CAAC,EAAE;MACP,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpBsF,KAAK,GAAG1F,CAAC,IAAI,IAAI,GAAG,CAAC,GAAGA,CAAC;QACzB,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAO8B,KAAK;MACd;IACF,CAAC;IACD5B,MAAM,EAAEA,CAAA,KAAMU,YAAY,CAACzB,EAAE,EAAE2C,KAAK,CAAC;IACrC3B,GAAG,EAAEzE,KAAK,IAAIuF,aAAa,CAACvF,KAAK,EAAEyD,EAAE,EAAE2C,KAAK,CAAC;IAC7C1B,GAAG,EAAE1E,KAAK,IAAI0F,gBAAgB,CAAC1F,KAAK,EAAEyD,EAAE,EAAE2C,KAAK,CAAC;IAChDzB,IAAI,EAAEvE,CAAC,IAAI0F,cAAc,CAAC1F,CAAC,EAAEqD,EAAE,EAAE2C,KAAK;EACxC,CAAC;EACD,OAAO9B,IAAI,CAACa,IAAI,CAACA,IAAI,CAAC,CAACC,KAAK,CAACA,KAAK,CAAC;AACrC;AAEA,SAASiB,GAAGA,CAAEC,OAAO,EAAEC,SAAS,EAAE;EAChC,MAAMC,MAAM,GAAGL,QAAQ,CAAC,CAAC;EACzB,IAAItF,CAAC,GAAG,CAAC;EACT,MAAMyD,IAAI,GAAG;IACXmC,IAAIA,CAAC/F,CAAC,EAAE;MACN,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpBwF,OAAO,GAAG5F,CAAC;QACXG,CAAC,GAAGH,CAAC,GAAGA,CAAC,CAACI,MAAM,GAAG,CAAC;QACpB,OAAOwD,IAAI,CAACiC,SAAS,CAACA,SAAS,CAAC;MAClC,CAAC,MAAM;QACL,OAAOD,OAAO;MAChB;IACF,CAAC;IACDC,SAASA,CAAC7F,CAAC,EAAE;MACX,IAAI,CAAC6D,SAAS,CAACzD,MAAM,EAAE,OAAOyF,SAAS;MACvCA,SAAS,GAAG7F,CAAC;MACb,IAAI,CAAC6F,SAAS,IAAID,OAAO,EAAEC,SAAS,GAAG3F,iBAAiB,CAAC0F,OAAO,CAAC;MACjE,OAAOhC,IAAI;IACb,CAAC;IACDE,MAAMA,CAAA,EAAG;MACP,OAAO8B,OAAO,CAAC,CAAC,EAAEtD,MAAM,CAAC,CAAC,GAAGnC,CAAC,CAAC,CAAC,GAAG0F,SAAS,GAAGC,MAAM,CAAChC,MAAM,CAAC,CAAC;IAChE,CAAC;IACDC,GAAGA,CAACV,CAAC,EAAE;MACL,IAAIsB,CAAC,GAAG,CAAC;QACPjD,CAAC,GAAG,CAAC;MACP,OAAOA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;QACjBiD,CAAC,IAAImB,MAAM,CAAC/B,GAAG,CAAC,CAACV,CAAC,GAAGuC,OAAO,CAAClE,CAAC,CAAC,IAAImE,SAAS,CAAC;MAC/C;MACA,OAAOlB,CAAC,GAAGkB,SAAS,GAAG1F,CAAC;IAC1B,CAAC;IACD6D,GAAGA,CAACX,CAAC,EAAE;MACL,IAAIsB,CAAC,GAAG,CAAC;QACPjD,CAAC,GAAG,CAAC;MACP,OAAOA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;QACjBiD,CAAC,IAAImB,MAAM,CAAC9B,GAAG,CAAC,CAACX,CAAC,GAAGuC,OAAO,CAAClE,CAAC,CAAC,IAAImE,SAAS,CAAC;MAC/C;MACA,OAAOlB,CAAC,GAAGxE,CAAC;IACd,CAAC;IACD8D,IAAIA,CAAA,EAAG;MACL,MAAM+B,KAAK,CAAC,yBAAyB,CAAC;IACxC;EACF,CAAC;EACD,OAAOpC,IAAI,CAACmC,IAAI,CAACH,OAAO,CAAC;AAC3B;AAEA,SAASK,eAAeA,CAACxB,IAAI,EAAEC,KAAK,EAAE;EACpCD,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChBC,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK;EACjC,OAAOjE,IAAI,CAACsE,GAAG,CAACN,IAAI,GAAGD,YAAY,CAAC,CAAC,GAAGE,KAAK,CAAC;AAChD;AACA,SAASwB,gBAAgBA,CAAC5G,KAAK,EAAEmF,IAAI,EAAEC,KAAK,EAAE;EAC5C,IAAIpF,KAAK,IAAI,CAAC,EAAE,OAAO,CAAC;EACxBmF,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChBC,KAAK,GAAGA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK;EACjC,MAAMI,CAAC,GAAG,CAACrE,IAAI,CAACS,GAAG,CAAC5B,KAAK,CAAC,GAAGmF,IAAI,IAAIC,KAAK;EAC1C,OAAOjE,IAAI,CAACsE,GAAG,CAAC,CAAC,GAAG,GAAGD,CAAC,GAAGA,CAAC,CAAC,IAAIJ,KAAK,GAAGP,OAAO,GAAG7E,KAAK,CAAC;AAC3D;AACA,SAAS6G,mBAAmBA,CAAC7G,KAAK,EAAEmF,IAAI,EAAEC,KAAK,EAAE;EAC/C,OAAOM,gBAAgB,CAACvE,IAAI,CAACS,GAAG,CAAC5B,KAAK,CAAC,EAAEmF,IAAI,EAAEC,KAAK,CAAC;AACvD;AACA,SAAS0B,iBAAiBA,CAAC1G,CAAC,EAAE+E,IAAI,EAAEC,KAAK,EAAE;EACzC,OAAOjE,IAAI,CAACsE,GAAG,CAACK,cAAc,CAAC1F,CAAC,EAAE+E,IAAI,EAAEC,KAAK,CAAC,CAAC;AACjD;AACA,SAAS2B,SAASA,CAAE5B,IAAI,EAAEC,KAAK,EAAE;EAC/B,IAAI3B,EAAE,EAAE2C,KAAK;EACb,MAAM9B,IAAI,GAAG;IACXa,IAAIA,CAACzE,CAAC,EAAE;MACN,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpB2C,EAAE,GAAG/C,CAAC,IAAI,CAAC;QACX,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAOb,EAAE;MACX;IACF,CAAC;IACD2B,KAAKA,CAAC1E,CAAC,EAAE;MACP,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpBsF,KAAK,GAAG1F,CAAC,IAAI,IAAI,GAAG,CAAC,GAAGA,CAAC;QACzB,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAO8B,KAAK;MACd;IACF,CAAC;IACD5B,MAAM,EAAEA,CAAA,KAAMmC,eAAe,CAAClD,EAAE,EAAE2C,KAAK,CAAC;IACxC3B,GAAG,EAAEzE,KAAK,IAAI4G,gBAAgB,CAAC5G,KAAK,EAAEyD,EAAE,EAAE2C,KAAK,CAAC;IAChD1B,GAAG,EAAE1E,KAAK,IAAI6G,mBAAmB,CAAC7G,KAAK,EAAEyD,EAAE,EAAE2C,KAAK,CAAC;IACnDzB,IAAI,EAAEvE,CAAC,IAAI0G,iBAAiB,CAAC1G,CAAC,EAAEqD,EAAE,EAAE2C,KAAK;EAC3C,CAAC;EACD,OAAO9B,IAAI,CAACa,IAAI,CAACA,IAAI,CAAC,CAACC,KAAK,CAACA,KAAK,CAAC;AACrC;AAEA,SAAS4B,OAAOA,CAAEC,KAAK,EAAEC,OAAO,EAAE;EAChC,IAAI5D,CAAC,GAAG,CAAC;IACPQ,CAAC;EACH,SAASqD,SAASA,CAACpD,CAAC,EAAE;IACpB,MAAMD,CAAC,GAAG,EAAE;IACZ,IAAI+B,GAAG,GAAG,CAAC;MACTzD,CAAC;IACH,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,CAAC,EAAE,EAAElB,CAAC,EAAE;MACtByD,GAAG,IAAI/B,CAAC,CAAC1B,CAAC,CAAC,GAAG2B,CAAC,CAAC3B,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC2B,CAAC,CAAC3B,CAAC,CAAC;IACxC;IACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,CAAC,EAAE,EAAElB,CAAC,EAAE;MACtB0B,CAAC,CAAC1B,CAAC,CAAC,IAAIyD,GAAG;IACb;IACA,OAAO/B,CAAC;EACV;EACA,MAAMQ,IAAI,GAAG;IACX4C,OAAOA,CAACxG,CAAC,EAAE;MACT,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpBgD,CAAC,GAAGqD,SAAS,CAACD,OAAO,GAAGxG,CAAC,IAAI,EAAE,CAAC;QAChC,OAAO4D,IAAI;MACb;MACA,OAAO4C,OAAO;IAChB,CAAC;IACDE,aAAaA,CAAC1G,CAAC,EAAE;MACf,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpB,IAAIJ,CAAC,EAAE;UACL4C,CAAC,GAAG5C,CAAC,CAACI,MAAM;UACZmG,KAAK,GAAGvG,CAAC;QACX,CAAC,MAAM;UACL4C,CAAC,GAAG,CAAC;UACL2D,KAAK,GAAG,EAAE;QACZ;QACA,OAAO3C,IAAI,CAAC4C,OAAO,CAACA,OAAO,CAAC;MAC9B;MACA,OAAOD,KAAK;IACd,CAAC;IACDzC,MAAMA,CAAA,EAAG;MACP,MAAMtB,CAAC,GAAGF,MAAM,CAAC,CAAC;MAClB,IAAIjC,CAAC,GAAGkG,KAAK,CAAC3D,CAAC,GAAG,CAAC,CAAC;QAClBpC,CAAC,GAAG4C,CAAC,CAAC,CAAC,CAAC;QACR1B,CAAC,GAAG,CAAC;;MAEP;MACA,OAAOA,CAAC,GAAGkB,CAAC,GAAG,CAAC,EAAEpC,CAAC,IAAI4C,CAAC,CAAC,EAAE1B,CAAC,CAAC,EAAE;QAC7B,IAAIc,CAAC,GAAGhC,CAAC,EAAE;UACTH,CAAC,GAAGkG,KAAK,CAAC7E,CAAC,CAAC;UACZ;QACF;MACF;MACA;MACA,OAAOrB,CAAC,CAACyD,MAAM,CAAC,CAAC;IACnB,CAAC;IACDC,GAAGA,CAACV,CAAC,EAAE;MACL,IAAI3D,CAAC,GAAG,CAAC;QACPgC,CAAC,GAAG,CAAC;MACP,OAAOA,CAAC,GAAGkB,CAAC,EAAE,EAAElB,CAAC,EAAE;QACjBhC,CAAC,IAAI0D,CAAC,CAAC1B,CAAC,CAAC,GAAG6E,KAAK,CAAC7E,CAAC,CAAC,CAACqC,GAAG,CAACV,CAAC,CAAC;MAC7B;MACA,OAAO3D,CAAC;IACV,CAAC;IACDsE,GAAGA,CAACX,CAAC,EAAE;MACL,IAAI3D,CAAC,GAAG,CAAC;QACPgC,CAAC,GAAG,CAAC;MACP,OAAOA,CAAC,GAAGkB,CAAC,EAAE,EAAElB,CAAC,EAAE;QACjBhC,CAAC,IAAI0D,CAAC,CAAC1B,CAAC,CAAC,GAAG6E,KAAK,CAAC7E,CAAC,CAAC,CAACsC,GAAG,CAACX,CAAC,CAAC;MAC7B;MACA,OAAO3D,CAAC;IACV,CAAC;IACDuE,IAAIA,CAAA,EAAG;MACL,MAAM+B,KAAK,CAAC,6BAA6B,CAAC;IAC5C;EACF,CAAC;EACD,OAAOpC,IAAI,CAAC8C,aAAa,CAACH,KAAK,CAAC,CAACC,OAAO,CAACA,OAAO,CAAC;AACnD;AAEA,SAASG,aAAaA,CAACjG,GAAG,EAAEY,GAAG,EAAE;EAC/B,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG,IAAI,IAAI,GAAG,CAAC,GAAGA,GAAG;IAC3BA,GAAG,GAAG,CAAC;EACT;EACA,OAAOA,GAAG,GAAG,CAACY,GAAG,GAAGZ,GAAG,IAAI4B,MAAM,CAAC,CAAC;AACrC;AACA,SAASsE,cAAcA,CAACtH,KAAK,EAAEoB,GAAG,EAAEY,GAAG,EAAE;EACvC,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG,IAAI,IAAI,GAAG,CAAC,GAAGA,GAAG;IAC3BA,GAAG,GAAG,CAAC;EACT;EACA,OAAOpB,KAAK,IAAIoB,GAAG,IAAIpB,KAAK,IAAIgC,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGZ,GAAG,CAAC,GAAG,CAAC;AAC3D;AACA,SAASmG,iBAAiBA,CAACvH,KAAK,EAAEoB,GAAG,EAAEY,GAAG,EAAE;EAC1C,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG,IAAI,IAAI,GAAG,CAAC,GAAGA,GAAG;IAC3BA,GAAG,GAAG,CAAC;EACT;EACA,OAAOpB,KAAK,GAAGoB,GAAG,GAAG,CAAC,GAAGpB,KAAK,GAAGgC,GAAG,GAAG,CAAC,GAAG,CAAChC,KAAK,GAAGoB,GAAG,KAAKY,GAAG,GAAGZ,GAAG,CAAC;AACxE;AACA,SAASoG,eAAeA,CAACpH,CAAC,EAAEgB,GAAG,EAAEY,GAAG,EAAE;EACpC,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG,IAAI,IAAI,GAAG,CAAC,GAAGA,GAAG;IAC3BA,GAAG,GAAG,CAAC;EACT;EACA,OAAOhB,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,CAAC,GAAGgB,GAAG,GAAGhB,CAAC,IAAI4B,GAAG,GAAGZ,GAAG,CAAC,GAAGwD,GAAG;AACvD;AACA,SAAS6C,OAAOA,CAAErG,GAAG,EAAEY,GAAG,EAAE;EAC1B,IAAIuB,CAAC,EAAEM,CAAC;EACR,MAAMS,IAAI,GAAG;IACXlD,GAAGA,CAACV,CAAC,EAAE;MACL,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpByC,CAAC,GAAG7C,CAAC,IAAI,CAAC;QACV,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAOf,CAAC;MACV;IACF,CAAC;IACDvB,GAAGA,CAACtB,CAAC,EAAE;MACL,IAAI6D,SAAS,CAACzD,MAAM,EAAE;QACpB+C,CAAC,GAAGnD,CAAC,IAAI,IAAI,GAAG,CAAC,GAAGA,CAAC;QACrB,OAAO4D,IAAI;MACb,CAAC,MAAM;QACL,OAAOT,CAAC;MACV;IACF,CAAC;IACDW,MAAM,EAAEA,CAAA,KAAM6C,aAAa,CAAC9D,CAAC,EAAEM,CAAC,CAAC;IACjCY,GAAG,EAAEzE,KAAK,IAAIsH,cAAc,CAACtH,KAAK,EAAEuD,CAAC,EAAEM,CAAC,CAAC;IACzCa,GAAG,EAAE1E,KAAK,IAAIuH,iBAAiB,CAACvH,KAAK,EAAEuD,CAAC,EAAEM,CAAC,CAAC;IAC5Cc,IAAI,EAAEvE,CAAC,IAAIoH,eAAe,CAACpH,CAAC,EAAEmD,CAAC,EAAEM,CAAC;EACpC,CAAC;EACD,IAAI7B,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGZ,GAAG,IAAI,IAAI,GAAG,CAAC,GAAGA,GAAG;IAC3BA,GAAG,GAAG,CAAC;EACT;EACA,OAAOkD,IAAI,CAAClD,GAAG,CAACA,GAAG,CAAC,CAACY,GAAG,CAACA,GAAG,CAAC;AAC/B;AAEA,SAAS0F,QAAQA,CAAEjB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EAC7B,IAAIF,IAAI,GAAG,CAAC;IACVtE,CAAC,GAAG,CAAC;EACP,KAAK,MAAME,CAAC,IAAI0F,IAAI,EAAE;IACpB,MAAMkB,GAAG,GAAGtC,CAAC,CAACtE,CAAC,CAAC;IAChB,IAAIgD,CAAC,CAAChD,CAAC,CAAC,IAAI,IAAI,IAAI4G,GAAG,IAAI,IAAI,IAAIC,KAAK,CAACD,GAAG,CAAC,EAAE;IAC/CxC,IAAI,IAAI,CAACwC,GAAG,GAAGxC,IAAI,IAAI,EAAEtE,CAAC;EAC5B;EACA,OAAO;IACLgH,IAAI,EAAE,CAAC1C,IAAI,CAAC;IACZ2C,OAAO,EAAEA,CAAA,KAAM3C,IAAI;IACnB4C,QAAQ,EAAE;EACZ,CAAC;AACH;;AAEA;AACA,SAASC,GAAGA,CAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAE;EAC9B,MAAMC,KAAK,GAAGD,GAAG,GAAGH,EAAE,GAAGA,EAAE;IACzBK,KAAK,GAAGnH,IAAI,CAACE,GAAG,CAACgH,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAACF,GAAG,GAAGF,EAAE,GAAGC,EAAE,IAAIG,KAAK;IAC7DE,SAAS,GAAGL,EAAE,GAAGI,KAAK,GAAGL,EAAE;EAC7B,OAAO,CAACM,SAAS,EAAED,KAAK,CAAC;AAC3B;AAEA,SAASE,MAAMA,CAAC/B,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE7E,IAAI,EAAE;EAChCiG,IAAI,GAAGA,IAAI,CAACgC,MAAM,CAAC1H,CAAC,IAAI;IACtB,IAAI2H,CAAC,GAAG3E,CAAC,CAAChD,CAAC,CAAC;MACVG,CAAC,GAAGmE,CAAC,CAACtE,CAAC,CAAC;IACV,OAAO2H,CAAC,IAAI,IAAI,IAAI,CAACA,CAAC,GAAG,CAACA,CAAC,KAAKA,CAAC,IAAIxH,CAAC,IAAI,IAAI,IAAI,CAACA,CAAC,GAAG,CAACA,CAAC,KAAKA,CAAC;EACjE,CAAC,CAAC;EACF,IAAIV,IAAI,EAAE;IACRiG,IAAI,CAACjG,IAAI,CAAC,CAAC+C,CAAC,EAAEM,CAAC,KAAKE,CAAC,CAACR,CAAC,CAAC,GAAGQ,CAAC,CAACF,CAAC,CAAC,CAAC;EAClC;EACA,MAAMhD,CAAC,GAAG4F,IAAI,CAAC3F,MAAM;IACnB6H,CAAC,GAAG,IAAIrI,YAAY,CAACO,CAAC,CAAC;IACvB+H,CAAC,GAAG,IAAItI,YAAY,CAACO,CAAC,CAAC;;EAEzB;EACA,IAAIuB,CAAC,GAAG,CAAC;IACPyG,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACNC,EAAE;IACFC,EAAE;IACFjI,CAAC;EACH,KAAKA,CAAC,IAAI0F,IAAI,EAAE;IACdkC,CAAC,CAACvG,CAAC,CAAC,GAAG2G,EAAE,GAAG,CAAChF,CAAC,CAAChD,CAAC,CAAC;IACjB6H,CAAC,CAACxG,CAAC,CAAC,GAAG4G,EAAE,GAAG,CAAC3D,CAAC,CAACtE,CAAC,CAAC;IACjB,EAAEqB,CAAC;IACHyG,EAAE,IAAI,CAACE,EAAE,GAAGF,EAAE,IAAIzG,CAAC;IACnB0G,EAAE,IAAI,CAACE,EAAE,GAAGF,EAAE,IAAI1G,CAAC;EACrB;;EAEA;EACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;IACtBuG,CAAC,CAACvG,CAAC,CAAC,IAAIyG,EAAE;IACVD,CAAC,CAACxG,CAAC,CAAC,IAAI0G,EAAE;EACZ;EACA,OAAO,CAACH,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,CAAC;AACvB;AACA,SAASG,WAAWA,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE6D,QAAQ,EAAE;EACzC,IAAI9G,CAAC,GAAG,CAAC,CAAC;IACRsG,CAAC;IACDxH,CAAC;EACH,KAAK,MAAMH,CAAC,IAAI0F,IAAI,EAAE;IACpBiC,CAAC,GAAG3E,CAAC,CAAChD,CAAC,CAAC;IACRG,CAAC,GAAGmE,CAAC,CAACtE,CAAC,CAAC;IACR,IAAI2H,CAAC,IAAI,IAAI,IAAI,CAACA,CAAC,GAAG,CAACA,CAAC,KAAKA,CAAC,IAAIxH,CAAC,IAAI,IAAI,IAAI,CAACA,CAAC,GAAG,CAACA,CAAC,KAAKA,CAAC,EAAE;MAC5DgI,QAAQ,CAACR,CAAC,EAAExH,CAAC,EAAE,EAAEkB,CAAC,CAAC;IACrB;EACF;AACF;;AAEA;AACA;AACA,SAAS2F,QAAQA,CAAEtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE6C,EAAE,EAAEJ,OAAO,EAAE;EAC1C,IAAIqB,GAAG,GAAG,CAAC;IACTC,GAAG,GAAG,CAAC;EACTH,WAAW,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,CAACgE,EAAE,EAAEC,EAAE,KAAK;IAClC,MAAMC,GAAG,GAAGD,EAAE,GAAGxB,OAAO,CAACuB,EAAE,CAAC;MAC1BG,GAAG,GAAGF,EAAE,GAAGpB,EAAE;IACfiB,GAAG,IAAII,GAAG,GAAGA,GAAG;IAChBH,GAAG,IAAII,GAAG,GAAGA,GAAG;EAClB,CAAC,CAAC;EACF,OAAO,CAAC,GAAGL,GAAG,GAAGC,GAAG;AACtB;;AAEA;AACA;AACA,SAASK,MAAMA,CAAEhD,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EAC3B,IAAIsD,CAAC,GAAG,CAAC;IACPC,CAAC,GAAG,CAAC;IACLc,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACN9I,CAAC,GAAG,CAAC;EACPoI,WAAW,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,CAACgE,EAAE,EAAEC,EAAE,KAAK;IAClC,EAAEzI,CAAC;IACH8H,CAAC,IAAI,CAACU,EAAE,GAAGV,CAAC,IAAI9H,CAAC;IACjB+H,CAAC,IAAI,CAACU,EAAE,GAAGV,CAAC,IAAI/H,CAAC;IACjB6I,EAAE,IAAI,CAACL,EAAE,GAAGC,EAAE,GAAGI,EAAE,IAAI7I,CAAC;IACxB8I,EAAE,IAAI,CAACN,EAAE,GAAGA,EAAE,GAAGM,EAAE,IAAI9I,CAAC;EAC1B,CAAC,CAAC;EACF,MAAMgH,IAAI,GAAGG,GAAG,CAACW,CAAC,EAAEC,CAAC,EAAEc,EAAE,EAAEC,EAAE,CAAC;IAC5B7B,OAAO,GAAG/D,CAAC,IAAI8D,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG9D,CAAC;EACtC,OAAO;IACL8D,IAAI,EAAEA,IAAI;IACVC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEuD,CAAC,EAAEd,OAAO;EAC3C,CAAC;AACH;;AAEA;AACA;AACA,SAASlG,GAAGA,CAAE6E,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EACxB,IAAIsD,CAAC,GAAG,CAAC;IACPC,CAAC,GAAG,CAAC;IACLc,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACN9I,CAAC,GAAG,CAAC;EACPoI,WAAW,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,CAACgE,EAAE,EAAEC,EAAE,KAAK;IAClC,EAAEzI,CAAC;IACHwI,EAAE,GAAGlI,IAAI,CAACS,GAAG,CAACyH,EAAE,CAAC;IACjBV,CAAC,IAAI,CAACU,EAAE,GAAGV,CAAC,IAAI9H,CAAC;IACjB+H,CAAC,IAAI,CAACU,EAAE,GAAGV,CAAC,IAAI/H,CAAC;IACjB6I,EAAE,IAAI,CAACL,EAAE,GAAGC,EAAE,GAAGI,EAAE,IAAI7I,CAAC;IACxB8I,EAAE,IAAI,CAACN,EAAE,GAAGA,EAAE,GAAGM,EAAE,IAAI9I,CAAC;EAC1B,CAAC,CAAC;EACF,MAAMgH,IAAI,GAAGG,GAAG,CAACW,CAAC,EAAEC,CAAC,EAAEc,EAAE,EAAEC,EAAE,CAAC;IAC5B7B,OAAO,GAAG/D,CAAC,IAAI8D,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG1G,IAAI,CAACS,GAAG,CAACmC,CAAC,CAAC;EAChD,OAAO;IACL8D,IAAI,EAAEA,IAAI;IACVC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEuD,CAAC,EAAEd,OAAO;EAC3C,CAAC;AACH;AAEA,SAASrC,GAAGA,CAAEgB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EACxB;EACA,MAAM,CAAC0D,EAAE,EAAEC,EAAE,EAAEH,EAAE,EAAEC,EAAE,CAAC,GAAGN,MAAM,CAAC/B,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;EAC3C,IAAIuE,EAAE,GAAG,CAAC;IACRF,EAAE,GAAG,CAAC;IACNG,GAAG,GAAG,CAAC;IACPC,GAAG,GAAG,CAAC;IACPjJ,CAAC,GAAG,CAAC;IACLwI,EAAE;IACFU,EAAE;IACFC,EAAE;EACJf,WAAW,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,CAAC3E,CAAC,EAAE4I,EAAE,KAAK;IACjCD,EAAE,GAAGN,EAAE,CAAClI,CAAC,EAAE,CAAC;IACZkJ,EAAE,GAAG5I,IAAI,CAACS,GAAG,CAAC0H,EAAE,CAAC;IACjBU,EAAE,GAAGX,EAAE,GAAGC,EAAE;IACZM,EAAE,IAAI,CAACN,EAAE,GAAGS,EAAE,GAAGH,EAAE,IAAI/I,CAAC;IACxB6I,EAAE,IAAI,CAACM,EAAE,GAAGN,EAAE,IAAI7I,CAAC;IACnBgJ,GAAG,IAAI,CAACG,EAAE,GAAGD,EAAE,GAAGF,GAAG,IAAIhJ,CAAC;IAC1BiJ,GAAG,IAAI,CAACT,EAAE,GAAGW,EAAE,GAAGF,GAAG,IAAIjJ,CAAC;EAC5B,CAAC,CAAC;EACF,MAAM,CAACoJ,EAAE,EAAEC,EAAE,CAAC,GAAGlC,GAAG,CAAC0B,EAAE,GAAGZ,EAAE,EAAEc,EAAE,GAAGd,EAAE,EAAEe,GAAG,GAAGf,EAAE,EAAEgB,GAAG,GAAGhB,EAAE,CAAC;IACxDhB,OAAO,GAAG/D,CAAC,IAAI5C,IAAI,CAACsE,GAAG,CAACwE,EAAE,GAAGC,EAAE,IAAInG,CAAC,GAAG8E,EAAE,CAAC,CAAC;EAC7C,OAAO;IACLhB,IAAI,EAAE,CAAC1G,IAAI,CAACsE,GAAG,CAACwE,EAAE,GAAGC,EAAE,GAAGrB,EAAE,CAAC,EAAEqB,EAAE,CAAC;IAClCpC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEyD,EAAE,EAAEhB,OAAO;EAC5C,CAAC;AACH;;AAEA;AACA;AACA,SAASxG,GAAGA,CAAEmF,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EACxB,IAAIsD,CAAC,GAAG,CAAC;IACPC,CAAC,GAAG,CAAC;IACLc,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACNQ,EAAE,GAAG,CAAC;IACNtJ,CAAC,GAAG,CAAC;EACPoI,WAAW,CAACxC,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,CAACgE,EAAE,EAAEC,EAAE,KAAK;IAClC,MAAMc,EAAE,GAAGjJ,IAAI,CAACS,GAAG,CAACyH,EAAE,CAAC;MACrBU,EAAE,GAAG5I,IAAI,CAACS,GAAG,CAAC0H,EAAE,CAAC;IACnB,EAAEzI,CAAC;IACH8H,CAAC,IAAI,CAACyB,EAAE,GAAGzB,CAAC,IAAI9H,CAAC;IACjB+H,CAAC,IAAI,CAACmB,EAAE,GAAGnB,CAAC,IAAI/H,CAAC;IACjB6I,EAAE,IAAI,CAACU,EAAE,GAAGL,EAAE,GAAGL,EAAE,IAAI7I,CAAC;IACxB8I,EAAE,IAAI,CAACS,EAAE,GAAGA,EAAE,GAAGT,EAAE,IAAI9I,CAAC;IACxBsJ,EAAE,IAAI,CAACb,EAAE,GAAGa,EAAE,IAAItJ,CAAC;EACrB,CAAC,CAAC;EACF,MAAMgH,IAAI,GAAGG,GAAG,CAACW,CAAC,EAAEC,CAAC,EAAEc,EAAE,EAAEC,EAAE,CAAC;IAC5B7B,OAAO,GAAG/D,CAAC,IAAI8D,IAAI,CAAC,CAAC,CAAC,GAAG1G,IAAI,CAACG,GAAG,CAACyC,CAAC,EAAE8D,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/CA,IAAI,CAAC,CAAC,CAAC,GAAG1G,IAAI,CAACsE,GAAG,CAACoC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3B,OAAO;IACLA,IAAI,EAAEA,IAAI;IACVC,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE8E,EAAE,EAAErC,OAAO;EAC5C,CAAC;AACH;AAEA,SAASuC,IAAIA,CAAE5D,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE;EACzB,MAAM,CAAC0D,EAAE,EAAEC,EAAE,EAAEH,EAAE,EAAEC,EAAE,CAAC,GAAGN,MAAM,CAAC/B,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;IACzCxE,CAAC,GAAGkI,EAAE,CAACjI,MAAM;EACf,IAAI6I,EAAE,GAAG,CAAC;IACRW,EAAE,GAAG,CAAC;IACNC,EAAE,GAAG,CAAC;IACNb,EAAE,GAAG,CAAC;IACNI,GAAG,GAAG,CAAC;IACP1H,CAAC;IACDiH,EAAE;IACFC,EAAE;IACFkB,EAAE;EACJ,KAAKpI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,GAAG;IAClBwI,EAAE,GAAGN,EAAE,CAAC3G,CAAC,CAAC;IACVkH,EAAE,GAAGN,EAAE,CAAC5G,CAAC,EAAE,CAAC;IACZoI,EAAE,GAAGnB,EAAE,GAAGA,EAAE;IACZM,EAAE,IAAI,CAACa,EAAE,GAAGb,EAAE,IAAIvH,CAAC;IACnBkI,EAAE,IAAI,CAACE,EAAE,GAAGnB,EAAE,GAAGiB,EAAE,IAAIlI,CAAC;IACxBmI,EAAE,IAAI,CAACC,EAAE,GAAGA,EAAE,GAAGD,EAAE,IAAInI,CAAC;IACxBsH,EAAE,IAAI,CAACL,EAAE,GAAGC,EAAE,GAAGI,EAAE,IAAItH,CAAC;IACxB0H,GAAG,IAAI,CAACU,EAAE,GAAGlB,EAAE,GAAGQ,GAAG,IAAI1H,CAAC;EAC5B;EACA,MAAMqI,IAAI,GAAGF,EAAE,GAAGZ,EAAE,GAAGA,EAAE;IACvB5I,CAAC,GAAG4I,EAAE,GAAGc,IAAI,GAAGH,EAAE,GAAGA,EAAE;IACvB/G,CAAC,GAAG,CAACuG,GAAG,GAAGH,EAAE,GAAGD,EAAE,GAAGY,EAAE,IAAIvJ,CAAC;IAC5B8C,CAAC,GAAG,CAAC6F,EAAE,GAAGe,IAAI,GAAGX,GAAG,GAAGQ,EAAE,IAAIvJ,CAAC;IAC9BmD,CAAC,GAAG,CAACX,CAAC,GAAGoG,EAAE;IACX7B,OAAO,GAAG/D,CAAC,IAAI;MACbA,CAAC,GAAGA,CAAC,GAAG8E,EAAE;MACV,OAAOtF,CAAC,GAAGQ,CAAC,GAAGA,CAAC,GAAGF,CAAC,GAAGE,CAAC,GAAGG,CAAC,GAAG4E,EAAE;IACnC,CAAC;;EAEH;EACA,OAAO;IACLjB,IAAI,EAAE,CAAC3D,CAAC,GAAGL,CAAC,GAAGgF,EAAE,GAAGtF,CAAC,GAAGsF,EAAE,GAAGA,EAAE,GAAGC,EAAE,EAAEjF,CAAC,GAAG,CAAC,GAAGN,CAAC,GAAGsF,EAAE,EAAEtF,CAAC,CAAC;IACxDuE,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEyD,EAAE,EAAEhB,OAAO;EAC5C,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS4C,IAAIA,CAAEjE,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEsF,KAAK,EAAE;EAChC;EACA,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAOjD,QAAQ,CAACjB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;EAC5C,IAAIsF,KAAK,KAAK,CAAC,EAAE,OAAOlB,MAAM,CAAChD,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;EAC1C,IAAIsF,KAAK,KAAK,CAAC,EAAE,OAAON,IAAI,CAAC5D,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;EACxC,MAAM,CAAC0D,EAAE,EAAEC,EAAE,EAAEH,EAAE,EAAEC,EAAE,CAAC,GAAGN,MAAM,CAAC/B,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,CAAC;IACzCxE,CAAC,GAAGkI,EAAE,CAACjI,MAAM;IACb8J,GAAG,GAAG,EAAE;IACRC,GAAG,GAAG,EAAE;IACRC,CAAC,GAAGH,KAAK,GAAG,CAAC;EACf,IAAIvI,CAAC,EAAEoB,CAAC,EAAEuH,CAAC,EAAE7J,CAAC,EAAEgD,CAAC;EACjB,KAAK9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0I,CAAC,EAAE,EAAE1I,CAAC,EAAE;IACtB,KAAK2I,CAAC,GAAG,CAAC,EAAE7J,CAAC,GAAG,CAAC,EAAE6J,CAAC,GAAGlK,CAAC,EAAE,EAAEkK,CAAC,EAAE;MAC7B7J,CAAC,IAAIC,IAAI,CAACG,GAAG,CAACyH,EAAE,CAACgC,CAAC,CAAC,EAAE3I,CAAC,CAAC,GAAG4G,EAAE,CAAC+B,CAAC,CAAC;IACjC;IACAH,GAAG,CAACI,IAAI,CAAC9J,CAAC,CAAC;IACXgD,CAAC,GAAG,IAAI5D,YAAY,CAACwK,CAAC,CAAC;IACvB,KAAKtH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsH,CAAC,EAAE,EAAEtH,CAAC,EAAE;MACtB,KAAKuH,CAAC,GAAG,CAAC,EAAE7J,CAAC,GAAG,CAAC,EAAE6J,CAAC,GAAGlK,CAAC,EAAE,EAAEkK,CAAC,EAAE;QAC7B7J,CAAC,IAAIC,IAAI,CAACG,GAAG,CAACyH,EAAE,CAACgC,CAAC,CAAC,EAAE3I,CAAC,GAAGoB,CAAC,CAAC;MAC7B;MACAU,CAAC,CAACV,CAAC,CAAC,GAAGtC,CAAC;IACV;IACA2J,GAAG,CAACG,IAAI,CAAC9G,CAAC,CAAC;EACb;EACA2G,GAAG,CAACG,IAAI,CAACJ,GAAG,CAAC;EACb,MAAM/C,IAAI,GAAGoD,mBAAmB,CAACJ,GAAG,CAAC;IACnC/C,OAAO,GAAG/D,CAAC,IAAI;MACbA,CAAC,IAAI8E,EAAE;MACP,IAAIxD,CAAC,GAAGyD,EAAE,GAAGjB,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG9D,CAAC,GAAG8D,IAAI,CAAC,CAAC,CAAC,GAAG9D,CAAC,GAAGA,CAAC;MACpD,KAAK3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0I,CAAC,EAAE,EAAE1I,CAAC,EAAEiD,CAAC,IAAIwC,IAAI,CAACzF,CAAC,CAAC,GAAGjB,IAAI,CAACG,GAAG,CAACyC,CAAC,EAAE3B,CAAC,CAAC;MACrD,OAAOiD,CAAC;IACV,CAAC;EACH,OAAO;IACLwC,IAAI,EAAEqD,QAAQ,CAACJ,CAAC,EAAEjD,IAAI,EAAE,CAACgB,EAAE,EAAEC,EAAE,CAAC;IAChChB,OAAO,EAAEA,OAAO;IAChBC,QAAQ,EAAEA,QAAQ,CAACtB,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEyD,EAAE,EAAEhB,OAAO;EAC5C,CAAC;AACH;AACA,SAASoD,QAAQA,CAACJ,CAAC,EAAEvH,CAAC,EAAEQ,CAAC,EAAEsB,CAAC,EAAE;EAC5B,MAAMG,CAAC,GAAG9B,KAAK,CAACoH,CAAC,CAAC;EAClB,IAAI1I,CAAC,EAAEoB,CAAC,EAAEtC,CAAC,EAAEgD,CAAC;;EAEd;EACA,KAAK9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0I,CAAC,EAAE,EAAE1I,CAAC,EAAEoD,CAAC,CAACpD,CAAC,CAAC,GAAG,CAAC;;EAEhC;EACA,KAAKA,CAAC,GAAG0I,CAAC,GAAG,CAAC,EAAE1I,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC3BlB,CAAC,GAAGqC,CAAC,CAACnB,CAAC,CAAC;IACR8B,CAAC,GAAG,CAAC;IACLsB,CAAC,CAACpD,CAAC,CAAC,IAAIlB,CAAC;IACT,KAAKsC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIpB,CAAC,EAAE,EAAEoB,CAAC,EAAE;MACvBU,CAAC,IAAI,CAAC9B,CAAC,GAAG,CAAC,GAAGoB,CAAC,IAAIA,CAAC,CAAC,CAAC;MACtBgC,CAAC,CAACpD,CAAC,GAAGoB,CAAC,CAAC,IAAItC,CAAC,GAAGC,IAAI,CAACG,GAAG,CAACyC,CAAC,EAAEP,CAAC,CAAC,GAAGU,CAAC;IACpC;EACF;;EAEA;EACAsB,CAAC,CAAC,CAAC,CAAC,IAAIH,CAAC;EACT,OAAOG,CAAC;AACV;;AAEA;AACA;AACA,SAASyF,mBAAmBA,CAACE,MAAM,EAAE;EACnC,MAAMtK,CAAC,GAAGsK,MAAM,CAACrK,MAAM,GAAG,CAAC;IACzB+G,IAAI,GAAG,EAAE;EACX,IAAIzF,CAAC,EAAEoB,CAAC,EAAEsH,CAAC,EAAE5H,CAAC,EAAEkI,CAAC;EACjB,KAAKhJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;IACtBc,CAAC,GAAGd,CAAC,CAAC,CAAC;IACP,KAAKoB,CAAC,GAAGpB,CAAC,GAAG,CAAC,EAAEoB,CAAC,GAAG3C,CAAC,EAAE,EAAE2C,CAAC,EAAE;MAC1B,IAAIrC,IAAI,CAACE,GAAG,CAAC8J,MAAM,CAAC/I,CAAC,CAAC,CAACoB,CAAC,CAAC,CAAC,GAAGrC,IAAI,CAACE,GAAG,CAAC8J,MAAM,CAAC/I,CAAC,CAAC,CAACc,CAAC,CAAC,CAAC,EAAE;QACnDA,CAAC,GAAGM,CAAC;MACP;IACF;IACA,KAAKsH,CAAC,GAAG1I,CAAC,EAAE0I,CAAC,GAAGjK,CAAC,GAAG,CAAC,EAAE,EAAEiK,CAAC,EAAE;MAC1BM,CAAC,GAAGD,MAAM,CAACL,CAAC,CAAC,CAAC1I,CAAC,CAAC;MAChB+I,MAAM,CAACL,CAAC,CAAC,CAAC1I,CAAC,CAAC,GAAG+I,MAAM,CAACL,CAAC,CAAC,CAAC5H,CAAC,CAAC;MAC3BiI,MAAM,CAACL,CAAC,CAAC,CAAC5H,CAAC,CAAC,GAAGkI,CAAC;IAClB;IACA,KAAK5H,CAAC,GAAGpB,CAAC,GAAG,CAAC,EAAEoB,CAAC,GAAG3C,CAAC,EAAE,EAAE2C,CAAC,EAAE;MAC1B,KAAKsH,CAAC,GAAGjK,CAAC,EAAEiK,CAAC,IAAI1I,CAAC,EAAE0I,CAAC,EAAE,EAAE;QACvBK,MAAM,CAACL,CAAC,CAAC,CAACtH,CAAC,CAAC,IAAI2H,MAAM,CAACL,CAAC,CAAC,CAAC1I,CAAC,CAAC,GAAG+I,MAAM,CAAC/I,CAAC,CAAC,CAACoB,CAAC,CAAC,GAAG2H,MAAM,CAAC/I,CAAC,CAAC,CAACA,CAAC,CAAC;MAC5D;IACF;EACF;EACA,KAAKoB,CAAC,GAAG3C,CAAC,GAAG,CAAC,EAAE2C,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;IAC3B4H,CAAC,GAAG,CAAC;IACL,KAAKN,CAAC,GAAGtH,CAAC,GAAG,CAAC,EAAEsH,CAAC,GAAGjK,CAAC,EAAE,EAAEiK,CAAC,EAAE;MAC1BM,CAAC,IAAID,MAAM,CAACL,CAAC,CAAC,CAACtH,CAAC,CAAC,GAAGqE,IAAI,CAACiD,CAAC,CAAC;IAC7B;IACAjD,IAAI,CAACrE,CAAC,CAAC,GAAG,CAAC2H,MAAM,CAACtK,CAAC,CAAC,CAAC2C,CAAC,CAAC,GAAG4H,CAAC,IAAID,MAAM,CAAC3H,CAAC,CAAC,CAACA,CAAC,CAAC;EAC7C;EACA,OAAOqE,IAAI;AACb;AAEA,MAAMwD,QAAQ,GAAG,CAAC;EAChBC,OAAO,GAAG,KAAK;;AAEjB;AACA;AACA;AACA,SAASC,KAAKA,CAAE9E,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAEkB,SAAS,EAAE;EACrC,MAAM,CAACwC,EAAE,EAAEC,EAAE,EAAEH,EAAE,EAAEC,EAAE,CAAC,GAAGN,MAAM,CAAC/B,IAAI,EAAE1C,CAAC,EAAEsB,CAAC,EAAE,IAAI,CAAC;IAC/CxE,CAAC,GAAGkI,EAAE,CAACjI,MAAM;IACb0K,EAAE,GAAGrK,IAAI,CAACa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEuE,SAAS,GAAG1F,CAAC,CAAC,CAAC;IACnC;IACA4K,IAAI,GAAG,IAAInL,YAAY,CAACO,CAAC,CAAC;IAC1B6K,SAAS,GAAG,IAAIpL,YAAY,CAACO,CAAC,CAAC;IAC/B8K,aAAa,GAAG,IAAIrL,YAAY,CAACO,CAAC,CAAC,CAAC+K,IAAI,CAAC,CAAC,CAAC;EAC7C,KAAK,IAAIC,IAAI,GAAG,CAAC,CAAC,EAAE,EAAEA,IAAI,IAAIR,QAAQ,GAAG;IACvC,MAAMS,QAAQ,GAAG,CAAC,CAAC,EAAEN,EAAE,GAAG,CAAC,CAAC;IAC5B,KAAK,IAAIpJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;MAC1B,MAAMiH,EAAE,GAAGN,EAAE,CAAC3G,CAAC,CAAC;QACd2J,EAAE,GAAGD,QAAQ,CAAC,CAAC,CAAC;QAChBE,EAAE,GAAGF,QAAQ,CAAC,CAAC,CAAC;QAChBG,IAAI,GAAG5C,EAAE,GAAGN,EAAE,CAACgD,EAAE,CAAC,GAAGhD,EAAE,CAACiD,EAAE,CAAC,GAAG3C,EAAE,GAAG0C,EAAE,GAAGC,EAAE;MAC5C,IAAIE,CAAC,GAAG,CAAC;QACPvD,CAAC,GAAG,CAAC;QACLC,CAAC,GAAG,CAAC;QACLc,EAAE,GAAG,CAAC;QACNC,EAAE,GAAG,CAAC;MACR,MAAMwC,KAAK,GAAG,CAAC,GAAGhL,IAAI,CAACE,GAAG,CAAC0H,EAAE,CAACkD,IAAI,CAAC,GAAG5C,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEhD,KAAK,IAAIyB,CAAC,GAAGiB,EAAE,EAAEjB,CAAC,IAAIkB,EAAE,EAAE,EAAElB,CAAC,EAAE;QAC7B,MAAMsB,EAAE,GAAGrD,EAAE,CAAC+B,CAAC,CAAC;UACduB,EAAE,GAAGrD,EAAE,CAAC8B,CAAC,CAAC;UACVhH,CAAC,GAAGwI,OAAO,CAACnL,IAAI,CAACE,GAAG,CAACgI,EAAE,GAAG+C,EAAE,CAAC,GAAGD,KAAK,CAAC,GAAGR,aAAa,CAACb,CAAC,CAAC;UACzDyB,GAAG,GAAGH,EAAE,GAAGtI,CAAC;QACdoI,CAAC,IAAIpI,CAAC;QACN6E,CAAC,IAAI4D,GAAG;QACR3D,CAAC,IAAIyD,EAAE,GAAGvI,CAAC;QACX4F,EAAE,IAAI2C,EAAE,GAAGE,GAAG;QACd5C,EAAE,IAAIyC,EAAE,GAAGG,GAAG;MAChB;;MAEA;MACA,MAAM,CAAChJ,CAAC,EAAEM,CAAC,CAAC,GAAGmE,GAAG,CAACW,CAAC,GAAGuD,CAAC,EAAEtD,CAAC,GAAGsD,CAAC,EAAExC,EAAE,GAAGwC,CAAC,EAAEvC,EAAE,GAAGuC,CAAC,CAAC;MAChDT,IAAI,CAACrJ,CAAC,CAAC,GAAGmB,CAAC,GAAGM,CAAC,GAAGwF,EAAE;MACpBqC,SAAS,CAACtJ,CAAC,CAAC,GAAGjB,IAAI,CAACE,GAAG,CAAC2H,EAAE,CAAC5G,CAAC,CAAC,GAAGqJ,IAAI,CAACrJ,CAAC,CAAC,CAAC;MACxCoK,cAAc,CAACzD,EAAE,EAAE3G,CAAC,GAAG,CAAC,EAAE0J,QAAQ,CAAC;IACrC;IACA,IAAID,IAAI,KAAKR,QAAQ,EAAE;MACrB;IACF;IACA,MAAMoB,cAAc,GAAG7M,MAAM,CAAC8L,SAAS,CAAC;IACxC,IAAIvK,IAAI,CAACE,GAAG,CAACoL,cAAc,CAAC,GAAGnB,OAAO,EAAE;IACxC,KAAK,IAAIlJ,CAAC,GAAG,CAAC,EAAEsK,GAAG,EAAE5I,CAAC,EAAE1B,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;MAClCsK,GAAG,GAAGhB,SAAS,CAACtJ,CAAC,CAAC,IAAI,CAAC,GAAGqK,cAAc,CAAC;MACzC;MACA;MACAd,aAAa,CAACvJ,CAAC,CAAC,GAAGsK,GAAG,IAAI,CAAC,GAAGpB,OAAO,GAAG,CAACxH,CAAC,GAAG,CAAC,GAAG4I,GAAG,GAAGA,GAAG,IAAI5I,CAAC;IACjE;EACF;EACA,OAAO6I,MAAM,CAAC5D,EAAE,EAAE0C,IAAI,EAAE5C,EAAE,EAAEC,EAAE,CAAC;AACjC;;AAEA;AACA,SAASwD,OAAOA,CAACvI,CAAC,EAAE;EAClB,OAAO,CAACA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAGA,CAAC,IAAIA,CAAC,GAAGA,CAAC;AACpC;;AAEA;AACA,SAASyI,cAAcA,CAACzD,EAAE,EAAE3G,CAAC,EAAE0J,QAAQ,EAAE;EACvC,MAAMnE,GAAG,GAAGoB,EAAE,CAAC3G,CAAC,CAAC;EACjB,IAAIwK,IAAI,GAAGd,QAAQ,CAAC,CAAC,CAAC;IACpBe,KAAK,GAAGf,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;EACzB,IAAIe,KAAK,IAAI9D,EAAE,CAACjI,MAAM,EAAE;;EAExB;EACA;EACA,OAAOsB,CAAC,GAAGwK,IAAI,IAAI7D,EAAE,CAAC8D,KAAK,CAAC,GAAGlF,GAAG,IAAIA,GAAG,GAAGoB,EAAE,CAAC6D,IAAI,CAAC,EAAE;IACpDd,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAEc,IAAI;IACpBd,QAAQ,CAAC,CAAC,CAAC,GAAGe,KAAK;IACnB,EAAEA,KAAK;EACT;AACF;;AAEA;AACA;AACA,SAASF,MAAMA,CAAC5D,EAAE,EAAE0C,IAAI,EAAE5C,EAAE,EAAEC,EAAE,EAAE;EAChC,MAAMjI,CAAC,GAAGkI,EAAE,CAACjI,MAAM;IACjBgM,GAAG,GAAG,EAAE;EACV,IAAI1K,CAAC,GAAG,CAAC;IACP2K,GAAG,GAAG,CAAC;IACPC,IAAI,GAAG,EAAE;IACT9L,CAAC;EACH,OAAOkB,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;IACjBlB,CAAC,GAAG6H,EAAE,CAAC3G,CAAC,CAAC,GAAGyG,EAAE;IACd,IAAImE,IAAI,CAAC,CAAC,CAAC,KAAK9L,CAAC,EAAE;MACjB;MACA8L,IAAI,CAAC,CAAC,CAAC,IAAI,CAACvB,IAAI,CAACrJ,CAAC,CAAC,GAAG4K,IAAI,CAAC,CAAC,CAAC,IAAI,EAAED,GAAG;IACxC,CAAC,MAAM;MACL;MACAA,GAAG,GAAG,CAAC;MACPC,IAAI,CAAC,CAAC,CAAC,IAAIlE,EAAE;MACbkE,IAAI,GAAG,CAAC9L,CAAC,EAAEuK,IAAI,CAACrJ,CAAC,CAAC,CAAC;MACnB0K,GAAG,CAAC9B,IAAI,CAACgC,IAAI,CAAC;IAChB;EACF;EACAA,IAAI,CAAC,CAAC,CAAC,IAAIlE,EAAE;EACb,OAAOgE,GAAG;AACZ;;AAEA;AACA,MAAMG,WAAW,GAAG,GAAG,GAAG9L,IAAI,CAAC4D,EAAE,GAAG,GAAG;;AAEvC;AACA,SAASmI,WAAWA,CAAE7M,CAAC,EAAE0B,MAAM,EAAEoL,QAAQ,EAAEC,QAAQ,EAAE;EACnDD,QAAQ,GAAGA,QAAQ,IAAI,EAAE;EACzBC,QAAQ,GAAGjM,IAAI,CAACa,GAAG,CAACmL,QAAQ,EAAEC,QAAQ,IAAI,GAAG,CAAC;EAC9C,MAAMC,KAAK,GAAGtJ,CAAC,IAAI,CAACA,CAAC,EAAE1D,CAAC,CAAC0D,CAAC,CAAC,CAAC;IAC1BuJ,IAAI,GAAGvL,MAAM,CAAC,CAAC,CAAC;IAChBwL,IAAI,GAAGxL,MAAM,CAAC,CAAC,CAAC;IAChBM,IAAI,GAAGkL,IAAI,GAAGD,IAAI;IAClBvK,IAAI,GAAGV,IAAI,GAAG+K,QAAQ;IACtBJ,IAAI,GAAG,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC;IACpBE,IAAI,GAAG,EAAE;EACX,IAAIL,QAAQ,KAAKC,QAAQ,EAAE;IACzB;IACA,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgL,QAAQ,EAAE,EAAEhL,CAAC,EAAE;MACjC4K,IAAI,CAAChC,IAAI,CAACqC,KAAK,CAACC,IAAI,GAAGlL,CAAC,GAAG+K,QAAQ,GAAG9K,IAAI,CAAC,CAAC;IAC9C;IACA2K,IAAI,CAAChC,IAAI,CAACqC,KAAK,CAACE,IAAI,CAAC,CAAC;IACtB,OAAOP,IAAI;EACb,CAAC,MAAM;IACL;IACA;IACAQ,IAAI,CAACxC,IAAI,CAACqC,KAAK,CAACE,IAAI,CAAC,CAAC;IACtB,KAAK,IAAInL,CAAC,GAAG+K,QAAQ,EAAE,EAAE/K,CAAC,GAAG,CAAC,GAAG;MAC/BoL,IAAI,CAACxC,IAAI,CAACqC,KAAK,CAACC,IAAI,GAAGlL,CAAC,GAAG+K,QAAQ,GAAG9K,IAAI,CAAC,CAAC;IAC9C;EACF;EACA,IAAIoL,EAAE,GAAGT,IAAI,CAAC,CAAC,CAAC;EAChB,IAAIU,EAAE,GAAGF,IAAI,CAACA,IAAI,CAAC1M,MAAM,GAAG,CAAC,CAAC;EAC9B,MAAM6M,EAAE,GAAG,CAAC,GAAGtL,IAAI;EACnB,MAAMuL,EAAE,GAAGC,MAAM,CAACJ,EAAE,CAAC,CAAC,CAAC,EAAED,IAAI,CAAC;EAC9B,OAAOE,EAAE,EAAE;IACT;IACA,MAAMI,EAAE,GAAGT,KAAK,CAAC,CAACI,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACrC,MAAMrE,EAAE,GAAGyE,EAAE,CAAC,CAAC,CAAC,GAAGL,EAAE,CAAC,CAAC,CAAC,IAAI1K,IAAI;IAChC,IAAIsG,EAAE,IAAI0E,UAAU,CAACN,EAAE,EAAEK,EAAE,EAAEJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGX,WAAW,EAAE;MACtD;MACA;MACA;MACAO,IAAI,CAACxC,IAAI,CAAC8C,EAAE,CAAC;IACf,CAAC,MAAM;MACL;MACA;MACAL,EAAE,GAAGC,EAAE;MACPV,IAAI,CAAChC,IAAI,CAAC0C,EAAE,CAAC;MACbF,IAAI,CAACQ,GAAG,CAAC,CAAC;IACZ;IACAN,EAAE,GAAGF,IAAI,CAACA,IAAI,CAAC1M,MAAM,GAAG,CAAC,CAAC;EAC5B;EACA,OAAOkM,IAAI;AACb;AACA,SAASa,MAAMA,CAACI,IAAI,EAAEzF,MAAM,EAAE;EAC5B,IAAI0F,IAAI,GAAGD,IAAI;EACf,IAAIE,IAAI,GAAGF,IAAI;EACf,MAAMpN,CAAC,GAAG2H,MAAM,CAAC1H,MAAM;EACvB,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,CAAC,EAAE,EAAEuB,CAAC,EAAE;IAC1B,MAAMiD,CAAC,GAAGmD,MAAM,CAACpG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,IAAIiD,CAAC,GAAG6I,IAAI,EAAEA,IAAI,GAAG7I,CAAC;IACtB,IAAIA,CAAC,GAAG8I,IAAI,EAAEA,IAAI,GAAG9I,CAAC;EACxB;EACA,OAAO,CAAC,IAAI8I,IAAI,GAAGD,IAAI,CAAC;AAC1B;AACA,SAASH,UAAUA,CAAC3N,CAAC,EAAEY,CAAC,EAAEkC,CAAC,EAAEyK,EAAE,EAAEC,EAAE,EAAE;EACnC,MAAMQ,EAAE,GAAGjN,IAAI,CAACkN,KAAK,CAACT,EAAE,IAAI1K,CAAC,CAAC,CAAC,CAAC,GAAG9C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEuN,EAAE,IAAIzK,CAAC,CAAC,CAAC,CAAC,GAAG9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3DkO,EAAE,GAAGnN,IAAI,CAACkN,KAAK,CAACT,EAAE,IAAI5M,CAAC,CAAC,CAAC,CAAC,GAAGZ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEuN,EAAE,IAAI3M,CAAC,CAAC,CAAC,CAAC,GAAGZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,OAAOe,IAAI,CAACE,GAAG,CAAC+M,EAAE,GAAGE,EAAE,CAAC;AAC1B;AAEA,SAAS1N,iBAAiB,IAAI2N,YAAY,EAAEhN,GAAG,EAAE4B,WAAW,EAAE0D,mBAAmB,EAAEnB,gBAAgB,EAAE6B,iBAAiB,EAAEX,gBAAgB,EAAErB,aAAa,EAAE+B,cAAc,EAAE3D,MAAM,EAAEmD,iBAAiB,EAAEhB,cAAc,EAAE0B,eAAe,EAAEtH,SAAS,EAAES,SAAS,EAAEqC,MAAM,EAAEqB,OAAO,IAAImK,aAAa,EAAEnI,GAAG,IAAIoI,SAAS,EAAEtK,GAAG,IAAIuK,SAAS,EAAE3H,SAAS,IAAI4H,eAAe,EAAE3H,OAAO,IAAI4H,aAAa,EAAEzI,QAAQ,IAAI0I,YAAY,EAAEpH,OAAO,IAAIqH,aAAa,EAAEpH,QAAQ,IAAIqH,kBAAkB,EAAEtJ,GAAG,IAAIuJ,aAAa,EAAEvF,MAAM,IAAIwF,gBAAgB,EAAE1D,KAAK,IAAI2D,eAAe,EAAEtN,GAAG,IAAIuN,aAAa,EAAEzE,IAAI,IAAI0E,cAAc,EAAE9N,GAAG,IAAI+N,aAAa,EAAEhF,IAAI,IAAIiF,cAAc,EAAEpC,WAAW,EAAEvG,eAAe,EAAEzB,YAAY,EAAEmC,aAAa,EAAEpE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}