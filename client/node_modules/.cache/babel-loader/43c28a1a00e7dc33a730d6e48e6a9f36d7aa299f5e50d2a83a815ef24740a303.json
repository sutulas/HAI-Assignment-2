{"ast":null,"code":"export { isAnyConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nexport { isFacetSpec } from './facet';\nexport { isLayerSpec } from './layer';\nexport { isRepeatSpec } from './repeat';\nexport { isUnitSpec } from './unit';","map":{"version":3,"names":["isAnyConcatSpec","isHConcatSpec","isVConcatSpec","isFacetSpec","isLayerSpec","isRepeatSpec","isUnitSpec"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\spec\\index.ts"],"sourcesContent":["/**\n * Definition for specifications in Vega-Lite. In general, there are 3 variants of specs for each type of specs:\n * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.\n * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.\n * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.\n */\nimport {Field, FieldName} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport {DataMixins} from './base';\nimport {GenericConcatSpec, GenericHConcatSpec, GenericVConcatSpec} from './concat';\nimport {GenericFacetSpec} from './facet';\nimport {GenericLayerSpec, LayerSpec, NormalizedLayerSpec} from './layer';\nimport {RepeatSpec} from './repeat';\nimport {TopLevel} from './toplevel';\nimport {FacetedUnitSpec, GenericUnitSpec, NormalizedUnitSpec, TopLevelUnitSpec, UnitSpecWithFrame} from './unit';\n\nexport type {BaseSpec, LayoutSizeMixins} from './base';\nexport type {GenericHConcatSpec, GenericVConcatSpec, NormalizedConcatSpec} from './concat';\nexport {isAnyConcatSpec, isHConcatSpec, isVConcatSpec} from './concat';\nexport type {GenericFacetSpec, NormalizedFacetSpec} from './facet';\nexport {isFacetSpec} from './facet';\nexport type {GenericLayerSpec, LayerSpec, NormalizedLayerSpec} from './layer';\nexport {isLayerSpec} from './layer';\nexport type {RepeatSpec} from './repeat';\nexport {isRepeatSpec} from './repeat';\nexport type {TopLevel} from './toplevel';\nexport type {FacetedUnitSpec, GenericUnitSpec, NormalizedUnitSpec, UnitSpec} from './unit';\nexport {isUnitSpec} from './unit';\n\n/**\n * Any specification in Vega-Lite.\n */\nexport type GenericSpec<\n  U extends GenericUnitSpec<Encoding<F>, any>,\n  L extends GenericLayerSpec<U>,\n  R extends RepeatSpec,\n  F extends Field\n> =\n  | U\n  | L\n  | R\n  | GenericFacetSpec<U, L, F>\n  | GenericConcatSpec<GenericSpec<U, L, R, F>>\n  | GenericVConcatSpec<GenericSpec<U, L, R, F>>\n  | GenericHConcatSpec<GenericSpec<U, L, R, F>>;\n\n/**\n * Specs with only primitive marks and without other macros.\n */\nexport type NormalizedSpec = GenericSpec<NormalizedUnitSpec, NormalizedLayerSpec, never, FieldName>;\n\nexport type TopLevelFacetSpec = TopLevel<GenericFacetSpec<UnitSpecWithFrame<Field>, LayerSpec<Field>, Field>> &\n  DataMixins;\n\nexport type NonNormalizedSpec = GenericSpec<FacetedUnitSpec<Field>, LayerSpec<Field>, RepeatSpec, Field>;\n\n/**\n * A Vega-Lite top-level specification.\n * This is the root class for all Vega-Lite specifications.\n * (The json schema is generated from this type.)\n */\nexport type TopLevelSpec =\n  | TopLevelUnitSpec<Field>\n  | TopLevelFacetSpec\n  | TopLevel<LayerSpec<Field>>\n  | TopLevel<RepeatSpec>\n  | TopLevel<GenericConcatSpec<NonNormalizedSpec>>\n  | TopLevel<GenericVConcatSpec<NonNormalizedSpec>>\n  | TopLevel<GenericHConcatSpec<NonNormalizedSpec>>;\n"],"mappings":"AAkBA,SAAQA,eAAe,EAAEC,aAAa,EAAEC,aAAa,QAAO,UAAU;AAEtE,SAAQC,WAAW,QAAO,SAAS;AAEnC,SAAQC,WAAW,QAAO,SAAS;AAEnC,SAAQC,YAAY,QAAO,UAAU;AAGrC,SAAQC,UAAU,QAAO,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}