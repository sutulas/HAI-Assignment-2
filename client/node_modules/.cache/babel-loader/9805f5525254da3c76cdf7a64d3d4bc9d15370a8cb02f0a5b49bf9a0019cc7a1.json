{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n  clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? 'key', specifiedAs[1] ?? 'value'];\n  }\n  dependentFields() {\n    return new Set(this.transform.fold);\n  }\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n  hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n  assemble() {\n    const {\n      fold,\n      as\n    } = this.transform;\n    const result = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["duplicate","hash","DataFlowNode","FoldTransformNode","clone","transform","constructor","parent","specifiedAs","as","undefined","dependentFields","Set","fold","producedFields","assemble","result","type","fields"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\fold.ts"],"sourcesContent":["import type {FoldTransform as VgFoldTransform} from 'vega';\nimport {FoldTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n  public clone() {\n    return new FoldTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private transform: FoldTransform\n  ) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? 'key', specifiedAs[1] ?? 'value'];\n  }\n\n  public dependentFields() {\n    return new Set(this.transform.fold);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FoldTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFoldTransform {\n    const {fold, as} = this.transform;\n    const result: VgFoldTransform = {\n      type: 'fold',\n      fields: fold,\n      as\n    };\n    return result;\n  }\n}\n"],"mappings":"AAEA,SAAQA,SAAS,EAAEC,IAAI,QAAO,YAAY;AAC1C,SAAQC,YAAY,QAAO,YAAY;AAEvC;;;AAGA,OAAM,MAAOC,iBAAkB,SAAQD,YAAY;EAC1CE,KAAKA,CAAA;IACV,OAAO,IAAID,iBAAiB,CAAC,IAAI,EAAEH,SAAS,CAAC,IAAI,CAACK,SAAS,CAAC,CAAC;EAC/D;EAEAC,YACEC,MAAoB,EACZF,SAAwB;IAEhC,KAAK,CAACE,MAAM,CAAC;IAFL,KAAAF,SAAS,GAATA,SAAS;IAGjB,IAAI,CAACA,SAAS,GAAGL,SAAS,CAACK,SAAS,CAAC,CAAC,CAAC;IACvC,MAAMG,WAAW,GAAG,IAAI,CAACH,SAAS,CAACI,EAAE,IAAI,CAACC,SAAS,EAAEA,SAAS,CAAC;IAC/D,IAAI,CAACL,SAAS,CAACI,EAAE,GAAG,CAACD,WAAW,CAAC,CAAC,CAAC,IAAI,KAAK,EAAEA,WAAW,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC;EAC1E;EAEOG,eAAeA,CAAA;IACpB,OAAO,IAAIC,GAAG,CAAC,IAAI,CAACP,SAAS,CAACQ,IAAI,CAAC;EACrC;EAEOC,cAAcA,CAAA;IACnB,OAAO,IAAIF,GAAG,CAAC,IAAI,CAACP,SAAS,CAACI,EAAE,CAAC;EACnC;EAEOR,IAAIA,CAAA;IACT,OAAO,iBAAiBA,IAAI,CAAC,IAAI,CAACI,SAAS,CAAC,EAAE;EAChD;EAEOU,QAAQA,CAAA;IACb,MAAM;MAACF,IAAI;MAAEJ;IAAE,CAAC,GAAG,IAAI,CAACJ,SAAS;IACjC,MAAMW,MAAM,GAAoB;MAC9BC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAEL,IAAI;MACZJ;KACD;IACD,OAAOO,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}