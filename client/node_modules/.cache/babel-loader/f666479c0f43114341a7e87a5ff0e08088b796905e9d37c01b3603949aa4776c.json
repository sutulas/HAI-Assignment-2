{"ast":null,"code":"import { parseSelector } from 'vega-event-selector';\nimport { array, isObject, isString, stringValue } from 'vega-util';\nimport { selectionCompilers, STORE } from '.';\nimport { warn } from '../../log';\nimport { duplicate, entries, replacePathInField, varName } from '../../util';\nimport { OutputNode } from '../data/dataflow';\nimport { FilterNode } from '../data/filter';\nimport { DataSourceType } from '../../data';\nexport function parseUnitSelection(model, selDefs) {\n  const selCmpts = {};\n  const selectionConfig = model.config.selection;\n  if (!selDefs || !selDefs.length) return selCmpts;\n  for (const def of selDefs) {\n    const name = varName(def.name);\n    const selDef = def.select;\n    const type = isString(selDef) ? selDef : selDef.type;\n    const defaults = isObject(selDef) ? duplicate(selDef) : {\n      type\n    };\n    // Set default values from config if a property hasn't been specified,\n    // or if it is true. E.g., \"translate\": true should use the default\n    // event handlers for translate. However, true may be a valid value for\n    // a property (e.g., \"nearest\": true).\n    const cfg = selectionConfig[type];\n    for (const key in cfg) {\n      // Project transform applies its defaults.\n      if (key === 'fields' || key === 'encodings') {\n        continue;\n      }\n      if (key === 'mark') {\n        defaults.mark = {\n          ...cfg.mark,\n          ...defaults.mark\n        };\n      }\n      if (defaults[key] === undefined || defaults[key] === true) {\n        defaults[key] = duplicate(cfg[key] ?? defaults[key]);\n      }\n    }\n    const selCmpt = selCmpts[name] = {\n      ...defaults,\n      name,\n      type,\n      init: def.value,\n      bind: def.bind,\n      events: isString(defaults.on) ? parseSelector(defaults.on, 'scope') : array(duplicate(defaults.on))\n    };\n    const def_ = duplicate(def); // defensive copy to prevent compilers from causing side effects\n    for (const c of selectionCompilers) {\n      if (c.defined(selCmpt) && c.parse) {\n        c.parse(model, selCmpt, def_);\n      }\n    }\n  }\n  return selCmpts;\n}\nexport function parseSelectionPredicate(model, pred, dfnode) {\n  let datum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'datum';\n  const name = isString(pred) ? pred : pred.param;\n  const vname = varName(name);\n  const store = stringValue(vname + STORE);\n  let selCmpt;\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat as a variable parameter and coerce to boolean.\n    return `!!${vname}`;\n  }\n  if (selCmpt.project.timeUnit) {\n    const child = dfnode ?? model.component.data.raw;\n    const tunode = selCmpt.project.timeUnit.clone();\n    if (child.parent) {\n      tunode.insertAsParentOf(child);\n    } else {\n      child.parent = tunode;\n    }\n  }\n  const fn = selCmpt.project.hasSelectionId ? 'vlSelectionIdTest(' : 'vlSelectionTest(';\n  const resolve = selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`;\n  const test = `${fn}${store}, ${datum}${resolve}`;\n  const length = `length(data(${store}))`;\n  return pred.empty === false ? `${length} && ${test}` : `!${length} || ${test}`;\n}\nexport function parseSelectionExtent(model, name, extent) {\n  const vname = varName(name);\n  const encoding = extent.encoding;\n  let field = extent.field;\n  let selCmpt;\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat it as a variable parameter.\n    return vname;\n  }\n  if (!encoding && !field) {\n    field = selCmpt.project.items[0].field;\n    if (selCmpt.project.items.length > 1) {\n      warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' + `Using \"field\": ${stringValue(field)}.`);\n    }\n  } else if (encoding && !field) {\n    const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\n    if (!encodings.length || encodings.length > 1) {\n      field = selCmpt.project.items[0].field;\n      warn((!encodings.length ? 'No ' : 'Multiple ') + `matching ${stringValue(encoding)} encoding found for selection ${stringValue(extent.param)}. ` + `Using \"field\": ${stringValue(field)}.`);\n    } else {\n      field = encodings[0].field;\n    }\n  }\n  return `${selCmpt.name}[${stringValue(replacePathInField(field))}]`;\n}\nexport function materializeSelections(model, main) {\n  for (const [selection, selCmpt] of entries(model.component.selection ?? {})) {\n    const lookupName = model.getName(`lookup_${selection}`);\n    model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(new FilterNode(main, model, {\n      param: selection\n    }), lookupName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n  }\n}","map":{"version":3,"names":["parseSelector","array","isObject","isString","stringValue","selectionCompilers","STORE","warn","duplicate","entries","replacePathInField","varName","OutputNode","FilterNode","DataSourceType","parseUnitSelection","model","selDefs","selCmpts","selectionConfig","config","selection","length","def","name","selDef","select","type","defaults","cfg","key","mark","undefined","selCmpt","init","value","bind","events","on","def_","c","defined","parse","parseSelectionPredicate","pred","dfnode","datum","arguments","param","vname","store","getSelectionComponent","e","project","timeUnit","child","component","data","raw","tunode","clone","parent","insertAsParentOf","fn","hasSelectionId","resolve","test","empty","parseSelectionExtent","extent","encoding","field","items","encodings","filter","p","channel","materializeSelections","main","lookupName","getName","outputNodes","materialized","Lookup","outputNodeRefCounts"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\selection\\parse.ts"],"sourcesContent":["import {parseSelector} from 'vega-event-selector';\nimport {array, isObject, isString, stringValue} from 'vega-util';\nimport {selectionCompilers, SelectionComponent, STORE} from '.';\nimport {warn} from '../../log';\nimport {BaseSelectionConfig, SelectionParameter, ParameterExtent} from '../../selection';\nimport {Dict, duplicate, entries, replacePathInField, varName} from '../../util';\nimport {DataFlowNode, OutputNode} from '../data/dataflow';\nimport {FilterNode} from '../data/filter';\nimport {Model} from '../model';\nimport {UnitModel} from '../unit';\nimport {DataSourceType} from '../../data';\nimport {ParameterPredicate} from '../../predicate';\n\nexport function parseUnitSelection(model: UnitModel, selDefs: SelectionParameter[]) {\n  const selCmpts: Dict<SelectionComponent<any /* this has to be \"any\" so typing won't fail in test files*/>> = {};\n  const selectionConfig = model.config.selection;\n\n  if (!selDefs || !selDefs.length) return selCmpts;\n\n  for (const def of selDefs) {\n    const name = varName(def.name);\n    const selDef = def.select;\n    const type = isString(selDef) ? selDef : selDef.type;\n    const defaults: BaseSelectionConfig = isObject(selDef) ? duplicate(selDef) : {type};\n\n    // Set default values from config if a property hasn't been specified,\n    // or if it is true. E.g., \"translate\": true should use the default\n    // event handlers for translate. However, true may be a valid value for\n    // a property (e.g., \"nearest\": true).\n    const cfg = selectionConfig[type];\n    for (const key in cfg) {\n      // Project transform applies its defaults.\n      if (key === 'fields' || key === 'encodings') {\n        continue;\n      }\n\n      if (key === 'mark') {\n        (defaults as any).mark = {...(cfg as any).mark, ...(defaults as any).mark};\n      }\n\n      if ((defaults as any)[key] === undefined || (defaults as any)[key] === true) {\n        (defaults as any)[key] = duplicate((cfg as any)[key] ?? (defaults as any)[key]);\n      }\n    }\n\n    const selCmpt: SelectionComponent<any> = (selCmpts[name] = {\n      ...defaults,\n      name,\n      type,\n      init: def.value,\n      bind: def.bind,\n      events: isString(defaults.on) ? parseSelector(defaults.on, 'scope') : array(duplicate(defaults.on))\n    } as any);\n\n    const def_ = duplicate(def); // defensive copy to prevent compilers from causing side effects\n    for (const c of selectionCompilers) {\n      if (c.defined(selCmpt) && c.parse) {\n        c.parse(model, selCmpt, def_);\n      }\n    }\n  }\n\n  return selCmpts;\n}\n\nexport function parseSelectionPredicate(\n  model: Model,\n  pred: ParameterPredicate,\n  dfnode?: DataFlowNode,\n  datum = 'datum'\n): string {\n  const name = isString(pred) ? pred : pred.param;\n  const vname = varName(name);\n  const store = stringValue(vname + STORE);\n  let selCmpt;\n\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat as a variable parameter and coerce to boolean.\n    return `!!${vname}`;\n  }\n\n  if (selCmpt.project.timeUnit) {\n    const child = dfnode ?? model.component.data.raw;\n    const tunode = selCmpt.project.timeUnit.clone();\n    if (child.parent) {\n      tunode.insertAsParentOf(child);\n    } else {\n      child.parent = tunode;\n    }\n  }\n\n  const fn = selCmpt.project.hasSelectionId ? 'vlSelectionIdTest(' : 'vlSelectionTest(';\n  const resolve = selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`;\n  const test = `${fn}${store}, ${datum}${resolve}`;\n  const length = `length(data(${store}))`;\n\n  return pred.empty === false ? `${length} && ${test}` : `!${length} || ${test}`;\n}\n\nexport function parseSelectionExtent(model: Model, name: string, extent: ParameterExtent) {\n  const vname = varName(name);\n  const encoding = (extent as any).encoding;\n  let field = (extent as any).field;\n  let selCmpt;\n\n  try {\n    selCmpt = model.getSelectionComponent(vname, name);\n  } catch (e) {\n    // If a selection isn't found, treat it as a variable parameter.\n    return vname;\n  }\n\n  if (!encoding && !field) {\n    field = selCmpt.project.items[0].field;\n    if (selCmpt.project.items.length > 1) {\n      warn(\n        'A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n          `Using \"field\": ${stringValue(field)}.`\n      );\n    }\n  } else if (encoding && !field) {\n    const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\n    if (!encodings.length || encodings.length > 1) {\n      field = selCmpt.project.items[0].field;\n      warn(\n        (!encodings.length ? 'No ' : 'Multiple ') +\n          `matching ${stringValue(encoding)} encoding found for selection ${stringValue(extent.param)}. ` +\n          `Using \"field\": ${stringValue(field)}.`\n      );\n    } else {\n      field = encodings[0].field;\n    }\n  }\n\n  return `${selCmpt.name}[${stringValue(replacePathInField(field))}]`;\n}\n\nexport function materializeSelections(model: UnitModel, main: OutputNode) {\n  for (const [selection, selCmpt] of entries(model.component.selection ?? {})) {\n    const lookupName = model.getName(`lookup_${selection}`);\n    model.component.data.outputNodes[lookupName] = selCmpt.materialized = new OutputNode(\n      new FilterNode(main, model, {param: selection}),\n      lookupName,\n      DataSourceType.Lookup,\n      model.component.data.outputNodeRefCounts\n    );\n  }\n}\n"],"mappings":"AAAA,SAAQA,aAAa,QAAO,qBAAqB;AACjD,SAAQC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAO,WAAW;AAChE,SAAQC,kBAAkB,EAAsBC,KAAK,QAAO,GAAG;AAC/D,SAAQC,IAAI,QAAO,WAAW;AAE9B,SAAcC,SAAS,EAAEC,OAAO,EAAEC,kBAAkB,EAAEC,OAAO,QAAO,YAAY;AAChF,SAAsBC,UAAU,QAAO,kBAAkB;AACzD,SAAQC,UAAU,QAAO,gBAAgB;AAGzC,SAAQC,cAAc,QAAO,YAAY;AAGzC,OAAM,SAAUC,kBAAkBA,CAACC,KAAgB,EAAEC,OAA6B;EAChF,MAAMC,QAAQ,GAA+F,EAAE;EAC/G,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAM,CAACC,SAAS;EAE9C,IAAI,CAACJ,OAAO,IAAI,CAACA,OAAO,CAACK,MAAM,EAAE,OAAOJ,QAAQ;EAEhD,KAAK,MAAMK,GAAG,IAAIN,OAAO,EAAE;IACzB,MAAMO,IAAI,GAAGb,OAAO,CAACY,GAAG,CAACC,IAAI,CAAC;IAC9B,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAM;IACzB,MAAMC,IAAI,GAAGxB,QAAQ,CAACsB,MAAM,CAAC,GAAGA,MAAM,GAAGA,MAAM,CAACE,IAAI;IACpD,MAAMC,QAAQ,GAAwB1B,QAAQ,CAACuB,MAAM,CAAC,GAAGjB,SAAS,CAACiB,MAAM,CAAC,GAAG;MAACE;IAAI,CAAC;IAEnF;IACA;IACA;IACA;IACA,MAAME,GAAG,GAAGV,eAAe,CAACQ,IAAI,CAAC;IACjC,KAAK,MAAMG,GAAG,IAAID,GAAG,EAAE;MACrB;MACA,IAAIC,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,WAAW,EAAE;QAC3C;MACF;MAEA,IAAIA,GAAG,KAAK,MAAM,EAAE;QACjBF,QAAgB,CAACG,IAAI,GAAG;UAAC,GAAIF,GAAW,CAACE,IAAI;UAAE,GAAIH,QAAgB,CAACG;QAAI,CAAC;MAC5E;MAEA,IAAKH,QAAgB,CAACE,GAAG,CAAC,KAAKE,SAAS,IAAKJ,QAAgB,CAACE,GAAG,CAAC,KAAK,IAAI,EAAE;QAC1EF,QAAgB,CAACE,GAAG,CAAC,GAAGtB,SAAS,CAAEqB,GAAW,CAACC,GAAG,CAAC,IAAKF,QAAgB,CAACE,GAAG,CAAC,CAAC;MACjF;IACF;IAEA,MAAMG,OAAO,GAA6Bf,QAAQ,CAACM,IAAI,CAAC,GAAG;MACzD,GAAGI,QAAQ;MACXJ,IAAI;MACJG,IAAI;MACJO,IAAI,EAAEX,GAAG,CAACY,KAAK;MACfC,IAAI,EAAEb,GAAG,CAACa,IAAI;MACdC,MAAM,EAAElC,QAAQ,CAACyB,QAAQ,CAACU,EAAE,CAAC,GAAGtC,aAAa,CAAC4B,QAAQ,CAACU,EAAE,EAAE,OAAO,CAAC,GAAGrC,KAAK,CAACO,SAAS,CAACoB,QAAQ,CAACU,EAAE,CAAC;KAC3F;IAET,MAAMC,IAAI,GAAG/B,SAAS,CAACe,GAAG,CAAC,CAAC,CAAC;IAC7B,KAAK,MAAMiB,CAAC,IAAInC,kBAAkB,EAAE;MAClC,IAAImC,CAAC,CAACC,OAAO,CAACR,OAAO,CAAC,IAAIO,CAAC,CAACE,KAAK,EAAE;QACjCF,CAAC,CAACE,KAAK,CAAC1B,KAAK,EAAEiB,OAAO,EAAEM,IAAI,CAAC;MAC/B;IACF;EACF;EAEA,OAAOrB,QAAQ;AACjB;AAEA,OAAM,SAAUyB,uBAAuBA,CACrC3B,KAAY,EACZ4B,IAAwB,EACxBC,MAAqB,EACN;EAAA,IAAfC,KAAK,GAAAC,SAAA,CAAAzB,MAAA,QAAAyB,SAAA,QAAAf,SAAA,GAAAe,SAAA,MAAG,OAAO;EAEf,MAAMvB,IAAI,GAAGrB,QAAQ,CAACyC,IAAI,CAAC,GAAGA,IAAI,GAAGA,IAAI,CAACI,KAAK;EAC/C,MAAMC,KAAK,GAAGtC,OAAO,CAACa,IAAI,CAAC;EAC3B,MAAM0B,KAAK,GAAG9C,WAAW,CAAC6C,KAAK,GAAG3C,KAAK,CAAC;EACxC,IAAI2B,OAAO;EAEX,IAAI;IACFA,OAAO,GAAGjB,KAAK,CAACmC,qBAAqB,CAACF,KAAK,EAAEzB,IAAI,CAAC;EACpD,CAAC,CAAC,OAAO4B,CAAC,EAAE;IACV;IACA,OAAO,KAAKH,KAAK,EAAE;EACrB;EAEA,IAAIhB,OAAO,CAACoB,OAAO,CAACC,QAAQ,EAAE;IAC5B,MAAMC,KAAK,GAAGV,MAAM,IAAI7B,KAAK,CAACwC,SAAS,CAACC,IAAI,CAACC,GAAG;IAChD,MAAMC,MAAM,GAAG1B,OAAO,CAACoB,OAAO,CAACC,QAAQ,CAACM,KAAK,EAAE;IAC/C,IAAIL,KAAK,CAACM,MAAM,EAAE;MAChBF,MAAM,CAACG,gBAAgB,CAACP,KAAK,CAAC;IAChC,CAAC,MAAM;MACLA,KAAK,CAACM,MAAM,GAAGF,MAAM;IACvB;EACF;EAEA,MAAMI,EAAE,GAAG9B,OAAO,CAACoB,OAAO,CAACW,cAAc,GAAG,oBAAoB,GAAG,kBAAkB;EACrF,MAAMC,OAAO,GAAGhC,OAAO,CAACgC,OAAO,KAAK,QAAQ,GAAG,GAAG,GAAG,KAAK7D,WAAW,CAAC6B,OAAO,CAACgC,OAAO,CAAC,GAAG;EACzF,MAAMC,IAAI,GAAG,GAAGH,EAAE,GAAGb,KAAK,KAAKJ,KAAK,GAAGmB,OAAO,EAAE;EAChD,MAAM3C,MAAM,GAAG,eAAe4B,KAAK,IAAI;EAEvC,OAAON,IAAI,CAACuB,KAAK,KAAK,KAAK,GAAG,GAAG7C,MAAM,OAAO4C,IAAI,EAAE,GAAG,IAAI5C,MAAM,OAAO4C,IAAI,EAAE;AAChF;AAEA,OAAM,SAAUE,oBAAoBA,CAACpD,KAAY,EAAEQ,IAAY,EAAE6C,MAAuB;EACtF,MAAMpB,KAAK,GAAGtC,OAAO,CAACa,IAAI,CAAC;EAC3B,MAAM8C,QAAQ,GAAID,MAAc,CAACC,QAAQ;EACzC,IAAIC,KAAK,GAAIF,MAAc,CAACE,KAAK;EACjC,IAAItC,OAAO;EAEX,IAAI;IACFA,OAAO,GAAGjB,KAAK,CAACmC,qBAAqB,CAACF,KAAK,EAAEzB,IAAI,CAAC;EACpD,CAAC,CAAC,OAAO4B,CAAC,EAAE;IACV;IACA,OAAOH,KAAK;EACd;EAEA,IAAI,CAACqB,QAAQ,IAAI,CAACC,KAAK,EAAE;IACvBA,KAAK,GAAGtC,OAAO,CAACoB,OAAO,CAACmB,KAAK,CAAC,CAAC,CAAC,CAACD,KAAK;IACtC,IAAItC,OAAO,CAACoB,OAAO,CAACmB,KAAK,CAAClD,MAAM,GAAG,CAAC,EAAE;MACpCf,IAAI,CACF,sFAAsF,GACpF,kBAAkBH,WAAW,CAACmE,KAAK,CAAC,GAAG,CAC1C;IACH;EACF,CAAC,MAAM,IAAID,QAAQ,IAAI,CAACC,KAAK,EAAE;IAC7B,MAAME,SAAS,GAAGxC,OAAO,CAACoB,OAAO,CAACmB,KAAK,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKN,QAAQ,CAAC;IAC3E,IAAI,CAACG,SAAS,CAACnD,MAAM,IAAImD,SAAS,CAACnD,MAAM,GAAG,CAAC,EAAE;MAC7CiD,KAAK,GAAGtC,OAAO,CAACoB,OAAO,CAACmB,KAAK,CAAC,CAAC,CAAC,CAACD,KAAK;MACtChE,IAAI,CACF,CAAC,CAACkE,SAAS,CAACnD,MAAM,GAAG,KAAK,GAAG,WAAW,IACtC,YAAYlB,WAAW,CAACkE,QAAQ,CAAC,iCAAiClE,WAAW,CAACiE,MAAM,CAACrB,KAAK,CAAC,IAAI,GAC/F,kBAAkB5C,WAAW,CAACmE,KAAK,CAAC,GAAG,CAC1C;IACH,CAAC,MAAM;MACLA,KAAK,GAAGE,SAAS,CAAC,CAAC,CAAC,CAACF,KAAK;IAC5B;EACF;EAEA,OAAO,GAAGtC,OAAO,CAACT,IAAI,IAAIpB,WAAW,CAACM,kBAAkB,CAAC6D,KAAK,CAAC,CAAC,GAAG;AACrE;AAEA,OAAM,SAAUM,qBAAqBA,CAAC7D,KAAgB,EAAE8D,IAAgB;EACtE,KAAK,MAAM,CAACzD,SAAS,EAAEY,OAAO,CAAC,IAAIxB,OAAO,CAACO,KAAK,CAACwC,SAAS,CAACnC,SAAS,IAAI,EAAE,CAAC,EAAE;IAC3E,MAAM0D,UAAU,GAAG/D,KAAK,CAACgE,OAAO,CAAC,UAAU3D,SAAS,EAAE,CAAC;IACvDL,KAAK,CAACwC,SAAS,CAACC,IAAI,CAACwB,WAAW,CAACF,UAAU,CAAC,GAAG9C,OAAO,CAACiD,YAAY,GAAG,IAAItE,UAAU,CAClF,IAAIC,UAAU,CAACiE,IAAI,EAAE9D,KAAK,EAAE;MAACgC,KAAK,EAAE3B;IAAS,CAAC,CAAC,EAC/C0D,UAAU,EACVjE,cAAc,CAACqE,MAAM,EACrBnE,KAAK,CAACwC,SAAS,CAACC,IAAI,CAAC2B,mBAAmB,CACzC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}