{"ast":null,"code":"import { stringValue } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport { varName } from '../../util';\nimport { assembleInit } from './assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nimport { isLegendBinding } from '../../selection';\nconst inputBindings = {\n  defined: selCmpt => {\n    return selCmpt.type === 'point' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\n  },\n  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n    const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    proj.items.forEach((p, i) => {\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n      if (!hasSignal.length) {\n        signals.unshift({\n          name: sgname,\n          ...(init ? {\n            init: assembleInit(init[i])\n          } : {\n            value: null\n          }),\n          on: selCmpt.events ? [{\n            events: selCmpt.events,\n            update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n          }] : [],\n          bind: bind[p.field] ?? bind[p.channel] ?? bind\n        });\n      }\n    });\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n    delete signal.value;\n    delete signal.on;\n    return signals;\n  }\n};\nexport default inputBindings;","map":{"version":3,"names":["stringValue","disableDirectManipulation","TUPLE","varName","assembleInit","nearest","TUPLE_FIELDS","isLegendBinding","inputBindings","defined","selCmpt","type","resolve","bind","parse","model","selDef","topLevelSignals","signals","name","proj","project","init","datum","items","forEach","p","i","sgname","field","hasSignal","filter","s","length","unshift","value","on","events","update","channel","signal","find","fields","values","map","valid","v","join"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\selection\\inputs.ts"],"sourcesContent":["import {stringValue} from 'vega-util';\nimport {disableDirectManipulation, TUPLE} from '.';\nimport {varName} from '../../util';\nimport {assembleInit} from './assemble';\nimport nearest from './nearest';\nimport {TUPLE_FIELDS} from './project';\nimport {SelectionCompiler} from '.';\nimport {isLegendBinding} from '../../selection';\nimport {NewSignal} from 'vega';\n\nconst inputBindings: SelectionCompiler<'point'> = {\n  defined: selCmpt => {\n    return (\n      selCmpt.type === 'point' &&\n      selCmpt.resolve === 'global' &&\n      selCmpt.bind &&\n      selCmpt.bind !== 'scales' &&\n      !isLegendBinding(selCmpt.bind)\n    );\n  },\n\n  parse: (model, selCmpt, selDef) => disableDirectManipulation(selCmpt, selDef),\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n    const datum = nearest.defined(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n\n    proj.items.forEach((p, i) => {\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift({\n          name: sgname,\n          ...(init ? {init: assembleInit(init[i])} : {value: null}),\n          on: selCmpt.events\n            ? [\n                {\n                  events: selCmpt.events,\n                  update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n                }\n              ]\n            : [],\n          bind: (bind as any)[p.field] ?? (bind as any)[p.channel] ?? bind\n        });\n      }\n    });\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal: NewSignal = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n\n    return signals;\n  }\n};\n\nexport default inputBindings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}