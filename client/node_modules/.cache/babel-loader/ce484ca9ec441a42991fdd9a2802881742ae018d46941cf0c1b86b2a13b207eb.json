{"ast":null,"code":"import { isObject } from 'vega';\nimport { parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { disableDirectManipulation, TUPLE } from '.';\nimport * as log from '../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../selection';\nimport { duplicate, vals, varName } from '../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n  defined: selCmpt => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n    return spec && projLen;\n  },\n  parse: (model, selCmpt, selDef) => {\n    // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n    const selDef_ = duplicate(selDef);\n    selDef_.select = isString(selDef_.select) ? {\n      type: selDef_.select,\n      toggle: selCmpt.toggle\n    } : {\n      ...selDef_.select,\n      toggle: selCmpt.toggle\n    };\n    disableDirectManipulation(selCmpt, selDef_);\n    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n      for (const evt of selCmpt.events) {\n        evt.filter = array(evt.filter ?? []);\n        if (!evt.filter.includes(legendFilter)) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {\n      legend: {\n        merge: stream\n      }\n    };\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    const markName = name => s => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${varName(proj.field)}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n      if (hasSignal.length === 0) {\n        const events = stream.merge.map(markName(`${prefix}_symbols`)).concat(stream.merge.map(markName(`${prefix}_labels`))).concat(stream.merge.map(markName(`${prefix}_entries`)));\n        signals.unshift({\n          name: sgName,\n          ...(!selCmpt.init ? {\n            value: null\n          } : {}),\n          on: [\n          // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n          {\n            events,\n            update: 'isDefined(datum.value) ? datum.value : item().items[0].items[0].datum.value',\n            force: true\n          }, {\n            events: stream.merge,\n            update: `!event.item || !datum ? null : ${sgName}`,\n            force: true\n          }]\n        });\n      }\n    }\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({\n          signal\n        })),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push({\n        ...toggle.on[0],\n        events\n      });\n    }\n    return signals;\n  }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n  const field = model.fieldDef(channel)?.field;\n  for (const selCmpt of vals(model.component.selection ?? {})) {\n    const proj = selCmpt.project.hasField[field] ?? selCmpt.project.hasChannel[channel];\n    if (proj && legendBindings.defined(selCmpt)) {\n      const legendSelections = legendCmpt.get('selections') ?? [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  }\n}","map":{"version":3,"names":["isObject","parseSelector","array","isString","disableDirectManipulation","TUPLE","log","isLegendBinding","isLegendStreamBinding","SELECTION_ID","duplicate","vals","varName","TUPLE_FIELDS","TOGGLE","legendBindings","defined","selCmpt","spec","resolve","bind","projLen","project","items","length","field","warn","message","LEGEND_BINDINGS_MUST_HAVE_PROJECTION","parse","model","selDef","selDef_","select","type","toggle","on","clear","legendFilter","evt","events","filter","includes","push","legend","stream","merge","topLevelSignals","signals","selName","name","markName","s","ds","markname","proj","hasLegend","prefix","sgName","hasSignal","map","concat","unshift","init","value","update","force","tuple","find","fields","values","p","valid","v","join","signal","parseInteractiveLegend","channel","legendCmpt","fieldDef","component","selection","hasField","hasChannel","legendSelections","get","set"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\selection\\legends.ts"],"sourcesContent":["import {isObject, MergedStream, NewSignal, Stream} from 'vega';\nimport {parseSelector} from 'vega-event-selector';\nimport {array, isString} from 'vega-util';\nimport {disableDirectManipulation, TUPLE} from '.';\nimport {NonPositionScaleChannel} from '../../channel';\nimport * as log from '../../log';\nimport {isLegendBinding, isLegendStreamBinding, SELECTION_ID} from '../../selection';\nimport {duplicate, vals, varName} from '../../util';\nimport {LegendComponent} from '../legend/component';\nimport {UnitModel} from '../unit';\nimport {TUPLE_FIELDS} from './project';\nimport {TOGGLE} from './toggle';\nimport {SelectionCompiler} from '.';\n\nconst legendBindings: SelectionCompiler<'point'> = {\n  defined: selCmpt => {\n    const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n\n    return spec && projLen;\n  },\n\n  parse: (model, selCmpt, selDef) => {\n    // Allow legend items to be toggleable by default even though direct manipulation is disabled.\n    const selDef_ = duplicate(selDef);\n    selDef_.select = isString(selDef_.select)\n      ? {type: selDef_.select, toggle: selCmpt.toggle}\n      : {...selDef_.select, toggle: selCmpt.toggle};\n    disableDirectManipulation(selCmpt, selDef_);\n\n    if (isObject(selDef.select) && (selDef.select.on || selDef.select.clear)) {\n      const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n      for (const evt of selCmpt.events) {\n        evt.filter = array(evt.filter ?? []);\n        if (!evt.filter.includes(legendFilter)) {\n          evt.filter.push(legendFilter);\n        }\n      }\n    }\n\n    const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    const stream: Stream[] = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {legend: {merge: stream}};\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const selName = selCmpt.name;\n    const stream = isLegendStreamBinding(selCmpt.bind) && (selCmpt.bind.legend as MergedStream);\n    const markName = (name: string) => (s: Stream) => {\n      const ds = duplicate(s);\n      ds.markname = name;\n      return ds;\n    };\n\n    for (const proj of selCmpt.project.items) {\n      if (!proj.hasLegend) continue;\n      const prefix = `${varName(proj.field)}_legend`;\n      const sgName = `${selName}_${prefix}`;\n      const hasSignal = signals.filter(s => s.name === sgName);\n\n      if (hasSignal.length === 0) {\n        const events = stream.merge\n          .map(markName(`${prefix}_symbols`))\n          .concat(stream.merge.map(markName(`${prefix}_labels`)))\n          .concat(stream.merge.map(markName(`${prefix}_entries`)));\n\n        signals.unshift({\n          name: sgName,\n          ...(!selCmpt.init ? {value: null} : {}),\n          on: [\n            // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {\n              events,\n              update: 'isDefined(datum.value) ? datum.value : item().items[0].items[0].datum.value',\n              force: true\n            },\n            {events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true}\n          ]\n        });\n      }\n    }\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const tuple: NewSignal = signals.find(s => s.name === name + TUPLE);\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n    const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(signal => ({signal})),\n        update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    const toggle = signals.find(s => s.name === name + TOGGLE);\n    const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;\n      else toggle.on.push({...toggle.on[0], events});\n    }\n\n    return signals;\n  }\n};\n\nexport default legendBindings;\n\nexport function parseInteractiveLegend(\n  model: UnitModel,\n  channel: NonPositionScaleChannel,\n  legendCmpt: LegendComponent\n) {\n  const field = model.fieldDef(channel)?.field;\n  for (const selCmpt of vals(model.component.selection ?? {})) {\n    const proj = selCmpt.project.hasField[field] ?? selCmpt.project.hasChannel[channel];\n    if (proj && legendBindings.defined(selCmpt)) {\n      const legendSelections = legendCmpt.get('selections') ?? [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}