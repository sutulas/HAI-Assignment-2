{"ast":null,"code":"import { contains, getFirstDefined } from '../../util';\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel, orient) {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n  return channel === 'row' ? 'row' : 'column';\n}\nexport function getHeaderProperty(prop, header, config, channel) {\n  const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\n}\nexport function getHeaderProperties(properties, header, config, channel) {\n  const props = {};\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, header || {}, config, channel);\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n  return props;\n}","map":{"version":3,"names":["contains","getFirstDefined","getHeaderChannel","channel","orient","getHeaderProperty","prop","header","config","headerSpecificConfig","headerRow","headerColumn","headerFacet","getHeaderProperties","properties","props","value","undefined"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\header\\common.ts"],"sourcesContent":["import {Orient, SignalRef} from 'vega';\nimport {FacetChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {Header} from '../../header';\nimport {contains, getFirstDefined} from '../../util';\nimport {HeaderChannel} from './component';\n\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel: FacetChannel, orient: Orient): HeaderChannel {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n  return channel === 'row' ? 'row' : 'column';\n}\n\nexport function getHeaderProperty<P extends keyof Header<SignalRef>>(\n  prop: P,\n  header: Header<SignalRef>,\n  config: Config<SignalRef>,\n  channel: FacetChannel\n): Header<SignalRef>[P] {\n  const headerSpecificConfig =\n    channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n\n  return getFirstDefined((header || {})[prop], headerSpecificConfig[prop], config.header[prop]);\n}\n\nexport function getHeaderProperties(\n  properties: (keyof Header<SignalRef>)[],\n  header: Header<SignalRef>,\n  config: Config<SignalRef>,\n  channel: FacetChannel\n): Header<SignalRef> {\n  const props = {};\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, header || {}, config, channel);\n    if (value !== undefined) {\n      (props as any)[prop] = value;\n    }\n  }\n  return props;\n}\n"],"mappings":"AAIA,SAAQA,QAAQ,EAAEC,eAAe,QAAO,YAAY;AAGpD;;;AAGA,OAAM,SAAUC,gBAAgBA,CAACC,OAAqB,EAAEC,MAAc;EACpE,IAAIJ,QAAQ,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAEI,MAAM,CAAC,EAAE;IACvC,OAAO,QAAQ;EACjB,CAAC,MAAM,IAAIJ,QAAQ,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAEI,MAAM,CAAC,EAAE;IAC9C,OAAO,KAAK;EACd;EACA,OAAOD,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,QAAQ;AAC7C;AAEA,OAAM,SAAUE,iBAAiBA,CAC/BC,IAAO,EACPC,MAAyB,EACzBC,MAAyB,EACzBL,OAAqB;EAErB,MAAMM,oBAAoB,GACxBN,OAAO,KAAK,KAAK,GAAGK,MAAM,CAACE,SAAS,GAAGP,OAAO,KAAK,QAAQ,GAAGK,MAAM,CAACG,YAAY,GAAGH,MAAM,CAACI,WAAW;EAExG,OAAOX,eAAe,CAAC,CAACM,MAAM,IAAI,EAAE,EAAED,IAAI,CAAC,EAAEG,oBAAoB,CAACH,IAAI,CAAC,EAAEE,MAAM,CAACD,MAAM,CAACD,IAAI,CAAC,CAAC;AAC/F;AAEA,OAAM,SAAUO,mBAAmBA,CACjCC,UAAuC,EACvCP,MAAyB,EACzBC,MAAyB,EACzBL,OAAqB;EAErB,MAAMY,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMT,IAAI,IAAIQ,UAAU,EAAE;IAC7B,MAAME,KAAK,GAAGX,iBAAiB,CAACC,IAAI,EAAEC,MAAM,IAAI,EAAE,EAAEC,MAAM,EAAEL,OAAO,CAAC;IACpE,IAAIa,KAAK,KAAKC,SAAS,EAAE;MACtBF,KAAa,CAACT,IAAI,CAAC,GAAGU,KAAK;IAC9B;EACF;EACA,OAAOD,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}