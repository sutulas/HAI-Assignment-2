{"ast":null,"code":"import { COMMON_AXIS_PROPERTIES_INDEX } from '../../axis';\nimport { duplicate, keys } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { Split } from '../split';\nfunction isFalseOrNull(v) {\n  return v === false || v === null;\n}\nconst AXIS_COMPONENT_PROPERTIES_INDEX = {\n  disable: 1,\n  gridScale: 1,\n  scale: 1,\n  ...COMMON_AXIS_PROPERTIES_INDEX,\n  labelExpr: 1,\n  encode: 1\n};\nexport const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);\nexport class AxisComponent extends Split {\n  constructor() {\n    let explicit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let implicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let mainExtracted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super();\n    this.explicit = explicit;\n    this.implicit = implicit;\n    this.mainExtracted = mainExtracted;\n  }\n  clone() {\n    return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n  }\n  hasAxisPart(part) {\n    // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n    if (part === 'axis') {\n      // always has the axis container part\n      return true;\n    }\n    if (part === 'grid' || part === 'title') {\n      return !!this.get(part);\n    }\n    // Other parts are enabled by default, so they should not be false or null.\n    return !isFalseOrNull(this.get(part));\n  }\n  hasOrientSignalRef() {\n    return isSignalRef(this.explicit.orient);\n  }\n}","map":{"version":3,"names":["COMMON_AXIS_PROPERTIES_INDEX","duplicate","keys","isSignalRef","Split","isFalseOrNull","v","AXIS_COMPONENT_PROPERTIES_INDEX","disable","gridScale","scale","labelExpr","encode","AXIS_COMPONENT_PROPERTIES","AxisComponent","constructor","explicit","arguments","length","undefined","implicit","mainExtracted","clone","hasAxisPart","part","get","hasOrientSignalRef","orient"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\axis\\component.ts"],"sourcesContent":["import {Axis as VgAxis, SignalRef, Text} from 'vega';\nimport {\n  AxisInternal,\n  AxisPart,\n  AxisPropsWithCondition,\n  COMMON_AXIS_PROPERTIES_INDEX,\n  ConditionalAxisProp\n} from '../../axis';\nimport {FieldDefBase} from '../../channeldef';\nimport {duplicate, Flag, keys} from '../../util';\nimport {isSignalRef} from '../../vega.schema';\nimport {Split} from '../split';\n\nfunction isFalseOrNull(v: any) {\n  return v === false || v === null;\n}\n\nexport type AxisComponentProps = Omit<VgAxis, 'title' | ConditionalAxisProp> &\n  Omit<AxisPropsWithCondition<SignalRef>, 'title'> & {\n    title: Text | FieldDefBase<string>[] | SignalRef;\n    labelExpr: string;\n    disable: boolean;\n  };\n\nconst AXIS_COMPONENT_PROPERTIES_INDEX: Flag<keyof AxisComponentProps> = {\n  disable: 1,\n  gridScale: 1,\n  scale: 1,\n  ...COMMON_AXIS_PROPERTIES_INDEX,\n  labelExpr: 1,\n  encode: 1\n};\n\nexport const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);\n\nexport class AxisComponent extends Split<AxisComponentProps> {\n  constructor(\n    public readonly explicit: Partial<AxisComponentProps> = {},\n    public readonly implicit: Partial<AxisComponentProps> = {},\n    public mainExtracted = false\n  ) {\n    super();\n  }\n\n  public clone() {\n    return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n  }\n\n  public hasAxisPart(part: AxisPart) {\n    // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n\n    if (part === 'axis') {\n      // always has the axis container part\n      return true;\n    }\n\n    if (part === 'grid' || part === 'title') {\n      return !!this.get(part);\n    }\n    // Other parts are enabled by default, so they should not be false or null.\n    return !isFalseOrNull(this.get(part));\n  }\n\n  public hasOrientSignalRef() {\n    return isSignalRef(this.explicit.orient);\n  }\n}\n\nexport interface AxisComponentIndex {\n  x?: AxisComponent[];\n  y?: AxisComponent[];\n}\n\nexport interface AxisInternalIndex {\n  x?: AxisInternal;\n  y?: AxisInternal;\n}\n"],"mappings":"AACA,SAIEA,4BAA4B,QAEvB,YAAY;AAEnB,SAAQC,SAAS,EAAQC,IAAI,QAAO,YAAY;AAChD,SAAQC,WAAW,QAAO,mBAAmB;AAC7C,SAAQC,KAAK,QAAO,UAAU;AAE9B,SAASC,aAAaA,CAACC,CAAM;EAC3B,OAAOA,CAAC,KAAK,KAAK,IAAIA,CAAC,KAAK,IAAI;AAClC;AASA,MAAMC,+BAA+B,GAAmC;EACtEC,OAAO,EAAE,CAAC;EACVC,SAAS,EAAE,CAAC;EACZC,KAAK,EAAE,CAAC;EACR,GAAGV,4BAA4B;EAC/BW,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE;CACT;AAED,OAAO,MAAMC,yBAAyB,GAAGX,IAAI,CAACK,+BAA+B,CAAC;AAE9E,OAAM,MAAOO,aAAc,SAAQV,KAAyB;EAC1DW,YAAA,EAG8B;IAAA,IAFZC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwC,EAAE;IAAA,IAC1CG,QAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwC,EAAE;IAAA,IACnDI,aAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgB,KAAK;IAE5B,KAAK,EAAE;IAJS,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAI,QAAQ,GAARA,QAAQ;IACjB,KAAAC,aAAa,GAAbA,aAAa;EAGtB;EAEOC,KAAKA,CAAA;IACV,OAAO,IAAIR,aAAa,CAACb,SAAS,CAAC,IAAI,CAACe,QAAQ,CAAC,EAAEf,SAAS,CAAC,IAAI,CAACmB,QAAQ,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC;EAClG;EAEOE,WAAWA,CAACC,IAAc;IAC/B;IAEA,IAAIA,IAAI,KAAK,MAAM,EAAE;MACnB;MACA,OAAO,IAAI;IACb;IAEA,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,OAAO,EAAE;MACvC,OAAO,CAAC,CAAC,IAAI,CAACC,GAAG,CAACD,IAAI,CAAC;IACzB;IACA;IACA,OAAO,CAACnB,aAAa,CAAC,IAAI,CAACoB,GAAG,CAACD,IAAI,CAAC,CAAC;EACvC;EAEOE,kBAAkBA,CAAA;IACvB,OAAOvB,WAAW,CAAC,IAAI,CAACa,QAAQ,CAACW,MAAM,CAAC;EAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}