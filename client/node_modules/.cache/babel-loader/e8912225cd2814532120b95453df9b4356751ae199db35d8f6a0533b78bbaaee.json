{"ast":null,"code":"import { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isArgmaxDef, isArgminDef, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString, isBinned, isBinning } from './bin';\nimport { ANGLE, COLOR, COLUMN, DESCRIPTION, DETAIL, FACET, FILL, FILLOPACITY, getSizeChannel, HREF, isScaleChannel, isSecondaryRangeChannel, isXorY, KEY, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, OPACITY, ORDER, RADIUS, RADIUS2, ROW, SHAPE, SIZE, STROKE, STROKEDASH, STROKEOPACITY, STROKEWIDTH, TEXT, THETA, THETA2, TOOLTIP, URL, X, X2, XOFFSET, Y, Y2, YOFFSET } from './channel';\nimport { getMarkConfig, getMarkPropOrConfig } from './compile/common';\nimport { isCustomFormatType } from './compile/format';\nimport { dateTimeToExpr, isDateTime } from './datetime';\nimport { isExprRef } from './expr';\nimport * as log from './log';\nimport { isRectBasedMark } from './mark';\nimport { hasDiscreteDomain, isContinuousToDiscrete, SCALE_CATEGORY_INDEX } from './scale';\nimport { isSortByChannel } from './sort';\nimport { isFacetFieldDef } from './spec/facet';\nimport { getTimeUnitParts, isBinnedTimeUnit, isLocalSingleTimeUnit, normalizeTimeUnit, timeUnitToString } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { flatAccessWithDatum, getFirstDefined, hasProperty, internalField, omit, removePathFromField, replacePathInField, stringify, titleCase } from './util';\nimport { isSignalRef } from './vega.schema';\nexport function isConditionalParameter(c) {\n  return hasProperty(c, 'param');\n}\nexport function isRepeatRef(field) {\n  return !isString(field) && hasProperty(field, 'repeat');\n}\nexport function toFieldDefBase(fieldDef) {\n  const {\n    field,\n    timeUnit,\n    bin,\n    aggregate\n  } = fieldDef;\n  return {\n    ...(timeUnit ? {\n      timeUnit\n    } : {}),\n    ...(bin ? {\n      bin\n    } : {}),\n    ...(aggregate ? {\n      aggregate\n    } : {}),\n    field\n  };\n}\nexport function isSortableFieldDef(fieldDef) {\n  return hasProperty(fieldDef, 'sort');\n}\nexport function getBandPosition(_ref) {\n  let {\n    fieldDef,\n    fieldDef2,\n    markDef: mark,\n    config\n  } = _ref;\n  if (isFieldOrDatumDef(fieldDef) && fieldDef.bandPosition !== undefined) {\n    return fieldDef.bandPosition;\n  }\n  if (isFieldDef(fieldDef)) {\n    const {\n      timeUnit,\n      bin\n    } = fieldDef;\n    if (timeUnit && !fieldDef2) {\n      return getMarkConfig('timeUnitBandPosition', mark, config);\n    } else if (isBinning(bin)) {\n      return 0.5;\n    }\n  }\n  return undefined;\n}\nexport function getBandSize(_ref2) {\n  let {\n    channel,\n    fieldDef,\n    fieldDef2,\n    markDef: mark,\n    config,\n    scaleType,\n    useVlSizeChannel\n  } = _ref2;\n  const sizeChannel = getSizeChannel(channel);\n  const size = getMarkPropOrConfig(useVlSizeChannel ? 'size' : sizeChannel, mark, config, {\n    vgChannel: sizeChannel\n  });\n  if (size !== undefined) {\n    return size;\n  }\n  if (isFieldDef(fieldDef)) {\n    const {\n      timeUnit,\n      bin\n    } = fieldDef;\n    if (timeUnit && !fieldDef2) {\n      return {\n        band: getMarkConfig('timeUnitBandSize', mark, config)\n      };\n    } else if (isBinning(bin) && !hasDiscreteDomain(scaleType)) {\n      return {\n        band: 1\n      };\n    }\n  }\n  if (isRectBasedMark(mark.type)) {\n    if (scaleType) {\n      if (hasDiscreteDomain(scaleType)) {\n        return config[mark.type]?.discreteBandSize || {\n          band: 1\n        };\n      } else {\n        return config[mark.type]?.continuousBandSize;\n      }\n    }\n    return config[mark.type]?.discreteBandSize;\n  }\n  return undefined;\n}\nexport function hasBandEnd(fieldDef, fieldDef2, markDef, config) {\n  if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {\n    // Need to check bandPosition because non-rect marks (e.g., point) with timeUnit\n    // doesn't have to use bandEnd if there is no bandPosition.\n    return getBandPosition({\n      fieldDef,\n      fieldDef2,\n      markDef,\n      config\n    }) !== undefined;\n  }\n  return false;\n}\nexport function isOrderOnlyDef(orderDef) {\n  return hasProperty(orderDef, 'sort') && !hasProperty(orderDef, 'field');\n}\nexport function isConditionalDef(channelDef) {\n  return hasProperty(channelDef, 'condition');\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef(channelDef) {\n  const condition = channelDef?.['condition'];\n  return !!condition && !isArray(condition) && isFieldDef(condition);\n}\nexport function hasConditionalFieldOrDatumDef(channelDef) {\n  const condition = channelDef?.['condition'];\n  return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n  const condition = channelDef?.['condition'];\n  return !!condition && (isArray(condition) || isValueDef(condition));\n}\nexport function isFieldDef(channelDef) {\n  return hasProperty(channelDef, 'field') || channelDef?.aggregate === 'count';\n}\nexport function channelDefType(channelDef) {\n  return channelDef?.['type'];\n}\nexport function isDatumDef(channelDef) {\n  return hasProperty(channelDef, 'datum');\n}\nexport function isContinuousFieldOrDatumDef(cd) {\n  // TODO: make datum support DateTime object\n  return isTypedFieldDef(cd) && !isDiscrete(cd) || isNumericDataDef(cd);\n}\nexport function isUnbinnedQuantitativeFieldOrDatumDef(cd) {\n  // TODO: make datum support DateTime object\n  return isTypedFieldDef(cd) && cd.type === 'quantitative' && !cd.bin || isNumericDataDef(cd);\n}\nexport function isNumericDataDef(cd) {\n  return isDatumDef(cd) && isNumber(cd.datum);\n}\nexport function isFieldOrDatumDef(channelDef) {\n  return isFieldDef(channelDef) || isDatumDef(channelDef);\n}\nexport function isTypedFieldDef(channelDef) {\n  return channelDef && (hasProperty(channelDef, 'field') || channelDef['aggregate'] === 'count') && hasProperty(channelDef, 'type');\n}\nexport function isValueDef(channelDef) {\n  return hasProperty(channelDef, 'value');\n}\nexport function isScaleFieldDef(channelDef) {\n  return hasProperty(channelDef, 'scale') || hasProperty(channelDef, 'sort');\n}\nexport function isPositionFieldOrDatumDef(channelDef) {\n  return hasProperty(channelDef, 'axis') || hasProperty(channelDef, 'stack') || hasProperty(channelDef, 'impute');\n}\nexport function isMarkPropFieldOrDatumDef(channelDef) {\n  return hasProperty(channelDef, 'legend');\n}\nexport function isStringFieldOrDatumDef(channelDef) {\n  return hasProperty(channelDef, 'format') || hasProperty(channelDef, 'formatType');\n}\nexport function toStringFieldDef(fieldDef) {\n  // omit properties that don't exist in string field defs\n  return omit(fieldDef, ['legend', 'axis', 'header', 'scale']);\n}\nfunction isOpFieldDef(fieldDef) {\n  return hasProperty(fieldDef, 'op');\n}\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(fieldDef) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n  let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n  if (isCount(fieldDef)) {\n    field = internalField('count');\n  } else {\n    let fn;\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else {\n        const {\n          bin,\n          aggregate,\n          timeUnit\n        } = fieldDef;\n        if (isBinning(bin)) {\n          fn = binToString(bin);\n          suffix = (opt.binSuffix ?? '') + (opt.suffix ?? '');\n        } else if (aggregate) {\n          if (isArgmaxDef(aggregate)) {\n            argAccessor = `[\"${field}\"]`;\n            field = `argmax_${aggregate.argmax}`;\n          } else if (isArgminDef(aggregate)) {\n            argAccessor = `[\"${field}\"]`;\n            field = `argmin_${aggregate.argmin}`;\n          } else {\n            fn = String(aggregate);\n          }\n        } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n          fn = timeUnitToString(timeUnit);\n          suffix = (!['range', 'mid'].includes(opt.binSuffix) && opt.binSuffix || '') + (opt.suffix ?? '');\n        }\n      }\n    }\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n  if (opt.forAs) {\n    return removePathFromField(field);\n  } else if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr) + argAccessor;\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field) + argAccessor;\n  }\n}\nexport function isDiscrete(def) {\n  switch (def.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n    case 'quantitative':\n      return isFieldDef(def) && !!def.bin;\n    case 'temporal':\n      return false;\n  }\n  throw new Error(log.message.invalidFieldType(def.type));\n}\nexport function isDiscretizing(def) {\n  return isScaleFieldDef(def) && isContinuousToDiscrete(def.scale?.type);\n}\nexport function isCount(fieldDef) {\n  return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n  const {\n    field,\n    bin,\n    timeUnit,\n    aggregate\n  } = fieldDef;\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (isBinning(bin)) {\n    return `${field} (binned)`;\n  } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n    const unit = normalizeTimeUnit(timeUnit)?.unit;\n    if (unit) {\n      return `${field} (${getTimeUnitParts(unit).join('-')})`;\n    }\n  } else if (aggregate) {\n    if (isArgmaxDef(aggregate)) {\n      return `${field} for max ${aggregate.argmax}`;\n    } else if (isArgminDef(aggregate)) {\n      return `${field} for min ${aggregate.argmin}`;\n    } else {\n      return `${titleCase(aggregate)} of ${field}`;\n    }\n  }\n  return field;\n}\nexport function functionalTitleFormatter(fieldDef) {\n  const {\n    aggregate,\n    bin,\n    timeUnit,\n    field\n  } = fieldDef;\n  if (isArgmaxDef(aggregate)) {\n    return `${field} for argmax(${aggregate.argmax})`;\n  } else if (isArgminDef(aggregate)) {\n    return `${field} for argmin(${aggregate.argmin})`;\n  }\n  const timeUnitParams = timeUnit && !isBinnedTimeUnit(timeUnit) ? normalizeTimeUnit(timeUnit) : undefined;\n  const fn = aggregate || timeUnitParams?.unit || timeUnitParams?.maxbins && 'timeunit' || isBinning(bin) && 'bin';\n  return fn ? `${fn.toUpperCase()}(${field})` : field;\n}\nexport const defaultTitleFormatter = (fieldDef, config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n    case 'functional':\n      return functionalTitleFormatter(fieldDef);\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\nlet titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n  titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldOrDatumDef, config, _ref3) {\n  let {\n    allowDisabling,\n    includeDefault = true\n  } = _ref3;\n  const guideTitle = getGuide(fieldOrDatumDef)?.title;\n  if (!isFieldDef(fieldOrDatumDef)) {\n    return guideTitle ?? fieldOrDatumDef.title;\n  }\n  const fieldDef = fieldOrDatumDef;\n  const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n  if (allowDisabling) {\n    return getFirstDefined(guideTitle, fieldDef.title, def);\n  } else {\n    return guideTitle ?? fieldDef.title ?? def;\n  }\n}\nexport function getGuide(fieldDef) {\n  if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {\n    return fieldDef.axis;\n  } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {\n    return fieldDef.legend;\n  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n    return fieldDef.header;\n  }\n  return undefined;\n}\nexport function defaultTitle(fieldDef, config) {\n  return titleFormatter(fieldDef, config);\n}\nexport function getFormatMixins(fieldDef) {\n  if (isStringFieldOrDatumDef(fieldDef)) {\n    const {\n      format,\n      formatType\n    } = fieldDef;\n    return {\n      format,\n      formatType\n    };\n  } else {\n    const guide = getGuide(fieldDef) ?? {};\n    const {\n      format,\n      formatType\n    } = guide;\n    return {\n      format,\n      formatType\n    };\n  }\n}\nexport function defaultType(fieldDef, channel) {\n  switch (channel) {\n    case 'latitude':\n    case 'longitude':\n      return 'quantitative';\n    case 'row':\n    case 'column':\n    case 'facet':\n    case 'shape':\n    case 'strokeDash':\n      return 'nominal';\n    case 'order':\n      return 'ordinal';\n  }\n  if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {\n    return 'ordinal';\n  }\n  const {\n    aggregate,\n    bin,\n    timeUnit\n  } = fieldDef;\n  if (timeUnit) {\n    return 'temporal';\n  }\n  if (bin || aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n    return 'quantitative';\n  }\n  if (isScaleFieldDef(fieldDef) && fieldDef.scale?.type) {\n    switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {\n      case 'numeric':\n      case 'discretizing':\n        return 'quantitative';\n      case 'time':\n        return 'temporal';\n    }\n  }\n  return 'nominal';\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef(channelDef) {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\nexport function getFieldOrDatumDef(channelDef) {\n  if (isFieldOrDatumDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function initChannelDef(channelDef, channel, config) {\n  let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {\n      value: channelDef\n    };\n  }\n  // If a fieldDef contains a field, we need type.\n  if (isFieldOrDatumDef(channelDef)) {\n    return initFieldOrDatumDef(channelDef, channel, config, opt);\n  } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n    return {\n      ...channelDef,\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt)\n    };\n  }\n  return channelDef;\n}\nexport function initFieldOrDatumDef(fd, channel, config, opt) {\n  if (isStringFieldOrDatumDef(fd)) {\n    const {\n      format,\n      formatType,\n      ...rest\n    } = fd;\n    if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n      log.warn(log.message.customFormatTypeNotAllowed(channel));\n      return initFieldOrDatumDef(rest, channel, config, opt);\n    }\n  } else {\n    const guideType = isPositionFieldOrDatumDef(fd) ? 'axis' : isMarkPropFieldOrDatumDef(fd) ? 'legend' : isFacetFieldDef(fd) ? 'header' : null;\n    if (guideType && fd[guideType]) {\n      const {\n        format,\n        formatType,\n        ...newGuide\n      } = fd[guideType];\n      if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n        log.warn(log.message.customFormatTypeNotAllowed(channel));\n        return initFieldOrDatumDef({\n          ...fd,\n          [guideType]: newGuide\n        }, channel, config, opt);\n      }\n    }\n  }\n  if (isFieldDef(fd)) {\n    return initFieldDef(fd, channel, opt);\n  }\n  return initDatumDef(fd);\n}\nfunction initDatumDef(datumDef) {\n  let type = datumDef['type'];\n  if (type) {\n    return datumDef;\n  }\n  const {\n    datum\n  } = datumDef;\n  type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;\n  return {\n    ...datumDef,\n    type\n  };\n}\nexport function initFieldDef(fd, channel) {\n  let {\n    compositeMark = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    aggregate,\n    timeUnit,\n    bin,\n    field\n  } = fd;\n  const fieldDef = {\n    ...fd\n  };\n  // Drop invalid aggregate\n  if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n    log.warn(log.message.invalidAggregate(aggregate));\n    delete fieldDef.aggregate;\n  }\n  // Normalize Time Unit\n  if (timeUnit) {\n    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n  }\n  if (field) {\n    fieldDef.field = `${field}`;\n  }\n  // Normalize bin\n  if (isBinning(bin)) {\n    fieldDef.bin = normalizeBin(bin, channel);\n  }\n  if (isBinned(bin) && !isXorY(channel)) {\n    log.warn(log.message.channelShouldNotBeUsedForBinned(channel));\n  }\n  // Normalize Type\n  if (isTypedFieldDef(fieldDef)) {\n    const {\n      type\n    } = fieldDef;\n    const fullType = getFullName(type);\n    if (type !== fullType) {\n      // convert short type to full type\n      fieldDef.type = fullType;\n    }\n    if (type !== 'quantitative') {\n      if (isCountingAggregateOp(aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));\n        fieldDef.type = 'quantitative';\n      }\n    }\n  } else if (!isSecondaryRangeChannel(channel)) {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef, channel);\n    fieldDef['type'] = newType;\n  }\n  if (isTypedFieldDef(fieldDef)) {\n    const {\n      compatible,\n      warning\n    } = channelCompatibility(fieldDef, channel) || {};\n    if (compatible === false) {\n      log.warn(warning);\n    }\n  }\n  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n    const {\n      sort\n    } = fieldDef;\n    if (isSortByChannel(sort)) {\n      return {\n        ...fieldDef,\n        sort: {\n          encoding: sort\n        }\n      };\n    }\n    const sub = sort.substring(1);\n    if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n      return {\n        ...fieldDef,\n        sort: {\n          encoding: sub,\n          order: 'descending'\n        }\n      };\n    }\n  }\n  if (isFacetFieldDef(fieldDef)) {\n    const {\n      header\n    } = fieldDef;\n    if (header) {\n      const {\n        orient,\n        ...rest\n      } = header;\n      if (orient) {\n        return {\n          ...fieldDef,\n          header: {\n            ...rest,\n            labelOrient: header.labelOrient || orient,\n            titleOrient: header.titleOrient || orient\n          }\n        };\n      }\n    }\n  }\n  return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n  if (isBoolean(bin)) {\n    return {\n      maxbins: autoMaxBins(channel)\n    };\n  } else if (bin === 'binned') {\n    return {\n      binned: true\n    };\n  } else if (!bin.maxbins && !bin.step) {\n    return {\n      ...bin,\n      maxbins: autoMaxBins(channel)\n    };\n  } else {\n    return bin;\n  }\n}\nconst COMPATIBLE = {\n  compatible: true\n};\nexport function channelCompatibility(fieldDef, channel) {\n  const type = fieldDef.type;\n  if (type === 'geojson' && channel !== 'shape') {\n    return {\n      compatible: false,\n      warning: `Channel ${channel} should not be used with a geojson data.`\n    };\n  }\n  switch (channel) {\n    case ROW:\n    case COLUMN:\n    case FACET:\n      if (!isDiscrete(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.channelShouldBeDiscrete(channel)\n        };\n      }\n      return COMPATIBLE;\n    case X:\n    case Y:\n    case XOFFSET:\n    case YOFFSET:\n    case COLOR:\n    case FILL:\n    case STROKE:\n    case TEXT:\n    case DETAIL:\n    case KEY:\n    case TOOLTIP:\n    case HREF:\n    case URL:\n    case ANGLE:\n    case THETA:\n    case RADIUS:\n    case DESCRIPTION:\n      return COMPATIBLE;\n    case LONGITUDE:\n    case LONGITUDE2:\n    case LATITUDE:\n    case LATITUDE2:\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n      return COMPATIBLE;\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    case STROKEWIDTH:\n    case SIZE:\n    case THETA2:\n    case RADIUS2:\n    case X2:\n    case Y2:\n      if (type === 'nominal' && !fieldDef['sort']) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n      return COMPATIBLE;\n    case SHAPE:\n    case STROKEDASH:\n      if (!isDiscrete(fieldDef) && !isDiscretizing(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.channelShouldBeDiscreteOrDiscretizing(channel)\n        };\n      }\n      return COMPATIBLE;\n    case ORDER:\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n      return COMPATIBLE;\n  }\n}\n/**\n * Check if the field def uses a time format or does not use any format but is temporal\n * (this does not cover field defs that are temporal but use a number format).\n */\nexport function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef) {\n  const {\n    formatType\n  } = getFormatMixins(fieldOrDatumDef);\n  return formatType === 'time' || !formatType && isTimeFieldDef(fieldOrDatumDef);\n}\n/**\n * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n */\nexport function isTimeFieldDef(def) {\n  return def && (def['type'] === 'temporal' || isFieldDef(def) && !!def.timeUnit);\n}\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(v, _ref4) {\n  let {\n    timeUnit,\n    type,\n    wrapTime,\n    undefinedIfExprNotRequired\n  } = _ref4;\n  const unit = timeUnit && normalizeTimeUnit(timeUnit)?.unit;\n  let isTime = unit || type === 'temporal';\n  let expr;\n  if (isExprRef(v)) {\n    expr = v.expr;\n  } else if (isSignalRef(v)) {\n    expr = v.signal;\n  } else if (isDateTime(v)) {\n    isTime = true;\n    expr = dateTimeToExpr(v);\n  } else if (isString(v) || isNumber(v)) {\n    if (isTime) {\n      expr = `datetime(${stringify(v)})`;\n      if (isLocalSingleTimeUnit(unit)) {\n        // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit\n        if (isNumber(v) && v < 10000 || isString(v) && isNaN(Date.parse(v))) {\n          expr = dateTimeToExpr({\n            [unit]: v\n          });\n        }\n      }\n    }\n  }\n  if (expr) {\n    return wrapTime && isTime ? `time(${expr})` : expr;\n  }\n  // number or boolean or normal string\n  return undefinedIfExprNotRequired ? undefined : stringify(v);\n}\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(fieldOrDatumDef, values) {\n  const {\n    type\n  } = fieldOrDatumDef;\n  return values.map(v => {\n    const timeUnit = isFieldDef(fieldOrDatumDef) && !isBinnedTimeUnit(fieldOrDatumDef.timeUnit) ? fieldOrDatumDef.timeUnit : undefined;\n    const expr = valueExpr(v, {\n      timeUnit,\n      type,\n      undefinedIfExprNotRequired: true\n    });\n    // return signal for the expression if we need an expression\n    if (expr !== undefined) {\n      return {\n        signal: expr\n      };\n    }\n    // otherwise just return the original value\n    return v;\n  });\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef, channel) {\n  if (!isBinning(fieldDef.bin)) {\n    console.warn('Only call this method for binned field defs.');\n    return false;\n  }\n  // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n  // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n  return isScaleChannel(channel) && ['ordinal', 'nominal'].includes(fieldDef.type);\n}","map":{"version":3,"names":["isArray","isBoolean","isNumber","isString","isAggregateOp","isArgmaxDef","isArgminDef","isCountingAggregateOp","autoMaxBins","binToString","isBinned","isBinning","ANGLE","COLOR","COLUMN","DESCRIPTION","DETAIL","FACET","FILL","FILLOPACITY","getSizeChannel","HREF","isScaleChannel","isSecondaryRangeChannel","isXorY","KEY","LATITUDE","LATITUDE2","LONGITUDE","LONGITUDE2","OPACITY","ORDER","RADIUS","RADIUS2","ROW","SHAPE","SIZE","STROKE","STROKEDASH","STROKEOPACITY","STROKEWIDTH","TEXT","THETA","THETA2","TOOLTIP","URL","X","X2","XOFFSET","Y","Y2","YOFFSET","getMarkConfig","getMarkPropOrConfig","isCustomFormatType","dateTimeToExpr","isDateTime","isExprRef","log","isRectBasedMark","hasDiscreteDomain","isContinuousToDiscrete","SCALE_CATEGORY_INDEX","isSortByChannel","isFacetFieldDef","getTimeUnitParts","isBinnedTimeUnit","isLocalSingleTimeUnit","normalizeTimeUnit","timeUnitToString","getFullName","QUANTITATIVE","flatAccessWithDatum","getFirstDefined","hasProperty","internalField","omit","removePathFromField","replacePathInField","stringify","titleCase","isSignalRef","isConditionalParameter","c","isRepeatRef","field","toFieldDefBase","fieldDef","timeUnit","bin","aggregate","isSortableFieldDef","getBandPosition","_ref","fieldDef2","markDef","mark","config","isFieldOrDatumDef","bandPosition","undefined","isFieldDef","getBandSize","_ref2","channel","scaleType","useVlSizeChannel","sizeChannel","size","vgChannel","band","type","discreteBandSize","continuousBandSize","hasBandEnd","isTypedFieldDef","isOrderOnlyDef","orderDef","isConditionalDef","channelDef","hasConditionalFieldDef","condition","hasConditionalFieldOrDatumDef","hasConditionalValueDef","isValueDef","channelDefType","isDatumDef","isContinuousFieldOrDatumDef","cd","isDiscrete","isNumericDataDef","isUnbinnedQuantitativeFieldOrDatumDef","datum","isScaleFieldDef","isPositionFieldOrDatumDef","isMarkPropFieldOrDatumDef","isStringFieldOrDatumDef","toStringFieldDef","isOpFieldDef","vgField","opt","arguments","length","prefix","suffix","argAccessor","isCount","fn","nofn","op","binSuffix","argmax","argmin","String","includes","forAs","expr","def","Error","message","invalidFieldType","isDiscretizing","scale","verbalTitleFormatter","countTitle","unit","join","functionalTitleFormatter","timeUnitParams","maxbins","toUpperCase","defaultTitleFormatter","fieldTitle","titleFormatter","setTitleFormatter","formatter","resetTitleFormatter","title","fieldOrDatumDef","_ref3","allowDisabling","includeDefault","guideTitle","getGuide","defaultTitle","axis","legend","header","getFormatMixins","format","formatType","guide","defaultType","sort","getFieldDef","getFieldOrDatumDef","initChannelDef","primitiveType","warn","primitiveChannelDef","value","initFieldOrDatumDef","fd","rest","customFormatTypes","customFormatTypeNotAllowed","guideType","newGuide","initFieldDef","initDatumDef","datumDef","compositeMark","invalidAggregate","normalizeBin","channelShouldNotBeUsedForBinned","fullType","invalidFieldTypeForCountAggregate","newType","compatible","warning","channelCompatibility","encoding","sub","substring","charAt","order","orient","labelOrient","titleOrient","binned","step","COMPATIBLE","channelShouldBeDiscrete","channelShouldBeDiscreteOrDiscretizing","isFieldOrDatumDefForTimeFormat","isTimeFieldDef","valueExpr","v","_ref4","wrapTime","undefinedIfExprNotRequired","isTime","signal","isNaN","Date","parse","valueArray","values","map","binRequiresRange","console"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\channeldef.ts"],"sourcesContent":["import {Gradient, ScaleType, SignalRef, Text} from 'vega';\nimport {isArray, isBoolean, isNumber, isString} from 'vega-util';\nimport {Aggregate, isAggregateOp, isArgmaxDef, isArgminDef, isCountingAggregateOp} from './aggregate';\nimport {Axis} from './axis';\nimport {autoMaxBins, Bin, BinParams, binToString, isBinned, isBinning} from './bin';\nimport {\n  ANGLE,\n  Channel,\n  COLOR,\n  COLUMN,\n  DESCRIPTION,\n  DETAIL,\n  ExtendedChannel,\n  FACET,\n  FILL,\n  FILLOPACITY,\n  getSizeChannel,\n  HREF,\n  isScaleChannel,\n  isSecondaryRangeChannel,\n  isXorY,\n  KEY,\n  LATITUDE,\n  LATITUDE2,\n  LONGITUDE,\n  LONGITUDE2,\n  OPACITY,\n  ORDER,\n  PolarPositionScaleChannel,\n  PositionScaleChannel,\n  RADIUS,\n  RADIUS2,\n  ROW,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEDASH,\n  STROKEOPACITY,\n  STROKEWIDTH,\n  TEXT,\n  THETA,\n  THETA2,\n  TOOLTIP,\n  URL,\n  X,\n  X2,\n  XOFFSET,\n  Y,\n  Y2,\n  YOFFSET\n} from './channel';\nimport {getMarkConfig, getMarkPropOrConfig} from './compile/common';\nimport {isCustomFormatType} from './compile/format';\nimport {CompositeAggregate} from './compositemark';\nimport {Config} from './config';\nimport {DateTime, dateTimeToExpr, isDateTime} from './datetime';\nimport {Encoding} from './encoding';\nimport {ExprRef, isExprRef} from './expr';\nimport {Guide, GuideEncodingConditionalValueDef, TitleMixins} from './guide';\nimport {ImputeParams} from './impute';\nimport {Legend} from './legend';\nimport * as log from './log';\nimport {LogicalComposition} from './logical';\nimport {isRectBasedMark, Mark, MarkDef, RelativeBandSize} from './mark';\nimport {ParameterPredicate, Predicate} from './predicate';\nimport {hasDiscreteDomain, isContinuousToDiscrete, Scale, SCALE_CATEGORY_INDEX} from './scale';\nimport {isSortByChannel, Sort, SortOrder} from './sort';\nimport {isFacetFieldDef} from './spec/facet';\nimport {StackOffset} from './stack';\nimport {\n  BinnedTimeUnit,\n  getTimeUnitParts,\n  isBinnedTimeUnit,\n  isLocalSingleTimeUnit,\n  normalizeTimeUnit,\n  TimeUnit,\n  TimeUnitParams,\n  timeUnitToString\n} from './timeunit';\nimport {AggregatedFieldDef, WindowFieldDef} from './transform';\nimport {getFullName, QUANTITATIVE, StandardType, Type} from './type';\nimport {\n  Dict,\n  flatAccessWithDatum,\n  getFirstDefined,\n  hasProperty,\n  internalField,\n  omit,\n  removePathFromField,\n  replacePathInField,\n  stringify,\n  titleCase\n} from './util';\nimport {isSignalRef} from './vega.schema';\n\nexport type PrimitiveValue = number | string | boolean | null;\n\nexport type Value<ES extends ExprRef | SignalRef = ExprRef | SignalRef> =\n  | PrimitiveValue\n  | number[]\n  | Gradient\n  | Text\n  | ES;\n\n/**\n * Definition object for a constant value (primitive value or gradient definition) of an encoding channel.\n */\nexport interface ValueDef<V extends Value = Value> {\n  /**\n   * A constant value in visual domain (e.g., `\"red\"` / `\"#0099ff\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).\n   */\n  value: V;\n}\n\nexport type PositionValueDef = ValueDef<number | 'width' | 'height' | ExprRef | SignalRef>;\nexport type NumericValueDef = ValueDef<number | ExprRef | SignalRef>;\n\n/**\n * A ValueDef with Condition<ValueDef | FieldDef> where either the condition or the value are optional.\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\n/**\n * @minProperties 1\n */\nexport type ValueDefWithCondition<F extends FieldDef<any> | DatumDef<any>, V extends Value = Value> = Partial<\n  ValueDef<V | ExprRef | SignalRef>\n> & {\n  /**\n   * A field definition or one or more value definition(s) with a parameter predicate.\n   */\n  condition?:\n    | Conditional<F>\n    | Conditional<ValueDef<V | ExprRef | SignalRef>>\n    | Conditional<ValueDef<V | ExprRef | SignalRef>>[];\n};\n\nexport type StringValueDefWithCondition<F extends Field, T extends Type = StandardType> = ValueDefWithCondition<\n  MarkPropFieldOrDatumDef<F, T>,\n  string | null\n>;\nexport type TypeForShape = 'nominal' | 'ordinal' | 'geojson';\n\nexport type ConditionalTemplate = FieldDef<any> | DatumDef | ValueDef<any> | ExprRef | SignalRef;\n\nexport type Conditional<CD extends ConditionalTemplate> = ConditionalPredicate<CD> | ConditionalParameter<CD>;\n\nexport type ConditionalPredicate<CD extends ConditionalTemplate> = {\n  /**\n   * Predicate for triggering the condition\n   */\n  test: LogicalComposition<Predicate>;\n} & CD;\n\nexport type ConditionalParameter<CD extends ConditionalTemplate> = ParameterPredicate & CD;\n\nexport function isConditionalParameter<T extends ConditionalTemplate>(c: Conditional<T>): c is ConditionalParameter<T> {\n  return hasProperty(c, 'param');\n}\n\nexport interface ConditionValueDefMixins<V extends Value = Value> {\n  /**\n   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\n   *\n   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)\n   * since Vega-Lite only allows at most one encoded field per encoding channel.\n   */\n  condition?: Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n}\n\n/**\n * A FieldDef with Condition<ValueDef>\n * {\n *   condition: {value: ...},\n *   field: ...,\n *   ...\n * }\n */\n\nexport type FieldOrDatumDefWithCondition<F extends FieldDef<any, any> | DatumDef<any>, V extends Value = Value> = F &\n  ConditionValueDefMixins<V | ExprRef | SignalRef>;\n\nexport type MarkPropDef<F extends Field, V extends Value, T extends Type = StandardType> =\n  | FieldOrDatumDefWithCondition<MarkPropFieldDef<F, T>, V>\n  | FieldOrDatumDefWithCondition<DatumDef<F>, V>\n  | ValueDefWithCondition<MarkPropFieldOrDatumDef<F, T>, V>;\n\nexport type ColorDef<F extends Field> = MarkPropDef<F, Gradient | string | null>;\nexport type NumericMarkPropDef<F extends Field> = MarkPropDef<F, number>;\n\nexport type NumericArrayMarkPropDef<F extends Field> = MarkPropDef<F, number[]>;\n\nexport type ShapeDef<F extends Field> = MarkPropDef<F, string | null, TypeForShape>;\n\nexport type StringFieldDefWithCondition<F extends Field> = FieldOrDatumDefWithCondition<StringFieldDef<F>, string>;\nexport type TextDef<F extends Field> =\n  | FieldOrDatumDefWithCondition<StringFieldDef<F>, Text>\n  | FieldOrDatumDefWithCondition<StringDatumDef<F>, Text>\n  | ValueDefWithCondition<StringFieldDef<F>, Text>;\n\n/**\n * A ValueDef with optional Condition<ValueDef | FieldDef>\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\n/**\n * Reference to a repeated value.\n */\nexport interface RepeatRef {\n  repeat: 'row' | 'column' | 'repeat' | 'layer';\n}\n\nexport type FieldName = string;\nexport type Field = FieldName | RepeatRef;\n\nexport function isRepeatRef(field: Field | any): field is RepeatRef {\n  return !isString(field) && hasProperty(field, 'repeat');\n}\n\n/** @@hidden */\nexport type HiddenCompositeAggregate = CompositeAggregate;\n\nexport interface FieldDefBase<F, B extends Bin = Bin> extends BandMixins {\n  /**\n   * __Required.__ A string defining the name of the field from which to pull a data value\n   * or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n   *\n   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\n   *\n   * __Notes:__\n   * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`).\n   * If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`).\n   * See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n   * 2) `field` is not required if `aggregate` is `count`.\n   */\n  field?: F;\n\n  // function\n\n  /**\n   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\n   * or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n   *\n   * __Default value:__ `undefined` (None)\n   *\n   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.\n   */\n  timeUnit?: TimeUnit | BinnedTimeUnit | TimeUnitParams;\n\n  /**\n   * Aggregation function for the field\n   * (e.g., `\"mean\"`, `\"sum\"`, `\"median\"`, `\"min\"`, `\"max\"`, `\"count\"`).\n   *\n   * __Default value:__ `undefined` (None)\n   *\n   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.\n   */\n  aggregate?: Aggregate | HiddenCompositeAggregate;\n\n  /**\n   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#bin-parameters), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\"binned\"`).\n   *\n   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html#bin-parameters) will be applied.\n   *\n   * - If `\"binned\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n   *\n   * __Default value:__ `false`\n   *\n   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.\n   */\n  bin?: B;\n}\n\nexport function toFieldDefBase(fieldDef: FieldDef<string>): FieldDefBase<string> {\n  const {field, timeUnit, bin, aggregate} = fieldDef;\n  return {\n    ...(timeUnit ? {timeUnit} : {}),\n    ...(bin ? {bin} : {}),\n    ...(aggregate ? {aggregate} : {}),\n    field\n  };\n}\n\nexport interface TypeMixins<T extends Type> {\n  /**\n   * The type of measurement (`\"quantitative\"`, `\"temporal\"`, `\"ordinal\"`, or `\"nominal\"`) for the encoded field or constant value (`datum`).\n   * It can also be a `\"geojson\"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).\n   *\n   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if:\n   * (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`\n   * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.\n   *\n   * __Default value:__\n   *\n   * 1) For a data `field`, `\"nominal\"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:\n   * - `\"quantitative\"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `\"argmin\"` and `\"argmax\"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).\n   * - `\"temporal\"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale\n   * - `\"ordinal\"` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.\n   *\n   * 2) For a constant value in data domain (`datum`):\n   * - `\"quantitative\"` if the datum is a number\n   * - `\"nominal\"` if the datum is a string\n   * - `\"temporal\"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)\n   *\n   * __Note:__\n   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n   * - Data values for a temporal field can be either a date-time string (e.g., `\"2015-03-07 12:32:17\"`, `\"17:01\"`, `\"2015-03-16\"`. `\"2015\"`) or a timestamp number (e.g., `1552199579097`).\n   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\"quantitative\"` (for using a linear bin scale) or [`\"ordinal\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\"temporal\"` (default, for using a temporal scale) or [`\"ordinal\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\"cat\"` using `{\"aggregate\": \"distinct\", \"field\": \"cat\"}`. The `\"type\"` of the aggregate output is `\"quantitative\"`.\n   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).\n   *\n   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.\n   */\n  type?: T;\n}\n\n/**\n *  Definition object for a data field, its type and transformation of an encoding channel.\n */\nexport type TypedFieldDef<\n  F extends Field,\n  T extends Type = any,\n  B extends Bin = boolean | BinParams | 'binned' | null // This is equivalent to Bin but we use the full form so the docs has detailed types\n> = FieldDefBase<F, B> & TitleMixins & TypeMixins<T>;\n\nexport interface SortableFieldDef<\n  F extends Field,\n  T extends Type = StandardType,\n  B extends Bin = boolean | BinParams | null\n> extends TypedFieldDef<F, T, B> {\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in JavaScript.\n   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\"x\"` or `\"y\"`) with an optional minus prefix for descending sort (e.g., `\"-x\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\"sort\": \"-x\"` is equivalent to `\"sort\": {\"encoding\": \"x\", \"order\": \"descending\"}`.\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\n   *\n   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.\n   */\n  sort?: Sort<F>;\n}\n\nexport function isSortableFieldDef<F extends Field>(fieldDef: FieldDef<F>): fieldDef is SortableFieldDef<F> {\n  return hasProperty(fieldDef, 'sort');\n}\n\nexport type ScaleFieldDef<\n  F extends Field,\n  T extends Type = StandardType,\n  B extends Bin = boolean | BinParams | null\n> = SortableFieldDef<F, T, B> & ScaleMixins;\n\nexport interface ScaleMixins {\n  /**\n   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n   *\n   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n   *\n   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\n   *\n   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.\n   */\n  scale?: Scale | null;\n}\n\nexport type OffsetDef<F extends Field, T extends Type = StandardType> =\n  | ScaleFieldDef<F, T>\n  | ScaleDatumDef<F>\n  | ValueDef<number>;\n\nexport interface DatumDef<\n  F extends Field = string,\n  V extends PrimitiveValue | DateTime | ExprRef | SignalRef = PrimitiveValue | DateTime | ExprRef | SignalRef\n> extends Partial<TypeMixins<Type>>,\n    BandMixins,\n    TitleMixins {\n  /**\n   * A constant value in data domain.\n   */\n  datum?: F extends RepeatRef ? V | RepeatRef : V;\n  // only apply Repeatref if field (F) can be RepeatRef\n  // FIXME(https://github.com/microsoft/TypeScript/issues/37586):\n  // `F extends RepeatRef` probably should be `RepeatRef extends F` but there is likely a bug in TS.\n}\n\nexport interface FormatMixins {\n  /**\n   * When used with the default `\"number\"` and `\"time\"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.\n   *\n   * - If the format type is `\"number\"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).\n   * - If the format type is `\"time\"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).\n   *\n   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.\n   *\n   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.\n   *\n   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.\n   */\n  format?: string | Dict<unknown>;\n\n  /**\n   * The format type for labels. One of `\"number\"`, `\"time\"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).\n   *\n   * __Default value:__\n   * - `\"time\"` for temporal fields and ordinal and nominal fields with `timeUnit`.\n   * - `\"number\"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.\n   */\n  formatType?: 'number' | 'time' | string;\n}\n\nexport type StringDatumDef<F extends Field = string> = DatumDef<F> & FormatMixins;\n\nexport type ScaleDatumDef<F extends Field = string> = ScaleMixins & DatumDef<F>;\n\n/**\n * A field definition of a secondary channel that shares a scale with another primary channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.\n */\nexport type SecondaryFieldDef<F extends Field> = FieldDefBase<F, null> & TitleMixins; // x2/y2 shouldn't have bin, but we keep bin property for simplicity of the codebase.\n\nexport type Position2Def<F extends Field> = SecondaryFieldDef<F> | DatumDef<F> | PositionValueDef;\n\nexport type SecondaryChannelDef<F extends Field> = Encoding<F>['x2' | 'y2'];\n\n/**\n * Field Def without scale (and without bin: \"binned\" support).\n */\nexport type FieldDefWithoutScale<F extends Field, T extends Type = StandardType> = TypedFieldDef<F, T>;\n\nexport type LatLongFieldDef<F extends Field> = FieldDefBase<F, null> &\n  TitleMixins &\n  Partial<TypeMixins<'quantitative'>>; // Lat long shouldn't have bin, but we keep bin property for simplicity of the codebase.\n\nexport type LatLongDef<F extends Field> = LatLongFieldDef<F> | DatumDef<F>;\n\nexport type PositionFieldDefBase<F extends Field> = ScaleFieldDef<\n  F,\n  StandardType,\n  boolean | BinParams | 'binned' | null // This is equivalent to Bin but we use the full form so the docs has detailed types\n> &\n  PositionBaseMixins;\n\nexport type PositionDatumDefBase<F extends Field> = ScaleDatumDef<F> & PositionBaseMixins;\n\nexport interface PositionBaseMixins {\n  /**\n   * Type of stacking offset if the field should be stacked.\n   * `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains.\n   * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\n   *\n   * `stack` can be one of the following values:\n   * - `\"zero\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\n   * - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized) and pie charts [with percentage tooltip](https://vega.github.io/vega-lite/docs/arc.html#tooltip)). <br/>\n   * -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\n   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\n   *\n   * __Default value:__ `zero` for plots with all of the following conditions are true:\n   * (1) the mark is `bar`, `area`, or `arc`;\n   * (2) the stacked measure channel (x or y) has a linear scale;\n   * (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\n   *\n   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.\n   */\n  stack?: StackOffset | null | boolean;\n}\n\nexport interface BandMixins {\n  /**\n   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  bandPosition?: number;\n}\n\nexport type PositionFieldDef<F extends Field> = PositionFieldDefBase<F> & PositionMixins;\n\nexport type PositionDatumDef<F extends Field> = PositionDatumDefBase<F> & PositionMixins;\n\nexport type PositionDef<F extends Field> = PositionFieldDef<F> | PositionDatumDef<F> | PositionValueDef;\n\nexport interface PositionMixins {\n  /**\n   * An object defining properties of axis's gridlines, ticks and labels.\n   * If `null`, the axis for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\n   *\n   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.\n   */\n  axis?: Axis<ExprRef | SignalRef> | null;\n\n  /**\n   * An object defining the properties of the Impute Operation to be applied.\n   * The field value of the other positional channel is taken as `key` of the `Impute` Operation.\n   * The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\n   *\n   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.\n   */\n  impute?: ImputeParams | null;\n}\n\nexport type PolarDef<F extends Field> = PositionFieldDefBase<F> | PositionDatumDefBase<F> | PositionValueDef;\n\nexport function getBandPosition({\n  fieldDef,\n  fieldDef2,\n  markDef: mark,\n  config\n}: {\n  fieldDef: FieldDef<string> | DatumDef;\n  fieldDef2?: SecondaryChannelDef<string>;\n  markDef: MarkDef<Mark, SignalRef>;\n  config: Config<SignalRef>;\n}): number {\n  if (isFieldOrDatumDef(fieldDef) && fieldDef.bandPosition !== undefined) {\n    return fieldDef.bandPosition;\n  }\n  if (isFieldDef(fieldDef)) {\n    const {timeUnit, bin} = fieldDef;\n    if (timeUnit && !fieldDef2) {\n      return getMarkConfig('timeUnitBandPosition', mark, config);\n    } else if (isBinning(bin)) {\n      return 0.5;\n    }\n  }\n\n  return undefined;\n}\n\nexport function getBandSize({\n  channel,\n  fieldDef,\n  fieldDef2,\n  markDef: mark,\n  config,\n  scaleType,\n  useVlSizeChannel\n}: {\n  channel: PositionScaleChannel | PolarPositionScaleChannel;\n  fieldDef: ChannelDef<string>;\n  fieldDef2?: SecondaryChannelDef<string>;\n  markDef: MarkDef<Mark, SignalRef>;\n  config: Config<SignalRef>;\n  scaleType: ScaleType;\n  useVlSizeChannel?: boolean;\n}): number | RelativeBandSize | SignalRef {\n  const sizeChannel = getSizeChannel(channel);\n  const size = getMarkPropOrConfig(useVlSizeChannel ? 'size' : sizeChannel, mark, config, {\n    vgChannel: sizeChannel\n  });\n\n  if (size !== undefined) {\n    return size;\n  }\n\n  if (isFieldDef(fieldDef)) {\n    const {timeUnit, bin} = fieldDef;\n\n    if (timeUnit && !fieldDef2) {\n      return {band: getMarkConfig('timeUnitBandSize', mark, config)};\n    } else if (isBinning(bin) && !hasDiscreteDomain(scaleType)) {\n      return {band: 1};\n    }\n  }\n\n  if (isRectBasedMark(mark.type)) {\n    if (scaleType) {\n      if (hasDiscreteDomain(scaleType)) {\n        return config[mark.type]?.discreteBandSize || {band: 1};\n      } else {\n        return config[mark.type]?.continuousBandSize;\n      }\n    }\n    return config[mark.type]?.discreteBandSize;\n  }\n\n  return undefined;\n}\n\nexport function hasBandEnd(\n  fieldDef: FieldDef<string>,\n  fieldDef2: SecondaryChannelDef<string>,\n  markDef: MarkDef<Mark, SignalRef>,\n  config: Config<SignalRef>\n): boolean {\n  if (isBinning(fieldDef.bin) || (fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal')) {\n    // Need to check bandPosition because non-rect marks (e.g., point) with timeUnit\n    // doesn't have to use bandEnd if there is no bandPosition.\n    return getBandPosition({fieldDef, fieldDef2, markDef, config}) !== undefined;\n  }\n  return false;\n}\n\n/**\n * Field definition of a mark property, which can contain a legend.\n */\nexport type MarkPropFieldDef<F extends Field, T extends Type = Type> = ScaleFieldDef<F, T, boolean | BinParams | null> &\n  LegendMixins;\n\nexport type MarkPropDatumDef<F extends Field> = LegendMixins & ScaleDatumDef<F>;\n\nexport type MarkPropFieldOrDatumDef<F extends Field, T extends Type = Type> =\n  | MarkPropFieldDef<F, T>\n  | MarkPropDatumDef<F>;\n\nexport interface LegendMixins {\n  /**\n   * An object defining properties of the legend.\n   * If `null`, the legend for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\n   *\n   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.\n   */\n  legend?: Legend<ExprRef | SignalRef> | null;\n}\n\n// Detail\n\n// Order Path have no scale\n\nexport type OrderFieldDef<F extends Field> = FieldDefWithoutScale<F> & OrderOnlyDef;\n\nexport interface OrderOnlyDef {\n  /**\n   * The sort order. One of `\"ascending\"` (default) or `\"descending\"`.\n   */\n  sort?: SortOrder;\n}\n\nexport function isOrderOnlyDef<F extends Field>(\n  orderDef: OrderFieldDef<F> | OrderFieldDef<F>[] | OrderValueDef | OrderOnlyDef\n): orderDef is OrderOnlyDef {\n  return hasProperty(orderDef, 'sort') && !hasProperty(orderDef, 'field');\n}\n\nexport type OrderValueDef = ConditionValueDefMixins<number> & NumericValueDef;\n\nexport interface StringFieldDef<F extends Field> extends FieldDefWithoutScale<F, StandardType>, FormatMixins {}\n\nexport type FieldDef<F extends Field, T extends Type = any> = SecondaryFieldDef<F> | TypedFieldDef<F, T>;\nexport type ChannelDef<F extends Field = string> = Encoding<F>[keyof Encoding<F>];\n\nexport function isConditionalDef<CD extends ChannelDef<any> | GuideEncodingConditionalValueDef | ExprRef | SignalRef>(\n  channelDef: CD\n): channelDef is CD & {condition: Conditional<any>} {\n  return hasProperty(channelDef, 'condition');\n}\n\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef<F extends Field>(\n  channelDef: Partial<ChannelDef<F>>\n): channelDef is {condition: Conditional<TypedFieldDef<F>>} {\n  const condition = (channelDef as any)?.['condition'];\n  return !!condition && !isArray(condition) && isFieldDef(condition);\n}\n\nexport function hasConditionalFieldOrDatumDef<F extends Field>(\n  channelDef: ChannelDef<F>\n): channelDef is {condition: Conditional<TypedFieldDef<F>>} {\n  const condition = (channelDef as any)?.['condition'];\n  return !!condition && !isArray(condition) && isFieldOrDatumDef(condition);\n}\n\nexport function hasConditionalValueDef<F extends Field>(\n  channelDef: ChannelDef<F>\n): channelDef is ValueDef<any> & {condition: Conditional<ValueDef<any>> | Conditional<ValueDef<any>>[]} {\n  const condition = (channelDef as any)?.['condition'];\n  return !!condition && (isArray(condition) || isValueDef(condition));\n}\n\nexport function isFieldDef<F extends Field>(\n  channelDef: Partial<ChannelDef<F>> | FieldDefBase<F> | DatumDef<F, any>\n): channelDef is FieldDefBase<F> | TypedFieldDef<F> | SecondaryFieldDef<F> {\n  return hasProperty(channelDef, 'field') || (channelDef as any)?.aggregate === 'count';\n}\n\nexport function channelDefType<F extends Field>(channelDef: ChannelDef<F>): Type | undefined {\n  return (channelDef as any)?.['type'];\n}\n\nexport function isDatumDef<F extends Field>(\n  channelDef: Partial<ChannelDef<F>> | FieldDefBase<F> | DatumDef<F, any>\n): channelDef is DatumDef<F, any> {\n  return hasProperty(channelDef, 'datum');\n}\n\nexport function isContinuousFieldOrDatumDef<F extends Field>(\n  cd: ChannelDef<F>\n): cd is TypedFieldDef<F> | DatumDef<F, number> {\n  // TODO: make datum support DateTime object\n  return (isTypedFieldDef(cd) && !isDiscrete(cd)) || isNumericDataDef(cd);\n}\n\nexport function isUnbinnedQuantitativeFieldOrDatumDef<F extends Field>(cd: ChannelDef<F>) {\n  // TODO: make datum support DateTime object\n  return (isTypedFieldDef(cd) && cd.type === 'quantitative' && !cd.bin) || isNumericDataDef(cd);\n}\n\nexport function isNumericDataDef<F extends Field>(cd: ChannelDef<F>): cd is DatumDef<F, number> {\n  return isDatumDef(cd) && isNumber(cd.datum);\n}\n\nexport function isFieldOrDatumDef<F extends Field>(\n  channelDef: Partial<ChannelDef<F>>\n): channelDef is FieldDef<F, any> | DatumDef<F> {\n  return isFieldDef(channelDef) || isDatumDef(channelDef);\n}\n\nexport function isTypedFieldDef<F extends Field>(channelDef: ChannelDef<F>): channelDef is TypedFieldDef<F> {\n  return (\n    channelDef &&\n    (hasProperty(channelDef, 'field') || (channelDef as any)['aggregate'] === 'count') &&\n    hasProperty(channelDef, 'type')\n  );\n}\n\nexport function isValueDef<F extends Field>(channelDef: Partial<ChannelDef<F>>): channelDef is ValueDef<any> {\n  return hasProperty(channelDef, 'value');\n}\n\nexport function isScaleFieldDef<F extends Field>(channelDef: ChannelDef<F>): channelDef is ScaleFieldDef<F> {\n  return hasProperty(channelDef, 'scale') || hasProperty(channelDef, 'sort');\n}\n\nexport function isPositionFieldOrDatumDef<F extends Field>(\n  channelDef: ChannelDef<F>\n): channelDef is PositionFieldDef<F> | PositionDatumDef<F> {\n  return hasProperty(channelDef, 'axis') || hasProperty(channelDef, 'stack') || hasProperty(channelDef, 'impute');\n}\n\nexport function isMarkPropFieldOrDatumDef<F extends Field>(\n  channelDef: ChannelDef<F>\n): channelDef is MarkPropFieldDef<F, any> | MarkPropDatumDef<F> {\n  return hasProperty(channelDef, 'legend');\n}\n\nexport function isStringFieldOrDatumDef<F extends Field>(\n  channelDef: ChannelDef<F>\n): channelDef is StringFieldDef<F> | StringDatumDef<F> {\n  return hasProperty(channelDef, 'format') || hasProperty(channelDef, 'formatType');\n}\n\nexport function toStringFieldDef<F extends Field>(fieldDef: FieldDef<F>): StringFieldDef<F> {\n  // omit properties that don't exist in string field defs\n  return omit(fieldDef, ['legend', 'axis', 'header', 'scale'] as any[]);\n}\n\nexport interface FieldRefOption {\n  /** Exclude bin, aggregate, timeUnit */\n  nofn?: boolean;\n  /** Wrap the field with datum, parent, or datum.datum (e.g., datum['...'] for Vega Expression */\n  expr?: 'datum' | 'parent' | 'datum.datum';\n  /** Prepend fn with custom function prefix */\n  prefix?: string;\n  /** Append suffix to the field ref for bin (default='start') */\n  binSuffix?: 'end' | 'range' | 'mid';\n  /** Append suffix to the field ref (general) */\n  suffix?: string;\n  /**\n   * Use the field name for `as` in a transform.\n   * We will not escape nested accesses because Vega transform outputs cannot be nested.\n   */\n  forAs?: boolean;\n}\n\nfunction isOpFieldDef(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef\n): fieldDef is WindowFieldDef | AggregatedFieldDef {\n  return hasProperty(fieldDef, 'op');\n}\n\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef,\n  opt: FieldRefOption = {}\n): string {\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n\n  let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n\n  if (isCount(fieldDef)) {\n    field = internalField('count');\n  } else {\n    let fn: string;\n\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else {\n        const {bin, aggregate, timeUnit} = fieldDef;\n        if (isBinning(bin)) {\n          fn = binToString(bin);\n          suffix = (opt.binSuffix ?? '') + (opt.suffix ?? '');\n        } else if (aggregate) {\n          if (isArgmaxDef(aggregate)) {\n            argAccessor = `[\"${field}\"]`;\n            field = `argmax_${aggregate.argmax}`;\n          } else if (isArgminDef(aggregate)) {\n            argAccessor = `[\"${field}\"]`;\n            field = `argmin_${aggregate.argmin}`;\n          } else {\n            fn = String(aggregate);\n          }\n        } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n          fn = timeUnitToString(timeUnit);\n          suffix = ((!['range', 'mid'].includes(opt.binSuffix) && opt.binSuffix) || '') + (opt.suffix ?? '');\n        }\n      }\n    }\n\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n\n  if (opt.forAs) {\n    return removePathFromField(field);\n  } else if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr) + argAccessor;\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field) + argAccessor;\n  }\n}\n\nexport function isDiscrete(def: TypedFieldDef<Field> | DatumDef<any, any>) {\n  switch (def.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n    case 'quantitative':\n      return isFieldDef(def) && !!def.bin;\n    case 'temporal':\n      return false;\n  }\n  throw new Error(log.message.invalidFieldType(def.type));\n}\n\nexport function isDiscretizing(def: TypedFieldDef<Field> | DatumDef<any, any>) {\n  return isScaleFieldDef(def) && isContinuousToDiscrete(def.scale?.type);\n}\n\nexport function isCount(fieldDef: FieldDefBase<Field>) {\n  return fieldDef.aggregate === 'count';\n}\n\nexport type FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => string;\n\nexport function verbalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const {field, bin, timeUnit, aggregate} = fieldDef;\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (isBinning(bin)) {\n    return `${field} (binned)`;\n  } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n    const unit = normalizeTimeUnit(timeUnit)?.unit;\n    if (unit) {\n      return `${field} (${getTimeUnitParts(unit).join('-')})`;\n    }\n  } else if (aggregate) {\n    if (isArgmaxDef(aggregate)) {\n      return `${field} for max ${aggregate.argmax}`;\n    } else if (isArgminDef(aggregate)) {\n      return `${field} for min ${aggregate.argmin}`;\n    } else {\n      return `${titleCase(aggregate)} of ${field}`;\n    }\n  }\n  return field;\n}\n\nexport function functionalTitleFormatter(fieldDef: FieldDefBase<string>) {\n  const {aggregate, bin, timeUnit, field} = fieldDef;\n  if (isArgmaxDef(aggregate)) {\n    return `${field} for argmax(${aggregate.argmax})`;\n  } else if (isArgminDef(aggregate)) {\n    return `${field} for argmin(${aggregate.argmin})`;\n  }\n\n  const timeUnitParams = timeUnit && !isBinnedTimeUnit(timeUnit) ? normalizeTimeUnit(timeUnit) : undefined;\n\n  const fn = aggregate || timeUnitParams?.unit || (timeUnitParams?.maxbins && 'timeunit') || (isBinning(bin) && 'bin');\n  return fn ? `${fn.toUpperCase()}(${field})` : field;\n}\n\nexport const defaultTitleFormatter: FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n    case 'functional':\n      return functionalTitleFormatter(fieldDef);\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\n\nlet titleFormatter = defaultTitleFormatter;\n\nexport function setTitleFormatter(formatter: FieldTitleFormatter) {\n  titleFormatter = formatter;\n}\n\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\n\nexport function title(\n  fieldOrDatumDef: TypedFieldDef<string> | SecondaryFieldDef<string> | DatumDef,\n  config: Config,\n  {allowDisabling, includeDefault = true}: {allowDisabling: boolean; includeDefault?: boolean}\n) {\n  const guideTitle = getGuide(fieldOrDatumDef)?.title;\n\n  if (!isFieldDef(fieldOrDatumDef)) {\n    return guideTitle ?? fieldOrDatumDef.title;\n  }\n  const fieldDef = fieldOrDatumDef;\n\n  const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n\n  if (allowDisabling) {\n    return getFirstDefined(guideTitle, fieldDef.title, def);\n  } else {\n    return guideTitle ?? fieldDef.title ?? def;\n  }\n}\n\nexport function getGuide(fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string> | DatumDef): Guide {\n  if (isPositionFieldOrDatumDef(fieldDef) && fieldDef.axis) {\n    return fieldDef.axis;\n  } else if (isMarkPropFieldOrDatumDef(fieldDef) && fieldDef.legend) {\n    return fieldDef.legend;\n  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n    return fieldDef.header;\n  }\n  return undefined;\n}\n\nexport function defaultTitle(fieldDef: FieldDefBase<string>, config: Config) {\n  return titleFormatter(fieldDef, config);\n}\n\nexport function getFormatMixins(fieldDef: TypedFieldDef<string> | DatumDef) {\n  if (isStringFieldOrDatumDef(fieldDef)) {\n    const {format, formatType} = fieldDef;\n    return {format, formatType};\n  } else {\n    const guide = getGuide(fieldDef) ?? {};\n    const {format, formatType} = guide;\n    return {format, formatType};\n  }\n}\n\nexport function defaultType<T extends TypedFieldDef<Field>>(fieldDef: T, channel: ExtendedChannel): Type {\n  switch (channel) {\n    case 'latitude':\n    case 'longitude':\n      return 'quantitative';\n\n    case 'row':\n    case 'column':\n    case 'facet':\n    case 'shape':\n    case 'strokeDash':\n      return 'nominal';\n\n    case 'order':\n      return 'ordinal';\n  }\n\n  if (isSortableFieldDef(fieldDef) && isArray(fieldDef.sort)) {\n    return 'ordinal';\n  }\n\n  const {aggregate, bin, timeUnit} = fieldDef;\n  if (timeUnit) {\n    return 'temporal';\n  }\n\n  if (bin || (aggregate && !isArgmaxDef(aggregate) && !isArgminDef(aggregate))) {\n    return 'quantitative';\n  }\n\n  if (isScaleFieldDef(fieldDef) && fieldDef.scale?.type) {\n    switch (SCALE_CATEGORY_INDEX[fieldDef.scale.type]) {\n      case 'numeric':\n      case 'discretizing':\n        return 'quantitative';\n      case 'time':\n        return 'temporal';\n    }\n  }\n\n  return 'nominal';\n}\n\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\n\nexport function getFieldDef<F extends Field>(channelDef: ChannelDef<F>): FieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\nexport function getFieldOrDatumDef<F extends Field = string, CD extends ChannelDef<F> = ChannelDef<F>>(\n  channelDef: CD\n): FieldDef<F> | DatumDef<F> {\n  if (isFieldOrDatumDef<F>(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function initChannelDef(\n  channelDef: ChannelDef<string>,\n  channel: ExtendedChannel,\n  config: Config,\n  opt: {compositeMark?: boolean} = {}\n): ChannelDef<string> {\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {value: channelDef} as ValueDef<any>;\n  }\n\n  // If a fieldDef contains a field, we need type.\n  if (isFieldOrDatumDef(channelDef)) {\n    return initFieldOrDatumDef(channelDef, channel, config, opt);\n  } else if (hasConditionalFieldOrDatumDef(channelDef)) {\n    return {\n      ...channelDef,\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: initFieldOrDatumDef(channelDef.condition, channel, config, opt) as Conditional<TypedFieldDef<string>>\n    };\n  }\n  return channelDef;\n}\n\nexport function initFieldOrDatumDef(\n  fd: FieldDef<string, any> | DatumDef,\n  channel: ExtendedChannel,\n  config: Config,\n  opt: {compositeMark?: boolean}\n): FieldDef<string, any> | DatumDef {\n  if (isStringFieldOrDatumDef(fd)) {\n    const {format, formatType, ...rest} = fd;\n    if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n      log.warn(log.message.customFormatTypeNotAllowed(channel));\n      return initFieldOrDatumDef(rest, channel, config, opt);\n    }\n  } else {\n    const guideType = isPositionFieldOrDatumDef(fd)\n      ? 'axis'\n      : isMarkPropFieldOrDatumDef(fd)\n        ? 'legend'\n        : isFacetFieldDef(fd)\n          ? 'header'\n          : null;\n    if (guideType && (fd as any)[guideType]) {\n      const {format, formatType, ...newGuide} = (fd as any)[guideType];\n      if (isCustomFormatType(formatType) && !config.customFormatTypes) {\n        log.warn(log.message.customFormatTypeNotAllowed(channel));\n        return initFieldOrDatumDef({...fd, [guideType]: newGuide}, channel, config, opt);\n      }\n    }\n  }\n\n  if (isFieldDef(fd)) {\n    return initFieldDef(fd, channel, opt);\n  }\n  return initDatumDef(fd);\n}\n\nfunction initDatumDef(datumDef: DatumDef): DatumDef {\n  let type = datumDef['type'];\n  if (type) {\n    return datumDef;\n  }\n  const {datum} = datumDef;\n  type = isNumber(datum) ? 'quantitative' : isString(datum) ? 'nominal' : isDateTime(datum) ? 'temporal' : undefined;\n\n  return {...datumDef, type};\n}\n\nexport function initFieldDef(\n  fd: FieldDef<string, any>,\n  channel: ExtendedChannel,\n  {compositeMark = false}: {compositeMark?: boolean} = {}\n) {\n  const {aggregate, timeUnit, bin, field} = fd;\n  const fieldDef = {...fd};\n\n  // Drop invalid aggregate\n  if (!compositeMark && aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n    log.warn(log.message.invalidAggregate(aggregate));\n    delete fieldDef.aggregate;\n  }\n\n  // Normalize Time Unit\n  if (timeUnit) {\n    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n  }\n\n  if (field) {\n    fieldDef.field = `${field}`;\n  }\n\n  // Normalize bin\n  if (isBinning(bin)) {\n    fieldDef.bin = normalizeBin(bin, channel);\n  }\n\n  if (isBinned(bin) && !isXorY(channel)) {\n    log.warn(log.message.channelShouldNotBeUsedForBinned(channel));\n  }\n\n  // Normalize Type\n  if (isTypedFieldDef(fieldDef)) {\n    const {type} = fieldDef;\n    const fullType = getFullName(type);\n    if (type !== fullType) {\n      // convert short type to full type\n      fieldDef.type = fullType;\n    }\n    if (type !== 'quantitative') {\n      if (isCountingAggregateOp(aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));\n        fieldDef.type = 'quantitative';\n      }\n    }\n  } else if (!isSecondaryRangeChannel(channel)) {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef as TypedFieldDef<any>, channel);\n    (fieldDef as any)['type'] = newType;\n  }\n\n  if (isTypedFieldDef(fieldDef)) {\n    const {compatible, warning} = channelCompatibility(fieldDef, channel) || {};\n    if (compatible === false) {\n      log.warn(warning);\n    }\n  }\n\n  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n    const {sort} = fieldDef;\n    if (isSortByChannel(sort)) {\n      return {\n        ...fieldDef,\n        sort: {encoding: sort}\n      };\n    }\n    const sub = sort.substring(1);\n    if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n      return {\n        ...fieldDef,\n        sort: {encoding: sub, order: 'descending'}\n      };\n    }\n  }\n\n  if (isFacetFieldDef(fieldDef)) {\n    const {header} = fieldDef;\n    if (header) {\n      const {orient, ...rest} = header;\n      if (orient) {\n        return {\n          ...fieldDef,\n          header: {\n            ...rest,\n            labelOrient: header.labelOrient || orient,\n            titleOrient: header.titleOrient || orient\n          }\n        };\n      }\n    }\n  }\n\n  return fieldDef;\n}\n\nexport function normalizeBin(bin: BinParams | boolean | 'binned', channel?: ExtendedChannel) {\n  if (isBoolean(bin)) {\n    return {maxbins: autoMaxBins(channel)};\n  } else if (bin === 'binned') {\n    return {\n      binned: true\n    };\n  } else if (!bin.maxbins && !bin.step) {\n    return {...bin, maxbins: autoMaxBins(channel)};\n  } else {\n    return bin;\n  }\n}\n\nconst COMPATIBLE = {compatible: true};\nexport function channelCompatibility(\n  fieldDef: TypedFieldDef<Field>,\n  channel: ExtendedChannel\n): {compatible: boolean; warning?: string} {\n  const type = fieldDef.type;\n\n  if (type === 'geojson' && channel !== 'shape') {\n    return {\n      compatible: false,\n      warning: `Channel ${channel} should not be used with a geojson data.`\n    };\n  }\n\n  switch (channel) {\n    case ROW:\n    case COLUMN:\n    case FACET:\n      if (!isDiscrete(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.channelShouldBeDiscrete(channel)\n        };\n      }\n      return COMPATIBLE;\n\n    case X:\n    case Y:\n    case XOFFSET:\n    case YOFFSET:\n    case COLOR:\n    case FILL:\n    case STROKE:\n    case TEXT:\n    case DETAIL:\n    case KEY:\n    case TOOLTIP:\n    case HREF:\n    case URL:\n    case ANGLE:\n    case THETA:\n    case RADIUS:\n    case DESCRIPTION:\n      return COMPATIBLE;\n\n    case LONGITUDE:\n    case LONGITUDE2:\n    case LATITUDE:\n    case LATITUDE2:\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case OPACITY:\n    case FILLOPACITY:\n    case STROKEOPACITY:\n    case STROKEWIDTH:\n    case SIZE:\n    case THETA2:\n    case RADIUS2:\n    case X2:\n    case Y2:\n      if (type === 'nominal' && !(fieldDef as any)['sort']) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case SHAPE:\n    case STROKEDASH:\n      if (!isDiscrete(fieldDef) && !isDiscretizing(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.channelShouldBeDiscreteOrDiscretizing(channel)\n        };\n      }\n      return COMPATIBLE;\n\n    case ORDER:\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n      return COMPATIBLE;\n  }\n}\n\n/**\n * Check if the field def uses a time format or does not use any format but is temporal\n * (this does not cover field defs that are temporal but use a number format).\n */\nexport function isFieldOrDatumDefForTimeFormat(fieldOrDatumDef: FieldDef<string> | DatumDef): boolean {\n  const {formatType} = getFormatMixins(fieldOrDatumDef);\n  return formatType === 'time' || (!formatType && isTimeFieldDef(fieldOrDatumDef));\n}\n\n/**\n * Check if field def has type `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n */\nexport function isTimeFieldDef(def: FieldDef<any> | DatumDef): boolean {\n  return def && ((def as any)['type'] === 'temporal' || (isFieldDef(def) && !!def.timeUnit));\n}\n\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(\n  v: number | string | boolean | DateTime | ExprRef | SignalRef | number[],\n  {\n    timeUnit,\n    type,\n    wrapTime,\n    undefinedIfExprNotRequired\n  }: {\n    timeUnit: TimeUnit | TimeUnitParams;\n    type?: Type;\n    wrapTime?: boolean;\n    undefinedIfExprNotRequired?: boolean;\n  }\n): string {\n  const unit = timeUnit && normalizeTimeUnit(timeUnit)?.unit;\n  let isTime = unit || type === 'temporal';\n\n  let expr;\n  if (isExprRef(v)) {\n    expr = v.expr;\n  } else if (isSignalRef(v)) {\n    expr = v.signal;\n  } else if (isDateTime(v)) {\n    isTime = true;\n    expr = dateTimeToExpr(v);\n  } else if (isString(v) || isNumber(v)) {\n    if (isTime) {\n      expr = `datetime(${stringify(v)})`;\n\n      if (isLocalSingleTimeUnit(unit)) {\n        // for single timeUnit, we will use dateTimeToExpr to convert number/string to match the timeUnit\n        if ((isNumber(v) && v < 10000) || (isString(v) && isNaN(Date.parse(v)))) {\n          expr = dateTimeToExpr({[unit]: v});\n        }\n      }\n    }\n  }\n  if (expr) {\n    return wrapTime && isTime ? `time(${expr})` : expr;\n  }\n  // number or boolean or normal string\n  return undefinedIfExprNotRequired ? undefined : stringify(v);\n}\n\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(\n  fieldOrDatumDef: TypedFieldDef<string> | DatumDef,\n  values: (number | string | boolean | DateTime)[]\n) {\n  const {type} = fieldOrDatumDef;\n  return values.map(v => {\n    const timeUnit =\n      isFieldDef(fieldOrDatumDef) && !isBinnedTimeUnit(fieldOrDatumDef.timeUnit) ? fieldOrDatumDef.timeUnit : undefined;\n    const expr = valueExpr(v, {\n      timeUnit,\n      type,\n      undefinedIfExprNotRequired: true\n    });\n    // return signal for the expression if we need an expression\n    if (expr !== undefined) {\n      return {signal: expr};\n    }\n    // otherwise just return the original value\n    return v;\n  });\n}\n\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef: FieldDef<string>, channel: Channel): boolean {\n  if (!isBinning(fieldDef.bin)) {\n    console.warn('Only call this method for binned field defs.');\n    return false;\n  }\n\n  // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n  // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n  return isScaleChannel(channel) && ['ordinal', 'nominal'].includes((fieldDef as ScaleFieldDef<string>).type);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}