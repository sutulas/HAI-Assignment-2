{"ast":null,"code":"import { isSelectionParameter } from './selection';\nexport function assembleParameterSignals(params) {\n  const signals = [];\n  for (const param of params || []) {\n    // Selection parameters are handled separately via assembleSelectionTopLevelSignals\n    // and assembleSignals methods registered on the Model.\n    if (isSelectionParameter(param)) continue;\n    const {\n      expr,\n      bind,\n      ...rest\n    } = param;\n    if (bind && expr) {\n      // Vega's InitSignal -- apply expr to \"init\"\n      const signal = {\n        ...rest,\n        bind,\n        init: expr\n      };\n      signals.push(signal);\n    } else {\n      const signal = {\n        ...rest,\n        ...(expr ? {\n          update: expr\n        } : {}),\n        ...(bind ? {\n          bind\n        } : {})\n      };\n      signals.push(signal);\n    }\n  }\n  return signals;\n}","map":{"version":3,"names":["isSelectionParameter","assembleParameterSignals","params","signals","param","expr","bind","rest","signal","init","push","update"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\parameter.ts"],"sourcesContent":["import type {Binding, Expr, InitSignal, NewSignal} from 'vega';\nimport {isSelectionParameter, TopLevelSelectionParameter} from './selection';\n\nexport type ParameterName = string;\n\nexport interface VariableParameter {\n  /**\n   * A unique name for the variable parameter. Parameter names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or \"$\", or \"_\") and may not start with a digit. Reserved keywords that may not be used as parameter names are \"datum\", \"event\", \"item\", and \"parent\".\n   */\n  name: ParameterName;\n\n  /**\n   * The [initial value](http://vega.github.io/vega-lite/docs/value.html) of the parameter.\n   *\n   * __Default value:__ `undefined`\n   */\n  value?: any;\n\n  /**\n   * An expression for the value of the parameter. This expression may include other parameters, in which case the parameter will automatically update in response to upstream parameter changes.\n   */\n  expr?: Expr;\n\n  /**\n   * Binds the parameter to an external input element such as a slider, selection list or radio button group.\n   */\n  bind?: Binding;\n\n  /**\n   *A boolean flag (default `true`) indicating if the update expression should be automatically re-evaluated when any upstream signal dependencies update. If `false`, the update expression will not register any dependencies on other signals, even for initialization.\n   *\n   * __Default value:__ `true`\n   */\n  react?: boolean;\n}\n\nexport function assembleParameterSignals(params: (VariableParameter | TopLevelSelectionParameter)[]) {\n  const signals: (NewSignal | InitSignal)[] = [];\n  for (const param of params || []) {\n    // Selection parameters are handled separately via assembleSelectionTopLevelSignals\n    // and assembleSignals methods registered on the Model.\n    if (isSelectionParameter(param)) continue;\n    const {expr, bind, ...rest} = param;\n\n    if (bind && expr) {\n      // Vega's InitSignal -- apply expr to \"init\"\n      const signal: InitSignal = {\n        ...rest,\n        bind,\n        init: expr\n      };\n      signals.push(signal);\n    } else {\n      const signal: NewSignal = {\n        ...rest,\n        ...(expr ? {update: expr} : {}),\n        ...(bind ? {bind} : {})\n      };\n      signals.push(signal);\n    }\n  }\n  return signals;\n}\n"],"mappings":"AACA,SAAQA,oBAAoB,QAAmC,aAAa;AAmC5E,OAAM,SAAUC,wBAAwBA,CAACC,MAA0D;EACjG,MAAMC,OAAO,GAA+B,EAAE;EAC9C,KAAK,MAAMC,KAAK,IAAIF,MAAM,IAAI,EAAE,EAAE;IAChC;IACA;IACA,IAAIF,oBAAoB,CAACI,KAAK,CAAC,EAAE;IACjC,MAAM;MAACC,IAAI;MAAEC,IAAI;MAAE,GAAGC;IAAI,CAAC,GAAGH,KAAK;IAEnC,IAAIE,IAAI,IAAID,IAAI,EAAE;MAChB;MACA,MAAMG,MAAM,GAAe;QACzB,GAAGD,IAAI;QACPD,IAAI;QACJG,IAAI,EAAEJ;OACP;MACDF,OAAO,CAACO,IAAI,CAACF,MAAM,CAAC;IACtB,CAAC,MAAM;MACL,MAAMA,MAAM,GAAc;QACxB,GAAGD,IAAI;QACP,IAAIF,IAAI,GAAG;UAACM,MAAM,EAAEN;QAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAIC,IAAI,GAAG;UAACA;QAAI,CAAC,GAAG,EAAE;OACvB;MACDH,OAAO,CAACO,IAAI,CAACF,MAAM,CAAC;IACtB;EACF;EACA,OAAOL,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}