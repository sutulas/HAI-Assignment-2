{"ast":null,"code":"import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n  clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const {\n      flatten,\n      as = []\n    } = this.transform;\n    this.transform.as = flatten.map((f, i) => as[i] ?? f);\n  }\n  dependentFields() {\n    return new Set(this.transform.flatten);\n  }\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n  hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n  assemble() {\n    const {\n      flatten: fields,\n      as\n    } = this.transform;\n    const result = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["duplicate","hash","DataFlowNode","FlattenTransformNode","clone","parent","transform","constructor","flatten","as","map","f","i","dependentFields","Set","producedFields","assemble","fields","result","type"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\flatten.ts"],"sourcesContent":["import type {FlattenTransform as VgFlattenTransform} from 'vega';\nimport {FlattenTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n  public clone() {\n    return new FlattenTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private transform: FlattenTransform\n  ) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const {flatten, as = []} = this.transform;\n    this.transform.as = flatten.map((f, i) => as[i] ?? f);\n  }\n\n  public dependentFields() {\n    return new Set(this.transform.flatten);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `FlattenTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgFlattenTransform {\n    const {flatten: fields, as} = this.transform;\n\n    const result: VgFlattenTransform = {\n      type: 'flatten',\n      fields,\n      as\n    };\n    return result;\n  }\n}\n"],"mappings":"AAEA,SAAQA,SAAS,EAAEC,IAAI,QAAO,YAAY;AAC1C,SAAQC,YAAY,QAAO,YAAY;AAEvC;;;AAGA,OAAM,MAAOC,oBAAqB,SAAQD,YAAY;EAC7CE,KAAKA,CAAA;IACV,OAAO,IAAID,oBAAoB,CAAC,IAAI,CAACE,MAAM,EAAEL,SAAS,CAAC,IAAI,CAACM,SAAS,CAAC,CAAC;EACzE;EAEAC,YACEF,MAAoB,EACZC,SAA2B;IAEnC,KAAK,CAACD,MAAM,CAAC;IAFL,KAAAC,SAAS,GAATA,SAAS;IAGjB,IAAI,CAACA,SAAS,GAAGN,SAAS,CAACM,SAAS,CAAC,CAAC,CAAC;IACvC,MAAM;MAACE,OAAO;MAAEC,EAAE,GAAG;IAAE,CAAC,GAAG,IAAI,CAACH,SAAS;IACzC,IAAI,CAACA,SAAS,CAACG,EAAE,GAAGD,OAAO,CAACE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKH,EAAE,CAACG,CAAC,CAAC,IAAID,CAAC,CAAC;EACvD;EAEOE,eAAeA,CAAA;IACpB,OAAO,IAAIC,GAAG,CAAC,IAAI,CAACR,SAAS,CAACE,OAAO,CAAC;EACxC;EAEOO,cAAcA,CAAA;IACnB,OAAO,IAAID,GAAG,CAAC,IAAI,CAACR,SAAS,CAACG,EAAE,CAAC;EACnC;EAEOR,IAAIA,CAAA;IACT,OAAO,oBAAoBA,IAAI,CAAC,IAAI,CAACK,SAAS,CAAC,EAAE;EACnD;EAEOU,QAAQA,CAAA;IACb,MAAM;MAACR,OAAO,EAAES,MAAM;MAAER;IAAE,CAAC,GAAG,IAAI,CAACH,SAAS;IAE5C,MAAMY,MAAM,GAAuB;MACjCC,IAAI,EAAE,SAAS;MACfF,MAAM;MACNR;KACD;IACD,OAAOS,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}