{"ast":null,"code":"import { keys } from '../util';\nimport { signalOrValueRef } from './common';\nimport { wrapCondition } from './mark/encode/conditional';\nexport function guideEncodeEntry(encoding, model) {\n  return keys(encoding).reduce((encode, channel) => {\n    return {\n      ...encode,\n      ...wrapCondition({\n        model,\n        channelDef: encoding[channel],\n        vgChannel: channel,\n        mainRefFn: def => signalOrValueRef(def.value),\n        invalidValueRef: undefined // guide encoding won't show invalid values for the scale\n      })\n    };\n  }, {});\n}","map":{"version":3,"names":["keys","signalOrValueRef","wrapCondition","guideEncodeEntry","encoding","model","reduce","encode","channel","channelDef","vgChannel","mainRefFn","def","value","invalidValueRef","undefined"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\guide.ts"],"sourcesContent":["import {GuideEncodingEntry} from '../guide';\nimport {keys} from '../util';\nimport {VgEncodeChannel} from '../vega.schema';\nimport {signalOrValueRef} from './common';\nimport {wrapCondition} from './mark/encode/conditional';\nimport {UnitModel} from './unit';\n\nexport function guideEncodeEntry(encoding: GuideEncodingEntry, model: UnitModel) {\n  return keys(encoding).reduce((encode, channel: VgEncodeChannel) => {\n    return {\n      ...encode,\n      ...wrapCondition({\n        model,\n        channelDef: encoding[channel],\n        vgChannel: channel,\n        mainRefFn: def => signalOrValueRef(def.value),\n        invalidValueRef: undefined // guide encoding won't show invalid values for the scale\n      })\n    };\n  }, {});\n}\n"],"mappings":"AACA,SAAQA,IAAI,QAAO,SAAS;AAE5B,SAAQC,gBAAgB,QAAO,UAAU;AACzC,SAAQC,aAAa,QAAO,2BAA2B;AAGvD,OAAM,SAAUC,gBAAgBA,CAACC,QAA4B,EAAEC,KAAgB;EAC7E,OAAOL,IAAI,CAACI,QAAQ,CAAC,CAACE,MAAM,CAAC,CAACC,MAAM,EAAEC,OAAwB,KAAI;IAChE,OAAO;MACL,GAAGD,MAAM;MACT,GAAGL,aAAa,CAAC;QACfG,KAAK;QACLI,UAAU,EAAEL,QAAQ,CAACI,OAAO,CAAC;QAC7BE,SAAS,EAAEF,OAAO;QAClBG,SAAS,EAAEC,GAAG,IAAIX,gBAAgB,CAACW,GAAG,CAACC,KAAK,CAAC;QAC7CC,eAAe,EAAEC,SAAS,CAAC;OAC5B;KACF;EACH,CAAC,EAAE,EAAE,CAAC;AACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}