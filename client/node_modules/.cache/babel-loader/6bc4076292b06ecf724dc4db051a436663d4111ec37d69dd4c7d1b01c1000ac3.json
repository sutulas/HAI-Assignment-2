{"ast":null,"code":"import { hasProperty } from '../../../util';\nimport { VG_MARK_CONFIGS } from '../../../vega.schema';\nimport { signalOrValueRef } from '../../common';\nimport { aria } from './aria';\nimport { color } from './color';\nimport { nonPosition } from './nonposition';\nimport { text } from './text';\nimport { tooltip } from './tooltip';\nimport { zindex } from './zindex';\nexport { color } from './color';\nexport { nonPosition } from './nonposition';\nexport { pointPosition } from './position-point';\nexport { pointOrRangePosition, rangePosition } from './position-range';\nexport { rectPosition } from './position-rect';\nexport { text } from './text';\nexport { tooltip } from './tooltip';\nconst ALWAYS_IGNORE = new Set(['aria', 'width', 'height']);\nexport function baseEncodeEntry(model, ignore) {\n  const {\n    fill = undefined,\n    stroke = undefined\n  } = ignore.color === 'include' ? color(model) : {};\n  return {\n    ...markDefProperties(model.markDef, ignore),\n    ...colorRef('fill', fill),\n    ...colorRef('stroke', stroke),\n    ...nonPosition('opacity', model),\n    ...nonPosition('fillOpacity', model),\n    ...nonPosition('strokeOpacity', model),\n    ...nonPosition('strokeWidth', model),\n    ...nonPosition('strokeDash', model),\n    ...zindex(model),\n    ...tooltip(model),\n    ...text(model, 'href'),\n    ...aria(model)\n  };\n}\nfunction colorRef(channel, valueRef) {\n  return valueRef ? {\n    [channel]: valueRef\n  } : {};\n}\nfunction markDefProperties(mark, ignore) {\n  return VG_MARK_CONFIGS.reduce((m, prop) => {\n    if (!ALWAYS_IGNORE.has(prop) && hasProperty(mark, prop) && ignore[prop] !== 'ignore') {\n      m[prop] = signalOrValueRef(mark[prop]);\n    }\n    return m;\n  }, {});\n}","map":{"version":3,"names":["hasProperty","VG_MARK_CONFIGS","signalOrValueRef","aria","color","nonPosition","text","tooltip","zindex","pointPosition","pointOrRangePosition","rangePosition","rectPosition","ALWAYS_IGNORE","Set","baseEncodeEntry","model","ignore","fill","undefined","stroke","markDefProperties","markDef","colorRef","channel","valueRef","mark","reduce","m","prop","has"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\encode\\base.ts"],"sourcesContent":["import type {MarkConfig} from 'vega';\nimport {MarkDef} from '../../../mark';\nimport {hasProperty} from '../../../util';\nimport {VG_MARK_CONFIGS, VgEncodeEntry, VgValueRef} from '../../../vega.schema';\nimport {signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {aria} from './aria';\nimport {color} from './color';\nimport {nonPosition} from './nonposition';\nimport {text} from './text';\nimport {tooltip} from './tooltip';\nimport {zindex} from './zindex';\n\nexport {color} from './color';\nexport {nonPosition} from './nonposition';\nexport {pointPosition} from './position-point';\nexport {pointOrRangePosition, rangePosition} from './position-range';\nexport {rectPosition} from './position-rect';\nexport {text} from './text';\nexport {tooltip} from './tooltip';\n\nexport type Ignore = Record<'color' | 'size' | 'orient' | 'align' | 'baseline' | 'theta', 'ignore' | 'include'>;\n\nconst ALWAYS_IGNORE = new Set(['aria', 'width', 'height']);\n\nexport function baseEncodeEntry(model: UnitModel, ignore: Ignore) {\n  const {fill = undefined, stroke = undefined} = ignore.color === 'include' ? color(model) : {};\n  return {\n    ...markDefProperties(model.markDef, ignore),\n    ...colorRef('fill', fill),\n    ...colorRef('stroke', stroke),\n    ...nonPosition('opacity', model),\n    ...nonPosition('fillOpacity', model),\n    ...nonPosition('strokeOpacity', model),\n    ...nonPosition('strokeWidth', model),\n    ...nonPosition('strokeDash', model),\n    ...zindex(model),\n    ...tooltip(model),\n    ...text(model, 'href'),\n    ...aria(model)\n  };\n}\n\nfunction colorRef(channel: 'fill' | 'stroke', valueRef: VgValueRef | VgValueRef[]): VgEncodeEntry {\n  return valueRef ? {[channel]: valueRef} : {};\n}\n\nfunction markDefProperties(mark: MarkDef, ignore: Ignore) {\n  return VG_MARK_CONFIGS.reduce(\n    (m, prop) => {\n      if (!ALWAYS_IGNORE.has(prop) && hasProperty(mark, prop) && (ignore as any)[prop] !== 'ignore') {\n        m[prop] = signalOrValueRef(mark[prop]);\n      }\n      return m;\n    },\n    {} as Record<keyof MarkConfig, unknown>\n  );\n}\n"],"mappings":"AAEA,SAAQA,WAAW,QAAO,eAAe;AACzC,SAAQC,eAAe,QAAkC,sBAAsB;AAC/E,SAAQC,gBAAgB,QAAO,cAAc;AAE7C,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,WAAW,QAAO,eAAe;AACzC,SAAQC,IAAI,QAAO,QAAQ;AAC3B,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,MAAM,QAAO,UAAU;AAE/B,SAAQJ,KAAK,QAAO,SAAS;AAC7B,SAAQC,WAAW,QAAO,eAAe;AACzC,SAAQI,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,oBAAoB,EAAEC,aAAa,QAAO,kBAAkB;AACpE,SAAQC,YAAY,QAAO,iBAAiB;AAC5C,SAAQN,IAAI,QAAO,QAAQ;AAC3B,SAAQC,OAAO,QAAO,WAAW;AAIjC,MAAMM,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AAE1D,OAAM,SAAUC,eAAeA,CAACC,KAAgB,EAAEC,MAAc;EAC9D,MAAM;IAACC,IAAI,GAAGC,SAAS;IAAEC,MAAM,GAAGD;EAAS,CAAC,GAAGF,MAAM,CAACb,KAAK,KAAK,SAAS,GAAGA,KAAK,CAACY,KAAK,CAAC,GAAG,EAAE;EAC7F,OAAO;IACL,GAAGK,iBAAiB,CAACL,KAAK,CAACM,OAAO,EAAEL,MAAM,CAAC;IAC3C,GAAGM,QAAQ,CAAC,MAAM,EAAEL,IAAI,CAAC;IACzB,GAAGK,QAAQ,CAAC,QAAQ,EAAEH,MAAM,CAAC;IAC7B,GAAGf,WAAW,CAAC,SAAS,EAAEW,KAAK,CAAC;IAChC,GAAGX,WAAW,CAAC,aAAa,EAAEW,KAAK,CAAC;IACpC,GAAGX,WAAW,CAAC,eAAe,EAAEW,KAAK,CAAC;IACtC,GAAGX,WAAW,CAAC,aAAa,EAAEW,KAAK,CAAC;IACpC,GAAGX,WAAW,CAAC,YAAY,EAAEW,KAAK,CAAC;IACnC,GAAGR,MAAM,CAACQ,KAAK,CAAC;IAChB,GAAGT,OAAO,CAACS,KAAK,CAAC;IACjB,GAAGV,IAAI,CAACU,KAAK,EAAE,MAAM,CAAC;IACtB,GAAGb,IAAI,CAACa,KAAK;GACd;AACH;AAEA,SAASO,QAAQA,CAACC,OAA0B,EAAEC,QAAmC;EAC/E,OAAOA,QAAQ,GAAG;IAAC,CAACD,OAAO,GAAGC;EAAQ,CAAC,GAAG,EAAE;AAC9C;AAEA,SAASJ,iBAAiBA,CAACK,IAAa,EAAET,MAAc;EACtD,OAAOhB,eAAe,CAAC0B,MAAM,CAC3B,CAACC,CAAC,EAAEC,IAAI,KAAI;IACV,IAAI,CAAChB,aAAa,CAACiB,GAAG,CAACD,IAAI,CAAC,IAAI7B,WAAW,CAAC0B,IAAI,EAAEG,IAAI,CAAC,IAAKZ,MAAc,CAACY,IAAI,CAAC,KAAK,QAAQ,EAAE;MAC7FD,CAAC,CAACC,IAAI,CAAC,GAAG3B,gBAAgB,CAACwB,IAAI,CAACG,IAAI,CAAC,CAAC;IACxC;IACA,OAAOD,CAAC;EACV,CAAC,EACD,EAAuC,CACxC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}