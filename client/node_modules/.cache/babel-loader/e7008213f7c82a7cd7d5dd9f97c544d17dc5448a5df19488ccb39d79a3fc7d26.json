{"ast":null,"code":"import { getSizeChannel } from '../channel';\nimport { stringify } from '../util';\nexport function invalidSpec(spec) {\n  return `Invalid specification ${stringify(spec)}. Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".`;\n}\n// FIT\nexport const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\nexport function containerSizeNonSingle(name) {\n  const uName = name == 'width' ? 'Width' : 'Height';\n  return `${uName} \"container\" only works for single views and layered views.`;\n}\nexport function containerSizeNotCompatibleWithAutosize(name) {\n  const uName = name == 'width' ? 'Width' : 'Height';\n  const fitDirection = name == 'width' ? 'x' : 'y';\n  return `${uName} \"container\" only works well with autosize \"fit\" or \"fit-${fitDirection}\".`;\n}\nexport function droppingFit(channel) {\n  return channel ? `Dropping \"fit-${channel}\" because spec has discrete ${getSizeChannel(channel)}.` : `Dropping \"fit\" because spec has discrete size.`;\n}\n// VIEW SIZE\nexport function unknownField(channel) {\n  return `Unknown field for ${channel}. Cannot calculate view size.`;\n}\n// SELECTION\nexport function cannotProjectOnChannelWithoutField(channel) {\n  return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n}\nexport function cannotProjectAggregate(channel, aggregate) {\n  return `Cannot project a selection on encoding channel \"${channel}\" as it uses an aggregate function (\"${aggregate}\").`;\n}\nexport function nearestNotSupportForContinuous(mark) {\n  return `The \"nearest\" transform is not supported for ${mark} marks.`;\n}\nexport function selectionNotSupported(mark) {\n  return `Selection not supported for ${mark} yet.`;\n}\nexport function selectionNotFound(name) {\n  return `Cannot find a selection named \"${name}\".`;\n}\nexport const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\nexport const SEQUENTIAL_SCALE_DEPRECATED = 'Sequntial scales are deprecated. The available quantitative scale type values are linear, log, pow, sqrt, symlog, time and utc';\nexport const LEGEND_BINDINGS_MUST_HAVE_PROJECTION = 'Legend bindings are only supported for selections over an individual field or encoding channel.';\nexport function cannotLookupVariableParameter(name) {\n  return `Lookups can only be performed on selection parameters. \"${name}\" is a variable parameter.`;\n}\nexport function noSameUnitLookup(name) {\n  return `Cannot define and lookup the \"${name}\" selection in the same view. ` + `Try moving the lookup into a second, layered view?`;\n}\nexport const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\nexport const INTERVAL_INITIALIZED_WITH_POS = 'Interval selections should be initialized using \"x\", \"y\", \"longitude\", or \"latitude\" keys.';\n// REPEAT\nexport function noSuchRepeatedValue(field) {\n  return `Unknown repeated value \"${field}\".`;\n}\nexport function columnsNotSupportByRowCol(type) {\n  return `The \"columns\" property cannot be used when \"${type}\" has nested row/column.`;\n}\n// CONCAT / REPEAT\nexport const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).';\n// DATA\nexport function unrecognizedParse(p) {\n  return `Unrecognized parse \"${p}\".`;\n}\nexport function differentParse(field, local, ancestor) {\n  return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n}\nexport const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.';\n// TRANSFORMS\nexport function invalidTransformIgnored(transform) {\n  return `Ignoring an invalid transform: ${stringify(transform)}.`;\n}\nexport const NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n// ENCODING & FACET\nexport function customFormatTypeNotAllowed(channel) {\n  return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;\n}\nexport function projectionOverridden(opt) {\n  const {\n    parentProjection,\n    projection\n  } = opt;\n  return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;\n}\nexport const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\nexport function offsetNestedInsideContinuousPositionScaleDropped(mainChannel) {\n  return `${mainChannel}Offset dropped because ${mainChannel} is continuous`;\n}\nexport function primitiveChannelDef(channel, type, value) {\n  return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n}\nexport function invalidFieldType(type) {\n  return `Invalid field type \"${type}\".`;\n}\nexport function invalidFieldTypeForCountAggregate(type, aggregate) {\n  return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n}\nexport function invalidAggregate(aggregate) {\n  return `Invalid aggregation operator \"${aggregate}\".`;\n}\nexport function missingFieldType(channel, newType) {\n  return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n}\nexport function droppingColor(type, opt) {\n  const {\n    fill,\n    stroke\n  } = opt;\n  return `Dropping color ${type} as the plot also has ${fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'}.`;\n}\nexport function relativeBandSizeNotSupported(sizeChannel) {\n  return `Position range does not support relative band size for ${sizeChannel}.`;\n}\nexport function emptyFieldDef(fieldDef, channel) {\n  return `Dropping ${stringify(fieldDef)} from channel \"${channel}\" since it does not contain any data field, datum, value, or signal.`;\n}\nexport const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\nexport function incompatibleChannel(channel, markOrFacet, when) {\n  return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n}\nexport function offsetEncodingScaleIgnored(channel) {\n  return `${channel} encoding has no scale, so specified scale is ignored.`;\n}\nexport function invalidEncodingChannel(channel) {\n  return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n}\nexport function channelShouldBeDiscrete(channel) {\n  return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n}\nexport function channelShouldBeDiscreteOrDiscretizing(channel) {\n  return `${channel} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`;\n}\nexport function facetChannelDropped(channels) {\n  return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;\n}\nexport function discreteChannelCannotEncode(channel, type) {\n  return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;\n}\n// MARK\nexport function rangeMarkAlignmentCannotBeExpression(align) {\n  return `The ${align} for range marks cannot be an expression`;\n}\nexport function lineWithRange(hasX2, hasY2) {\n  const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n  return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n}\nexport function orientOverridden(original, actual) {\n  return `Specified orient \"${original}\" overridden with \"${actual}\".`;\n}\n// SCALE\nexport const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';\nexport function cannotUseScalePropertyWithNonColor(prop) {\n  return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n}\nexport function cannotUseRelativeBandSizeWithNonBandScale(scaleType) {\n  return `Cannot use the relative band size with ${scaleType} scale.`;\n}\nexport function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n  return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n}\nexport function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n  return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n}\nexport function unaggregatedDomainWithLogScale(fieldDef) {\n  return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n}\nexport function cannotApplySizeToNonOrientedMark(mark) {\n  return `Cannot apply size to non-oriented mark \"${mark}\".`;\n}\nexport function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n  return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n  return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n  return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n}\nexport function scaleTypeNotWorkWithMark(mark, scaleType) {\n  return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n}\nexport function stepDropped(channel) {\n  return `The step for \"${channel}\" is dropped because the ${channel === 'width' ? 'x' : 'y'} is continuous.`;\n}\nexport function mergeConflictingProperty(property, propertyOf, v1, v2) {\n  return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using ${stringify(v1)}.`;\n}\nexport function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\n  return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using the union of the two domains.`;\n}\nexport function independentScaleMeansIndependentGuide(channel) {\n  return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n}\nexport function domainSortDropped(sort) {\n  return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op \"count\", \"min\", and \"max\".`;\n}\nexport const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\nexport const FACETED_INDEPENDENT_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\nexport const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES = 'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\nexport const FACETED_INDEPENDENT_SAME_SOURCE = 'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.';\n// AXIS\nexport const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n// STACK\nexport function cannotStackRangedMark(channel) {\n  return `Cannot stack \"${channel}\" if there is already \"${channel}2\".`;\n}\nexport function stackNonLinearScale(scaleType) {\n  return `Stack is applied to a non-linear scale (${scaleType}).`;\n}\nexport function stackNonSummativeAggregate(aggregate) {\n  return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\").`;\n}\n// TIMEUNIT\nexport function invalidTimeUnit(unitName, value) {\n  return `Invalid ${unitName}: ${stringify(value)}.`;\n}\nexport function droppedDay(d) {\n  return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n}\nexport function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n  return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;\n}\nexport function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n  return `${center} is not usually used with ${extent} for ${mark}.`;\n}\nexport function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n  return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n}\nexport function errorBand1DNotSupport(property) {\n  return `1D error band does not support ${property}.`;\n}\n// CHANNEL\nexport function channelRequiredForBinned(channel) {\n  return `Channel ${channel} is required for \"binned\" bin.`;\n}\nexport function channelShouldNotBeUsedForBinned(channel) {\n  return `Channel ${channel} should not be used with \"binned\" bin.`;\n}\nexport function domainRequiredForThresholdScale(channel) {\n  return `Domain for ${channel} is required for threshold scale.`;\n}","map":{"version":3,"names":["getSizeChannel","stringify","invalidSpec","spec","FIT_NON_SINGLE","containerSizeNonSingle","name","uName","containerSizeNotCompatibleWithAutosize","fitDirection","droppingFit","channel","unknownField","cannotProjectOnChannelWithoutField","cannotProjectAggregate","aggregate","nearestNotSupportForContinuous","mark","selectionNotSupported","selectionNotFound","SCALE_BINDINGS_CONTINUOUS","SEQUENTIAL_SCALE_DEPRECATED","LEGEND_BINDINGS_MUST_HAVE_PROJECTION","cannotLookupVariableParameter","noSameUnitLookup","NEEDS_SAME_SELECTION","INTERVAL_INITIALIZED_WITH_POS","noSuchRepeatedValue","field","columnsNotSupportByRowCol","type","CONCAT_CANNOT_SHARE_AXIS","unrecognizedParse","p","differentParse","local","ancestor","ADD_SAME_CHILD_TWICE","invalidTransformIgnored","transform","NO_FIELDS_NEEDS_AS","customFormatTypeNotAllowed","projectionOverridden","opt","parentProjection","projection","REPLACE_ANGLE_WITH_THETA","offsetNestedInsideContinuousPositionScaleDropped","mainChannel","primitiveChannelDef","value","invalidFieldType","invalidFieldTypeForCountAggregate","invalidAggregate","missingFieldType","newType","droppingColor","fill","stroke","relativeBandSizeNotSupported","sizeChannel","emptyFieldDef","fieldDef","LINE_WITH_VARYING_SIZE","incompatibleChannel","markOrFacet","when","offsetEncodingScaleIgnored","invalidEncodingChannel","channelShouldBeDiscrete","channelShouldBeDiscreteOrDiscretizing","facetChannelDropped","channels","join","length","discreteChannelCannotEncode","rangeMarkAlignmentCannotBeExpression","align","lineWithRange","hasX2","hasY2","orientOverridden","original","actual","CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN","cannotUseScalePropertyWithNonColor","prop","cannotUseRelativeBandSizeWithNonBandScale","scaleType","unaggregateDomainHasNoEffectForRawField","unaggregateDomainWithNonSharedDomainOp","unaggregatedDomainWithLogScale","cannotApplySizeToNonOrientedMark","scaleTypeNotWorkWithChannel","defaultScaleType","scaleTypeNotWorkWithFieldDef","scalePropertyNotWorkWithScaleType","propName","scaleTypeNotWorkWithMark","stepDropped","mergeConflictingProperty","property","propertyOf","v1","v2","toString","mergeConflictingDomainProperty","independentScaleMeansIndependentGuide","domainSortDropped","sort","MORE_THAN_ONE_SORT","FACETED_INDEPENDENT_DIFFERENT_SOURCES","FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES","FACETED_INDEPENDENT_SAME_SOURCE","INVALID_CHANNEL_FOR_AXIS","cannotStackRangedMark","stackNonLinearScale","stackNonSummativeAggregate","invalidTimeUnit","unitName","droppedDay","d","errorBarCenterAndExtentAreNotNeeded","center","extent","errorBarCenterIsUsedWithWrongExtent","errorBarContinuousAxisHasCustomizedAggregate","compositeMark","errorBand1DNotSupport","channelRequiredForBinned","channelShouldNotBeUsedForBinned","domainRequiredForThresholdScale"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\log\\message.ts"],"sourcesContent":["/**\n * Collection of all Vega-Lite Error Messages\n */\nimport {AggregateOp, SignalRef} from 'vega';\nimport {Aggregate} from '../aggregate';\nimport {\n  Channel,\n  ExtendedChannel,\n  FacetChannel,\n  getSizeChannel,\n  OffsetScaleChannel,\n  PositionScaleChannel,\n  ScaleChannel\n} from '../channel';\nimport {HiddenCompositeAggregate, TypedFieldDef, Value} from '../channeldef';\nimport {SplitParentProperty} from '../compile/split';\nimport {CompositeMark} from '../compositemark';\nimport {ErrorBarCenter, ErrorBarExtent} from '../compositemark/errorbar';\nimport {DateTime, DateTimeExpr} from '../datetime';\nimport {ExprRef} from '../expr';\nimport {Mark} from '../mark';\nimport {Projection} from '../projection';\nimport {ScaleType} from '../scale';\nimport {GenericSpec} from '../spec';\nimport {Type} from '../type';\nimport {stringify} from '../util';\nimport {VgSortField} from '../vega.schema';\n\nexport function invalidSpec(spec: GenericSpec<any, any, any, any>) {\n  return `Invalid specification ${stringify(\n    spec\n  )}. Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".`;\n}\n\n// FIT\nexport const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n\nexport function containerSizeNonSingle(name: 'width' | 'height') {\n  const uName = name == 'width' ? 'Width' : 'Height';\n  return `${uName} \"container\" only works for single views and layered views.`;\n}\n\nexport function containerSizeNotCompatibleWithAutosize(name: 'width' | 'height') {\n  const uName = name == 'width' ? 'Width' : 'Height';\n  const fitDirection = name == 'width' ? 'x' : 'y';\n  return `${uName} \"container\" only works well with autosize \"fit\" or \"fit-${fitDirection}\".`;\n}\n\nexport function droppingFit(channel?: PositionScaleChannel) {\n  return channel\n    ? `Dropping \"fit-${channel}\" because spec has discrete ${getSizeChannel(channel)}.`\n    : `Dropping \"fit\" because spec has discrete size.`;\n}\n\n// VIEW SIZE\n\nexport function unknownField(channel: Channel) {\n  return `Unknown field for ${channel}. Cannot calculate view size.`;\n}\n\n// SELECTION\nexport function cannotProjectOnChannelWithoutField(channel: Channel) {\n  return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n}\n\nexport function cannotProjectAggregate(channel: Channel, aggregate: Aggregate | HiddenCompositeAggregate) {\n  return `Cannot project a selection on encoding channel \"${channel}\" as it uses an aggregate function (\"${aggregate}\").`;\n}\n\nexport function nearestNotSupportForContinuous(mark: string) {\n  return `The \"nearest\" transform is not supported for ${mark} marks.`;\n}\n\nexport function selectionNotSupported(mark: CompositeMark) {\n  return `Selection not supported for ${mark} yet.`;\n}\n\nexport function selectionNotFound(name: string) {\n  return `Cannot find a selection named \"${name}\".`;\n}\n\nexport const SCALE_BINDINGS_CONTINUOUS =\n  'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n\nexport const SEQUENTIAL_SCALE_DEPRECATED =\n  'Sequntial scales are deprecated. The available quantitative scale type values are linear, log, pow, sqrt, symlog, time and utc';\n\nexport const LEGEND_BINDINGS_MUST_HAVE_PROJECTION =\n  'Legend bindings are only supported for selections over an individual field or encoding channel.';\nexport function cannotLookupVariableParameter(name: string) {\n  return `Lookups can only be performed on selection parameters. \"${name}\" is a variable parameter.`;\n}\n\nexport function noSameUnitLookup(name: string) {\n  return (\n    `Cannot define and lookup the \"${name}\" selection in the same view. ` +\n    `Try moving the lookup into a second, layered view?`\n  );\n}\n\nexport const NEEDS_SAME_SELECTION = 'The same selection must be used to override scale domains in a layered view.';\n\nexport const INTERVAL_INITIALIZED_WITH_POS =\n  'Interval selections should be initialized using \"x\", \"y\", \"longitude\", or \"latitude\" keys.';\n\n// REPEAT\nexport function noSuchRepeatedValue(field: string) {\n  return `Unknown repeated value \"${field}\".`;\n}\n\nexport function columnsNotSupportByRowCol(type: 'facet' | 'repeat') {\n  return `The \"columns\" property cannot be used when \"${type}\" has nested row/column.`;\n}\n\n// CONCAT / REPEAT\nexport const CONCAT_CANNOT_SHARE_AXIS =\n  'Axes cannot be shared in concatenated or repeated views yet (https://github.com/vega/vega-lite/issues/2415).';\n\n// DATA\nexport function unrecognizedParse(p: string) {\n  return `Unrecognized parse \"${p}\".`;\n}\n\nexport function differentParse(field: string, local: string, ancestor: string) {\n  return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n}\n\nexport const ADD_SAME_CHILD_TWICE = 'Attempt to add the same child twice.';\n\n// TRANSFORMS\nexport function invalidTransformIgnored(transform: any) {\n  return `Ignoring an invalid transform: ${stringify(transform)}.`;\n}\n\nexport const NO_FIELDS_NEEDS_AS =\n  'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n\n// ENCODING & FACET\n\nexport function customFormatTypeNotAllowed(channel: ExtendedChannel) {\n  return `Config.customFormatTypes is not true, thus custom format type and format for channel ${channel} are dropped.`;\n}\n\nexport function projectionOverridden<ES extends ExprRef | SignalRef>(opt: {\n  parentProjection: Projection<ES>;\n  projection: Projection<ES>;\n}) {\n  const {parentProjection, projection} = opt;\n  return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(\n    projection\n  )}.`;\n}\n\nexport const REPLACE_ANGLE_WITH_THETA = 'Arc marks uses theta channel rather than angle, replacing angle with theta.';\n\nexport function offsetNestedInsideContinuousPositionScaleDropped(mainChannel: PositionScaleChannel) {\n  return `${mainChannel}Offset dropped because ${mainChannel} is continuous`;\n}\n\nexport function primitiveChannelDef(\n  channel: ExtendedChannel,\n  type: 'string' | 'number' | 'boolean',\n  value: Exclude<Value, null>\n) {\n  return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n}\n\nexport function invalidFieldType(type: Type) {\n  return `Invalid field type \"${type}\".`;\n}\n\nexport function invalidFieldTypeForCountAggregate(type: Type, aggregate: Aggregate | string) {\n  return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n}\n\nexport function invalidAggregate(aggregate: AggregateOp | string) {\n  return `Invalid aggregation operator \"${aggregate}\".`;\n}\n\nexport function missingFieldType(channel: Channel, newType: Type) {\n  return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n}\nexport function droppingColor(type: 'encoding' | 'property', opt: {fill?: boolean; stroke?: boolean}) {\n  const {fill, stroke} = opt;\n  return `Dropping color ${type} as the plot also has ${\n    fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'\n  }.`;\n}\n\nexport function relativeBandSizeNotSupported(sizeChannel: 'width' | 'height') {\n  return `Position range does not support relative band size for ${sizeChannel}.`;\n}\n\nexport function emptyFieldDef(fieldDef: unknown, channel: ExtendedChannel) {\n  return `Dropping ${stringify(\n    fieldDef\n  )} from channel \"${channel}\" since it does not contain any data field, datum, value, or signal.`;\n}\n\nexport const LINE_WITH_VARYING_SIZE =\n  'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n\nexport function incompatibleChannel(\n  channel: ExtendedChannel,\n  markOrFacet: Mark | 'facet' | CompositeMark,\n  when?: string\n) {\n  return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n}\n\nexport function offsetEncodingScaleIgnored(channel: OffsetScaleChannel) {\n  return `${channel} encoding has no scale, so specified scale is ignored.`;\n}\n\nexport function invalidEncodingChannel(channel: ExtendedChannel) {\n  return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n}\n\nexport function channelShouldBeDiscrete(channel: ExtendedChannel) {\n  return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n}\n\nexport function channelShouldBeDiscreteOrDiscretizing(channel: ExtendedChannel) {\n  return `${channel} encoding should be discrete (ordinal / nominal / binned) or use a discretizing scale (e.g. threshold).`;\n}\n\nexport function facetChannelDropped(channels: FacetChannel[]) {\n  return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;\n}\n\nexport function discreteChannelCannotEncode(channel: Channel, type: Type) {\n  return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${\n    type === 'ordinal' ? 'order' : 'magnitude'\n  }.`;\n}\n\n// MARK\n\nexport function rangeMarkAlignmentCannotBeExpression(align: 'align' | 'baseline') {\n  return `The ${align} for range marks cannot be an expression`;\n}\n\nexport function lineWithRange(hasX2: boolean, hasY2: boolean) {\n  const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n  return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n}\n\nexport function orientOverridden(original: string, actual: string) {\n  return `Specified orient \"${original}\" overridden with \"${actual}\".`;\n}\n\n// SCALE\nexport const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN =\n  'Custom domain scale cannot be unioned with default field-based domain.';\n\nexport function cannotUseScalePropertyWithNonColor(prop: string) {\n  return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n}\n\nexport function cannotUseRelativeBandSizeWithNonBandScale(scaleType: ScaleType) {\n  return `Cannot use the relative band size with ${scaleType} scale.`;\n}\n\nexport function unaggregateDomainHasNoEffectForRawField(fieldDef: TypedFieldDef<string>) {\n  return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n}\n\nexport function unaggregateDomainWithNonSharedDomainOp(aggregate: Aggregate | string) {\n  return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n}\n\nexport function unaggregatedDomainWithLogScale(fieldDef: TypedFieldDef<string>) {\n  return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n}\n\nexport function cannotApplySizeToNonOrientedMark(mark: Mark) {\n  return `Cannot apply size to non-oriented mark \"${mark}\".`;\n}\n\nexport function scaleTypeNotWorkWithChannel(channel: Channel, scaleType: ScaleType, defaultScaleType: ScaleType) {\n  return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\n\nexport function scaleTypeNotWorkWithFieldDef(scaleType: ScaleType, defaultScaleType: ScaleType) {\n  return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\n\nexport function scalePropertyNotWorkWithScaleType(scaleType: ScaleType, propName: string, channel: Channel) {\n  return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n}\n\nexport function scaleTypeNotWorkWithMark(mark: Mark, scaleType: ScaleType) {\n  return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n}\n\nexport function stepDropped(channel: 'width' | 'height') {\n  return `The step for \"${channel}\" is dropped because the ${channel === 'width' ? 'x' : 'y'} is continuous.`;\n}\n\nexport function mergeConflictingProperty<T>(\n  property: string | number | symbol,\n  propertyOf: SplitParentProperty,\n  v1: T,\n  v2: T\n) {\n  return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(\n    v2\n  )}). Using ${stringify(v1)}.`;\n}\n\nexport function mergeConflictingDomainProperty<T>(property: 'domains', propertyOf: SplitParentProperty, v1: T, v2: T) {\n  return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(\n    v2\n  )}). Using the union of the two domains.`;\n}\n\nexport function independentScaleMeansIndependentGuide(channel: Channel) {\n  return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n}\n\nexport function domainSortDropped(sort: VgSortField) {\n  return `Dropping sort property ${stringify(\n    sort\n  )} as unioned domains only support boolean or op \"count\", \"min\", and \"max\".`;\n}\n\nexport const MORE_THAN_ONE_SORT =\n  'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n\nexport const FACETED_INDEPENDENT_DIFFERENT_SOURCES =\n  'Detected faceted independent scales that union domain of multiple fields from different data sources. We will use the first field. The result view size may be incorrect.';\n\nexport const FACETED_INDEPENDENT_SAME_FIELDS_DIFFERENT_SOURCES =\n  'Detected faceted independent scales that union domain of the same fields from different source. We will assume that this is the same field from a different fork of the same data source. However, if this is not the case, the result view size may be incorrect.';\n\nexport const FACETED_INDEPENDENT_SAME_SOURCE =\n  'Detected faceted independent scales that union domain of multiple fields from the same data source. We will use the first field. The result view size may be incorrect.';\n\n// AXIS\nexport const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n\n// STACK\nexport function cannotStackRangedMark(channel: Channel) {\n  return `Cannot stack \"${channel}\" if there is already \"${channel}2\".`;\n}\n\nexport function stackNonLinearScale(scaleType: ScaleType) {\n  return `Stack is applied to a non-linear scale (${scaleType}).`;\n}\n\nexport function stackNonSummativeAggregate(aggregate: Aggregate | string) {\n  return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\").`;\n}\n\n// TIMEUNIT\nexport function invalidTimeUnit(unitName: string, value: string | number) {\n  return `Invalid ${unitName}: ${stringify(value)}.`;\n}\n\nexport function droppedDay(d: DateTime | DateTimeExpr) {\n  return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n}\n\nexport function errorBarCenterAndExtentAreNotNeeded(center: ErrorBarCenter, extent: ErrorBarExtent) {\n  return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${\n    extent && center ? 'are ' : 'is '\n  }not needed when data are aggregated.`;\n}\n\nexport function errorBarCenterIsUsedWithWrongExtent(\n  center: ErrorBarCenter,\n  extent: ErrorBarExtent,\n  mark: 'errorbar' | 'errorband'\n) {\n  return `${center} is not usually used with ${extent} for ${mark}.`;\n}\n\nexport function errorBarContinuousAxisHasCustomizedAggregate(\n  aggregate: Aggregate | string,\n  compositeMark: CompositeMark\n) {\n  return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n}\n\nexport function errorBand1DNotSupport(property: 'interpolate' | 'tension') {\n  return `1D error band does not support ${property}.`;\n}\n\n// CHANNEL\nexport function channelRequiredForBinned(channel: Channel) {\n  return `Channel ${channel} is required for \"binned\" bin.`;\n}\n\nexport function channelShouldNotBeUsedForBinned(channel: ExtendedChannel) {\n  return `Channel ${channel} should not be used with \"binned\" bin.`;\n}\n\nexport function domainRequiredForThresholdScale(channel: ScaleChannel) {\n  return `Domain for ${channel} is required for threshold scale.`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}