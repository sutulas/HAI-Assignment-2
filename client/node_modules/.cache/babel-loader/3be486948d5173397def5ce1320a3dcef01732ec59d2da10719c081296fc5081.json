{"ast":null,"code":"import { isString, mergeConfig } from 'vega-util';\nimport { getPositionScaleChannel } from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize';\nimport { assembleParameterSignals } from '../parameter';\nimport { extractTopLevelProperties, getFitType, isFitType } from '../spec/toplevel';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig(opt.config, inputSpec.config));\n    // 2. Normalize: Convert input spec -> normalized spec\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n    const spec = normalize(inputSpec, config);\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n    const model = buildModel(spec, null, '', undefined, config);\n    // 4 Parse: Model --> Model with components\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n    // drawDataflow(model.component.data.sources);\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n    optimizeDataflow(model.component.data, model);\n    // drawDataflow(model.component.data.sources);\n    // 6. Assemble: convert model components --> Vega Spec.\n    const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\nfunction getTopLevelProperties(inputSpec, autosize, config, model) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n  if (autosize === undefined) {\n    autosize = {\n      type: 'pad'\n    };\n    if (model.hasAxisOrientSignalRef()) {\n      autosize.resize = true;\n    }\n  } else if (isString(autosize)) {\n    autosize = {\n      type: autosize\n    };\n  }\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height';\n      // log that we're dropping fit for respective channel\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n      // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n  return {\n    ...(keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\n      autosize: autosize.type\n    } : {\n      autosize\n    }),\n    ...extractTopLevelProperties(config, false),\n    ...extractTopLevelProperties(inputSpec, true)\n  };\n}\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties) {\n  let datasets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let usermeta = arguments.length > 3 ? arguments[3] : undefined;\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n  const data = [].concat(model.assembleSelectionData([]),\n  // only assemble data in the root\n  assembleRootData(model.component.data, datasets));\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n  let layoutSignals = model.assembleLayoutSignals();\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n  const {\n    params,\n    ...otherTopLevelProps\n  } = topLevelProperties;\n  return {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {\n      description: model.description\n    } : {}),\n    ...otherTopLevelProps,\n    ...(title ? {\n      title\n    } : {}),\n    ...(style ? {\n      style\n    } : {}),\n    ...(encodeEntry ? {\n      encode: {\n        update: encodeEntry\n      }\n    } : {}),\n    data,\n    ...(projections.length > 0 ? {\n      projections\n    } : {}),\n    ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([]), ...assembleParameterSignals(params)]),\n    ...(vgConfig ? {\n      config: vgConfig\n    } : {}),\n    ...(usermeta ? {\n      usermeta\n    } : {})\n  };\n}","map":{"version":3,"names":["isString","mergeConfig","getPositionScaleChannel","vlFieldDef","initConfig","stripAndRedirectConfig","log","normalize","assembleParameterSignals","extractTopLevelProperties","getFitType","isFitType","keys","buildModel","assembleRootData","optimizeDataflow","compile","inputSpec","opt","arguments","length","undefined","logger","set","fieldTitle","setTitleFormatter","config","spec","model","parse","component","data","vgSpec","assembleTopLevelModel","getTopLevelProperties","autosize","datasets","usermeta","normalized","reset","resetTitleFormatter","width","layoutSize","get","height","type","hasAxisOrientSignalRef","resize","warn","message","droppingFit","sizeType","inverseSizeType","topLevelProperties","vgConfig","concat","assembleSelectionData","projections","assembleProjections","title","assembleTitle","style","assembleGroupStyle","encodeEntry","assembleGroupEncodeEntry","layoutSignals","assembleLayoutSignals","filter","signal","name","value","params","otherTopLevelProps","$schema","description","encode","update","assembleGroup","assembleSelectionTopLevelSignals"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\compile.ts"],"sourcesContent":["import type {AutoSizeType, LoggerInterface, Spec as VgSpec} from 'vega';\nimport {isString, mergeConfig} from 'vega-util';\nimport {getPositionScaleChannel} from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport {Config, initConfig, stripAndRedirectConfig} from '../config';\nimport * as log from '../log';\nimport {normalize} from '../normalize';\nimport {assembleParameterSignals} from '../parameter';\nimport {LayoutSizeMixins, TopLevel, TopLevelSpec} from '../spec';\nimport {\n  AutoSizeParams,\n  Datasets,\n  extractTopLevelProperties,\n  getFitType,\n  isFitType,\n  TopLevelProperties\n} from '../spec/toplevel';\nimport {Dict, keys} from '../util';\nimport {buildModel} from './buildmodel';\nimport {assembleRootData} from './data/assemble';\nimport {optimizeDataflow} from './data/optimize';\nimport {Model} from './model';\n\nexport interface CompileOptions {\n  /**\n   * Sets a Vega-Lite configuration.\n   */\n  config?: Config;\n\n  /**\n   * Sets a custom logger.\n   */\n  logger?: LoggerInterface;\n\n  /**\n   * Sets a field title formatter.\n   */\n  fieldTitle?: vlFieldDef.FieldTitleFormatter;\n}\n\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec: TopLevelSpec, opt: CompileOptions = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig(opt.config, inputSpec.config));\n\n    // 2. Normalize: Convert input spec -> normalized spec\n\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n    const spec = normalize(inputSpec, config);\n\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, ConcatModel) for different types of models.\n    const model: Model = buildModel(spec, null, '', undefined, config);\n\n    // 4 Parse: Model --> Model with components\n\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n\n    // drawDataflow(model.component.data.sources);\n\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n    optimizeDataflow(model.component.data, model);\n\n    // drawDataflow(model.component.data.sources);\n\n    // 6. Assemble: convert model components --> Vega Spec.\n    const vgSpec = assembleTopLevelModel(\n      model,\n      getTopLevelProperties(inputSpec, spec.autosize, config, model),\n      inputSpec.datasets,\n      inputSpec.usermeta\n    );\n\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(\n  inputSpec: TopLevel<any>,\n  autosize: AutoSizeType | AutoSizeParams,\n  config: Config,\n  model: Model\n) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n  if (autosize === undefined) {\n    autosize = {type: 'pad'};\n    if (model.hasAxisOrientSignalRef()) {\n      autosize.resize = true;\n    }\n  } else if (isString(autosize)) {\n    autosize = {type: autosize};\n  }\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height';\n      // log that we're dropping fit for respective channel\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n\n      // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n\n  return {\n    ...(keys(autosize).length === 1 && autosize.type\n      ? autosize.type === 'pad'\n        ? {}\n        : {autosize: autosize.type}\n      : {autosize}),\n    ...extractTopLevelProperties(config, false),\n    ...extractTopLevelProperties(inputSpec, true)\n  };\n}\n\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(\n  model: Model,\n  topLevelProperties: TopLevelProperties & LayoutSizeMixins,\n  datasets: Datasets = {},\n  usermeta: Dict<any>\n): VgSpec {\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n\n  const data = [].concat(\n    model.assembleSelectionData([]),\n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets)\n  );\n\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n\n  let layoutSignals = model.assembleLayoutSignals();\n\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n\n  const {params, ...otherTopLevelProps} = topLevelProperties;\n\n  return {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {description: model.description} : {}),\n    ...otherTopLevelProps,\n    ...(title ? {title} : {}),\n    ...(style ? {style} : {}),\n    ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n    data,\n    ...(projections.length > 0 ? {projections} : {}),\n    ...model.assembleGroup([\n      ...layoutSignals,\n      ...model.assembleSelectionTopLevelSignals([]),\n      ...assembleParameterSignals(params)\n    ]),\n    ...(vgConfig ? {config: vgConfig} : {}),\n    ...(usermeta ? {usermeta} : {})\n  };\n}\n"],"mappings":"AACA,SAAQA,QAAQ,EAAEC,WAAW,QAAO,WAAW;AAC/C,SAAQC,uBAAuB,QAAO,YAAY;AAClD,OAAO,KAAKC,UAAU,MAAM,eAAe;AAC3C,SAAgBC,UAAU,EAAEC,sBAAsB,QAAO,WAAW;AACpE,OAAO,KAAKC,GAAG,MAAM,QAAQ;AAC7B,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,wBAAwB,QAAO,cAAc;AAErD,SAGEC,yBAAyB,EACzBC,UAAU,EACVC,SAAS,QAEJ,kBAAkB;AACzB,SAAcC,IAAI,QAAO,SAAS;AAClC,SAAQC,UAAU,QAAO,cAAc;AACvC,SAAQC,gBAAgB,QAAO,iBAAiB;AAChD,SAAQC,gBAAgB,QAAO,iBAAiB;AAoBhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAM,SAAUC,OAAOA,CAACC,SAAuB,EAA0B;EAAA,IAAxBC,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB,EAAE;EACvE;EACA,IAAID,GAAG,CAACI,MAAM,EAAE;IACd;IACAhB,GAAG,CAACiB,GAAG,CAACL,GAAG,CAACI,MAAM,CAAC;EACrB;EAEA,IAAIJ,GAAG,CAACM,UAAU,EAAE;IAClB;IACArB,UAAU,CAACsB,iBAAiB,CAACP,GAAG,CAACM,UAAU,CAAC;EAC9C;EAEA,IAAI;IACF;IACA,MAAME,MAAM,GAAGtB,UAAU,CAACH,WAAW,CAACiB,GAAG,CAACQ,MAAM,EAAET,SAAS,CAACS,MAAM,CAAC,CAAC;IAEpE;IAEA;IACA;IACA,MAAMC,IAAI,GAAGpB,SAAS,CAACU,SAAS,EAAES,MAAM,CAAC;IAEzC;IAEA;IACA;IACA,MAAME,KAAK,GAAUf,UAAU,CAACc,IAAI,EAAE,IAAI,EAAE,EAAE,EAAEN,SAAS,EAAEK,MAAM,CAAC;IAElE;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACAE,KAAK,CAACC,KAAK,EAAE;IAEb;IAEA;IACAd,gBAAgB,CAACa,KAAK,CAACE,SAAS,CAACC,IAAI,EAAEH,KAAK,CAAC;IAE7C;IAEA;IACA,MAAMI,MAAM,GAAGC,qBAAqB,CAClCL,KAAK,EACLM,qBAAqB,CAACjB,SAAS,EAAEU,IAAI,CAACQ,QAAQ,EAAET,MAAM,EAAEE,KAAK,CAAC,EAC9DX,SAAS,CAACmB,QAAQ,EAClBnB,SAAS,CAACoB,QAAQ,CACnB;IAED,OAAO;MACLV,IAAI,EAAEK,MAAM;MACZM,UAAU,EAAEX;KACb;EACH,CAAC,SAAS;IACR;IACA,IAAIT,GAAG,CAACI,MAAM,EAAE;MACdhB,GAAG,CAACiC,KAAK,EAAE;IACb;IACA;IACA,IAAIrB,GAAG,CAACM,UAAU,EAAE;MAClBrB,UAAU,CAACqC,mBAAmB,EAAE;IAClC;EACF;AACF;AAEA,SAASN,qBAAqBA,CAC5BjB,SAAwB,EACxBkB,QAAuC,EACvCT,MAAc,EACdE,KAAY;EAEZ,MAAMa,KAAK,GAAGb,KAAK,CAACE,SAAS,CAACY,UAAU,CAACC,GAAG,CAAC,OAAO,CAAC;EACrD,MAAMC,MAAM,GAAGhB,KAAK,CAACE,SAAS,CAACY,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;EACvD,IAAIR,QAAQ,KAAKd,SAAS,EAAE;IAC1Bc,QAAQ,GAAG;MAACU,IAAI,EAAE;IAAK,CAAC;IACxB,IAAIjB,KAAK,CAACkB,sBAAsB,EAAE,EAAE;MAClCX,QAAQ,CAACY,MAAM,GAAG,IAAI;IACxB;EACF,CAAC,MAAM,IAAI/C,QAAQ,CAACmC,QAAQ,CAAC,EAAE;IAC7BA,QAAQ,GAAG;MAACU,IAAI,EAAEV;IAAQ,CAAC;EAC7B;EACA,IAAIM,KAAK,IAAIG,MAAM,IAAIjC,SAAS,CAACwB,QAAQ,CAACU,IAAI,CAAC,EAAE;IAC/C,IAAIJ,KAAK,KAAK,MAAM,IAAIG,MAAM,KAAK,MAAM,EAAE;MACzCtC,GAAG,CAAC0C,IAAI,CAAC1C,GAAG,CAAC2C,OAAO,CAACC,WAAW,EAAE,CAAC;MACnCf,QAAQ,CAACU,IAAI,GAAG,KAAK;IACvB,CAAC,MAAM,IAAIJ,KAAK,KAAK,MAAM,IAAIG,MAAM,KAAK,MAAM,EAAE;MAChD;MAEA;MACA,MAAMO,QAAQ,GAAGV,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,QAAQ;MACtD;MACAnC,GAAG,CAAC0C,IAAI,CAAC1C,GAAG,CAAC2C,OAAO,CAACC,WAAW,CAAChD,uBAAuB,CAACiD,QAAQ,CAAC,CAAC,CAAC;MAEpE;MACA,MAAMC,eAAe,GAAGD,QAAQ,KAAK,OAAO,GAAG,QAAQ,GAAG,OAAO;MACjEhB,QAAQ,CAACU,IAAI,GAAGnC,UAAU,CAAC0C,eAAe,CAAC;IAC7C;EACF;EAEA,OAAO;IACL,IAAIxC,IAAI,CAACuB,QAAQ,CAAC,CAACf,MAAM,KAAK,CAAC,IAAIe,QAAQ,CAACU,IAAI,GAC5CV,QAAQ,CAACU,IAAI,KAAK,KAAK,GACrB,EAAE,GACF;MAACV,QAAQ,EAAEA,QAAQ,CAACU;IAAI,CAAC,GAC3B;MAACV;IAAQ,CAAC,CAAC;IACf,GAAG1B,yBAAyB,CAACiB,MAAM,EAAE,KAAK,CAAC;IAC3C,GAAGjB,yBAAyB,CAACQ,SAAS,EAAE,IAAI;GAC7C;AACH;AAEA;;;;;;AAMA,SAASgB,qBAAqBA,CAC5BL,KAAY,EACZyB,kBAAyD,EAEtC;EAAA,IADnBjB,QAAA,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqB,EAAE;EAAA,IACvBkB,QAAmB,GAAAlB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEnB;EACA,MAAMiC,QAAQ,GAAG1B,KAAK,CAACF,MAAM,GAAGrB,sBAAsB,CAACuB,KAAK,CAACF,MAAM,CAAC,GAAGL,SAAS;EAEhF,MAAMU,IAAI,GAAG,EAAE,CAACwB,MAAM,CACpB3B,KAAK,CAAC4B,qBAAqB,CAAC,EAAE,CAAC;EAC/B;EACA1C,gBAAgB,CAACc,KAAK,CAACE,SAAS,CAACC,IAAI,EAAEK,QAAQ,CAAC,CACjD;EAED,MAAMqB,WAAW,GAAG7B,KAAK,CAAC8B,mBAAmB,EAAE;EAC/C,MAAMC,KAAK,GAAG/B,KAAK,CAACgC,aAAa,EAAE;EACnC,MAAMC,KAAK,GAAGjC,KAAK,CAACkC,kBAAkB,EAAE;EACxC,MAAMC,WAAW,GAAGnC,KAAK,CAACoC,wBAAwB,CAAC,IAAI,CAAC;EAExD,IAAIC,aAAa,GAAGrC,KAAK,CAACsC,qBAAqB,EAAE;EAEjD;EACAD,aAAa,GAAGA,aAAa,CAACE,MAAM,CAACC,MAAM,IAAG;IAC5C,IAAI,CAACA,MAAM,CAACC,IAAI,KAAK,OAAO,IAAID,MAAM,CAACC,IAAI,KAAK,QAAQ,KAAKD,MAAM,CAACE,KAAK,KAAKjD,SAAS,EAAE;MACvFgC,kBAAkB,CAACe,MAAM,CAACC,IAAI,CAAC,GAAG,CAACD,MAAM,CAACE,KAAK;MAC/C,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EAEF,MAAM;IAACC,MAAM;IAAE,GAAGC;EAAkB,CAAC,GAAGnB,kBAAkB;EAE1D,OAAO;IACLoB,OAAO,EAAE,4CAA4C;IACrD,IAAI7C,KAAK,CAAC8C,WAAW,GAAG;MAACA,WAAW,EAAE9C,KAAK,CAAC8C;IAAW,CAAC,GAAG,EAAE,CAAC;IAC9D,GAAGF,kBAAkB;IACrB,IAAIb,KAAK,GAAG;MAACA;IAAK,CAAC,GAAG,EAAE,CAAC;IACzB,IAAIE,KAAK,GAAG;MAACA;IAAK,CAAC,GAAG,EAAE,CAAC;IACzB,IAAIE,WAAW,GAAG;MAACY,MAAM,EAAE;QAACC,MAAM,EAAEb;MAAW;IAAC,CAAC,GAAG,EAAE,CAAC;IACvDhC,IAAI;IACJ,IAAI0B,WAAW,CAACrC,MAAM,GAAG,CAAC,GAAG;MAACqC;IAAW,CAAC,GAAG,EAAE,CAAC;IAChD,GAAG7B,KAAK,CAACiD,aAAa,CAAC,CACrB,GAAGZ,aAAa,EAChB,GAAGrC,KAAK,CAACkD,gCAAgC,CAAC,EAAE,CAAC,EAC7C,GAAGtE,wBAAwB,CAAC+D,MAAM,CAAC,CACpC,CAAC;IACF,IAAIjB,QAAQ,GAAG;MAAC5B,MAAM,EAAE4B;IAAQ,CAAC,GAAG,EAAE,CAAC;IACvC,IAAIjB,QAAQ,GAAG;MAACA;IAAQ,CAAC,GAAG,EAAE;GAC/B;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}