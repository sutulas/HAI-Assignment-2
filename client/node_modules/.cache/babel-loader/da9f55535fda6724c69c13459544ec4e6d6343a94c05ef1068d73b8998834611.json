{"ast":null,"code":"import { isArray, isNumber } from 'vega-util';\nimport { ScaleType } from '../../scale';\nimport { contains } from '../../util';\nimport { Split } from '../split';\nexport class ScaleComponent extends Split {\n  constructor(name, typeWithExplicit) {\n    super({},\n    // no initial explicit property\n    {\n      name\n    } // name as initial implicit property\n    );\n    this.merged = false;\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n  /**\n   * Whether the scale definitely includes or not include zero in the domain\n   */\n  domainHasZero() {\n    const scaleType = this.get('type');\n    if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n      // Log scales cannot have zero.\n      // Zero in time scale is arbitrary, and does not affect ratio.\n      // (Time is an interval level of measurement, not ratio).\n      // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n      return 'definitely-not';\n    }\n    const scaleZero = this.get('zero');\n    if (scaleZero === true ||\n    // If zero is undefined, linear/sqrt/pow scales have zero by default.\n    scaleZero === undefined && contains([ScaleType.LINEAR, ScaleType.SQRT, ScaleType.POW], scaleType)) {\n      return 'definitely';\n    }\n    const domains = this.get('domains');\n    if (domains.length > 0) {\n      let hasExplicitDomainWithZero = false;\n      let hasExplicitDomainWithoutZero = false;\n      let hasDomainBasedOnField = false;\n      for (const d of domains) {\n        if (isArray(d)) {\n          const first = d[0];\n          const last = d[d.length - 1];\n          if (isNumber(first) && isNumber(last)) {\n            if (first <= 0 && last >= 0) {\n              hasExplicitDomainWithZero = true;\n              continue;\n            } else {\n              hasExplicitDomainWithoutZero = true;\n              continue;\n            }\n          }\n        }\n        hasDomainBasedOnField = true;\n      }\n      if (hasExplicitDomainWithZero) {\n        return 'definitely';\n      } else if (hasExplicitDomainWithoutZero && !hasDomainBasedOnField) {\n        return 'definitely-not';\n      }\n    }\n    return 'maybe';\n  }\n}","map":{"version":3,"names":["isArray","isNumber","ScaleType","contains","Split","ScaleComponent","constructor","name","typeWithExplicit","merged","setWithExplicit","domainHasZero","scaleType","get","LOG","TIME","UTC","scaleZero","undefined","LINEAR","SQRT","POW","domains","length","hasExplicitDomainWithZero","hasExplicitDomainWithoutZero","hasDomainBasedOnField","d","first","last"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\scale\\component.ts"],"sourcesContent":["import type {SignalRef} from 'vega';\nimport {isArray, isNumber} from 'vega-util';\nimport {ScaleChannel} from '../../channel';\nimport {Scale, ScaleType} from '../../scale';\nimport {ParameterExtent} from '../../selection';\nimport {contains} from '../../util';\nimport {VgNonUnionDomain, VgScale} from '../../vega.schema';\nimport {Explicit, Split} from '../split';\n\n/**\n * All VgDomain property except domain.\n * (We exclude domain as we have a special \"domains\" array that allow us merge them all at once in assemble.)\n */\nexport type ScaleComponentProps = Omit<VgScale, 'domain' | 'reverse'> & {\n  domains: VgNonUnionDomain[];\n  selectionExtent?: ParameterExtent;\n  reverse?: boolean | SignalRef; // Need override since Vega doesn't official support scale reverse yet (though it does in practice)\n};\n\nexport type Range = ScaleComponentProps['range'];\n\nexport class ScaleComponent extends Split<ScaleComponentProps> {\n  public merged = false;\n\n  constructor(name: string, typeWithExplicit: Explicit<ScaleType>) {\n    super(\n      {}, // no initial explicit property\n      {name} // name as initial implicit property\n    );\n    this.setWithExplicit('type', typeWithExplicit);\n  }\n\n  /**\n   * Whether the scale definitely includes or not include zero in the domain\n   */\n  public domainHasZero(): 'definitely' | 'definitely-not' | 'maybe' {\n    const scaleType = this.get('type');\n    if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n      // Log scales cannot have zero.\n      // Zero in time scale is arbitrary, and does not affect ratio.\n      // (Time is an interval level of measurement, not ratio).\n      // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n      return 'definitely-not';\n    }\n\n    const scaleZero = this.get('zero');\n    if (\n      scaleZero === true ||\n      // If zero is undefined, linear/sqrt/pow scales have zero by default.\n      (scaleZero === undefined && contains([ScaleType.LINEAR, ScaleType.SQRT, ScaleType.POW], scaleType))\n    ) {\n      return 'definitely';\n    }\n\n    const domains = this.get('domains');\n\n    if (domains.length > 0) {\n      let hasExplicitDomainWithZero = false;\n      let hasExplicitDomainWithoutZero = false;\n      let hasDomainBasedOnField = false;\n      for (const d of domains) {\n        if (isArray(d)) {\n          const first = d[0];\n          const last = d[d.length - 1];\n          if (isNumber(first) && isNumber(last)) {\n            if (first <= 0 && last >= 0) {\n              hasExplicitDomainWithZero = true;\n              continue;\n            } else {\n              hasExplicitDomainWithoutZero = true;\n              continue;\n            }\n          }\n        }\n        hasDomainBasedOnField = true;\n      }\n      if (hasExplicitDomainWithZero) {\n        return 'definitely';\n      } else if (hasExplicitDomainWithoutZero && !hasDomainBasedOnField) {\n        return 'definitely-not';\n      }\n    }\n    return 'maybe';\n  }\n}\n\nexport type ScaleComponentIndex = Partial<Record<ScaleChannel, ScaleComponent>>;\n\nexport type ScaleIndex = Partial<Record<ScaleChannel, Scale<SignalRef>>>;\n"],"mappings":"AACA,SAAQA,OAAO,EAAEC,QAAQ,QAAO,WAAW;AAE3C,SAAeC,SAAS,QAAO,aAAa;AAE5C,SAAQC,QAAQ,QAAO,YAAY;AAEnC,SAAkBC,KAAK,QAAO,UAAU;AAcxC,OAAM,MAAOC,cAAe,SAAQD,KAA0B;EAG5DE,YAAYC,IAAY,EAAEC,gBAAqC;IAC7D,KAAK,CACH,EAAE;IAAE;IACJ;MAACD;IAAI,CAAC,CAAC;KACR;IANI,KAAAE,MAAM,GAAG,KAAK;IAOnB,IAAI,CAACC,eAAe,CAAC,MAAM,EAAEF,gBAAgB,CAAC;EAChD;EAEA;;;EAGOG,aAAaA,CAAA;IAClB,MAAMC,SAAS,GAAG,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC;IAClC,IAAIV,QAAQ,CAAC,CAACD,SAAS,CAACY,GAAG,EAAEZ,SAAS,CAACa,IAAI,EAAEb,SAAS,CAACc,GAAG,CAAC,EAAEJ,SAAS,CAAC,EAAE;MACvE;MACA;MACA;MACA;MACA,OAAO,gBAAgB;IACzB;IAEA,MAAMK,SAAS,GAAG,IAAI,CAACJ,GAAG,CAAC,MAAM,CAAC;IAClC,IACEI,SAAS,KAAK,IAAI;IAClB;IACCA,SAAS,KAAKC,SAAS,IAAIf,QAAQ,CAAC,CAACD,SAAS,CAACiB,MAAM,EAAEjB,SAAS,CAACkB,IAAI,EAAElB,SAAS,CAACmB,GAAG,CAAC,EAAET,SAAS,CAAE,EACnG;MACA,OAAO,YAAY;IACrB;IAEA,MAAMU,OAAO,GAAG,IAAI,CAACT,GAAG,CAAC,SAAS,CAAC;IAEnC,IAAIS,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACtB,IAAIC,yBAAyB,GAAG,KAAK;MACrC,IAAIC,4BAA4B,GAAG,KAAK;MACxC,IAAIC,qBAAqB,GAAG,KAAK;MACjC,KAAK,MAAMC,CAAC,IAAIL,OAAO,EAAE;QACvB,IAAItB,OAAO,CAAC2B,CAAC,CAAC,EAAE;UACd,MAAMC,KAAK,GAAGD,CAAC,CAAC,CAAC,CAAC;UAClB,MAAME,IAAI,GAAGF,CAAC,CAACA,CAAC,CAACJ,MAAM,GAAG,CAAC,CAAC;UAC5B,IAAItB,QAAQ,CAAC2B,KAAK,CAAC,IAAI3B,QAAQ,CAAC4B,IAAI,CAAC,EAAE;YACrC,IAAID,KAAK,IAAI,CAAC,IAAIC,IAAI,IAAI,CAAC,EAAE;cAC3BL,yBAAyB,GAAG,IAAI;cAChC;YACF,CAAC,MAAM;cACLC,4BAA4B,GAAG,IAAI;cACnC;YACF;UACF;QACF;QACAC,qBAAqB,GAAG,IAAI;MAC9B;MACA,IAAIF,yBAAyB,EAAE;QAC7B,OAAO,YAAY;MACrB,CAAC,MAAM,IAAIC,4BAA4B,IAAI,CAACC,qBAAqB,EAAE;QACjE,OAAO,gBAAgB;MACzB;IACF;IACA,OAAO,OAAO;EAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}