{"ast":null,"code":"import * as log from '../../../log';\nimport { contains } from '../../../util';\nimport { getMarkPropOrConfig, signalOrValueRef } from '../../common';\nimport { nonPosition } from './nonposition';\nexport function color(model) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    filled: undefined\n  };\n  const {\n    markDef,\n    encoding,\n    config\n  } = model;\n  const {\n    type: markType\n  } = markDef;\n  // Allow filled to be overridden (for trail's \"filled\")\n  const filled = opt.filled ?? getMarkPropOrConfig('filled', markDef, config);\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n  const defaultFill = getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {\n    vgChannel: 'fill'\n  }) ??\n  // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n  config.mark[filled === true && 'color'] ??\n  // If there is no fill, always fill symbols, bar, geoshape\n  // with transparent fills https://github.com/vega/vega-lite/issues/1316\n  transparentIfNeeded;\n  const defaultStroke = getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {\n    vgChannel: 'stroke'\n  }) ??\n  // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n  config.mark[filled === false && 'color'];\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n  const fillStrokeMarkDefAndConfig = {\n    ...(defaultFill ? {\n      fill: signalOrValueRef(defaultFill)\n    } : {}),\n    ...(defaultStroke ? {\n      stroke: signalOrValueRef(defaultStroke)\n    } : {})\n  };\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {\n      fill: 'fill' in markDef,\n      stroke: 'stroke' in markDef\n    }));\n  }\n  return {\n    ...fillStrokeMarkDefAndConfig,\n    ...nonPosition('color', model, {\n      vgChannel: colorVgChannel,\n      defaultValue: filled ? defaultFill : defaultStroke\n    }),\n    ...nonPosition('fill', model, {\n      // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n      defaultValue: encoding.fill ? defaultFill : undefined\n    }),\n    ...nonPosition('stroke', model, {\n      // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n      defaultValue: encoding.stroke ? defaultStroke : undefined\n    })\n  };\n}","map":{"version":3,"names":["log","contains","getMarkPropOrConfig","signalOrValueRef","nonPosition","color","model","opt","arguments","length","undefined","filled","markDef","encoding","config","type","markType","transparentIfNeeded","defaultFill","vgChannel","mark","defaultStroke","colorVgChannel","fillStrokeMarkDefAndConfig","fill","stroke","warn","message","droppingColor","defaultValue"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\encode\\color.ts"],"sourcesContent":["import * as log from '../../../log';\nimport {contains} from '../../../util';\nimport {VgEncodeEntry} from '../../../vega.schema';\nimport {getMarkPropOrConfig, signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {nonPosition} from './nonposition';\n\nexport function color(model: UnitModel, opt: {filled: boolean | undefined} = {filled: undefined}): VgEncodeEntry {\n  const {markDef, encoding, config} = model;\n  const {type: markType} = markDef;\n\n  // Allow filled to be overridden (for trail's \"filled\")\n  const filled = opt.filled ?? getMarkPropOrConfig('filled', markDef, config);\n\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n    ? 'transparent'\n    : undefined;\n\n  const defaultFill =\n    getMarkPropOrConfig(filled === true ? 'color' : undefined, markDef, config, {vgChannel: 'fill'}) ??\n    // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    (config.mark as any)[filled === true && 'color'] ??\n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded;\n\n  const defaultStroke =\n    getMarkPropOrConfig(filled === false ? 'color' : undefined, markDef, config, {vgChannel: 'stroke'}) ??\n    // need to add this manually as getMarkConfig normally drops config.mark[channel] if vgChannel is specified\n    (config.mark as any)[filled === false && 'color'];\n\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n\n  const fillStrokeMarkDefAndConfig: VgEncodeEntry = {\n    ...(defaultFill ? {fill: signalOrValueRef(defaultFill)} : {}),\n    ...(defaultStroke ? {stroke: signalOrValueRef(defaultStroke)} : {})\n  };\n\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {fill: 'fill' in markDef, stroke: 'stroke' in markDef}));\n  }\n\n  return {\n    ...fillStrokeMarkDefAndConfig,\n    ...nonPosition('color', model, {\n      vgChannel: colorVgChannel,\n      defaultValue: filled ? defaultFill : defaultStroke\n    }),\n    ...nonPosition('fill', model, {\n      // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n      defaultValue: encoding.fill ? defaultFill : undefined\n    }),\n    ...nonPosition('stroke', model, {\n      // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n      defaultValue: encoding.stroke ? defaultStroke : undefined\n    })\n  };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,cAAc;AACnC,SAAQC,QAAQ,QAAO,eAAe;AAEtC,SAAQC,mBAAmB,EAAEC,gBAAgB,QAAO,cAAc;AAElE,SAAQC,WAAW,QAAO,eAAe;AAEzC,OAAM,SAAUC,KAAKA,CAACC,KAAgB,EAA0D;EAAA,IAAxDC,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqC;IAACG,MAAM,EAAED;EAAS,CAAC;EAC9F,MAAM;IAACE,OAAO;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAGR,KAAK;EACzC,MAAM;IAACS,IAAI,EAAEC;EAAQ,CAAC,GAAGJ,OAAO;EAEhC;EACA,MAAMD,MAAM,GAAGJ,GAAG,CAACI,MAAM,IAAIT,mBAAmB,CAAC,QAAQ,EAAEU,OAAO,EAAEE,MAAM,CAAC;EAE3E,MAAMG,mBAAmB,GAAGhB,QAAQ,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,EAAEe,QAAQ,CAAC,GAC5F,aAAa,GACbN,SAAS;EAEb,MAAMQ,WAAW,GACfhB,mBAAmB,CAACS,MAAM,KAAK,IAAI,GAAG,OAAO,GAAGD,SAAS,EAAEE,OAAO,EAAEE,MAAM,EAAE;IAACK,SAAS,EAAE;EAAM,CAAC,CAAC;EAChG;EACCL,MAAM,CAACM,IAAY,CAACT,MAAM,KAAK,IAAI,IAAI,OAAO,CAAC;EAChD;EACA;EACAM,mBAAmB;EAErB,MAAMI,aAAa,GACjBnB,mBAAmB,CAACS,MAAM,KAAK,KAAK,GAAG,OAAO,GAAGD,SAAS,EAAEE,OAAO,EAAEE,MAAM,EAAE;IAACK,SAAS,EAAE;EAAQ,CAAC,CAAC;EACnG;EACCL,MAAM,CAACM,IAAY,CAACT,MAAM,KAAK,KAAK,IAAI,OAAO,CAAC;EAEnD,MAAMW,cAAc,GAAGX,MAAM,GAAG,MAAM,GAAG,QAAQ;EAEjD,MAAMY,0BAA0B,GAAkB;IAChD,IAAIL,WAAW,GAAG;MAACM,IAAI,EAAErB,gBAAgB,CAACe,WAAW;IAAC,CAAC,GAAG,EAAE,CAAC;IAC7D,IAAIG,aAAa,GAAG;MAACI,MAAM,EAAEtB,gBAAgB,CAACkB,aAAa;IAAC,CAAC,GAAG,EAAE;GACnE;EAED,IAAIT,OAAO,CAACP,KAAK,KAAKM,MAAM,GAAGC,OAAO,CAACY,IAAI,GAAGZ,OAAO,CAACa,MAAM,CAAC,EAAE;IAC7DzB,GAAG,CAAC0B,IAAI,CAAC1B,GAAG,CAAC2B,OAAO,CAACC,aAAa,CAAC,UAAU,EAAE;MAACJ,IAAI,EAAE,MAAM,IAAIZ,OAAO;MAAEa,MAAM,EAAE,QAAQ,IAAIb;IAAO,CAAC,CAAC,CAAC;EACzG;EAEA,OAAO;IACL,GAAGW,0BAA0B;IAC7B,GAAGnB,WAAW,CAAC,OAAO,EAAEE,KAAK,EAAE;MAC7Ba,SAAS,EAAEG,cAAc;MACzBO,YAAY,EAAElB,MAAM,GAAGO,WAAW,GAAGG;KACtC,CAAC;IACF,GAAGjB,WAAW,CAAC,MAAM,EAAEE,KAAK,EAAE;MAC5B;MACAuB,YAAY,EAAEhB,QAAQ,CAACW,IAAI,GAAGN,WAAW,GAAGR;KAC7C,CAAC;IACF,GAAGN,WAAW,CAAC,QAAQ,EAAEE,KAAK,EAAE;MAC9B;MACAuB,YAAY,EAAEhB,QAAQ,CAACY,MAAM,GAAGJ,aAAa,GAAGX;KACjD;GACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}