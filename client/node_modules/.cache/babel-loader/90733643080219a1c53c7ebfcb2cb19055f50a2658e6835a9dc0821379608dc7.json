{"ast":null,"code":"import * as log from '../../log';\nimport * as optimizers from './optimizers';\nimport { moveFacetDown } from './subtree';\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes) {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        // log.error('Dataflow graph is inconsistent.', node, child);\n        return false;\n      }\n    }\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer instance to run.\n * @param nodes A set of nodes to optimize.\n */\nfunction runOptimizer(optimizer, nodes) {\n  let modified = false;\n  for (const node of nodes) {\n    modified = optimizer.optimize(node) || modified;\n  }\n  return modified;\n}\nfunction optimizationDataflowHelper(dataComponent, model, firstPass) {\n  let roots = dataComponent.sources;\n  let modified = false;\n  modified = runOptimizer(new optimizers.RemoveUnnecessaryOutputNodes(), roots) || modified;\n  modified = runOptimizer(new optimizers.RemoveUnnecessaryIdentifierNodes(model), roots) || modified;\n  // remove source nodes that don't have any children because they also don't have output nodes\n  roots = roots.filter(r => r.numChildren() > 0);\n  modified = runOptimizer(new optimizers.RemoveUnusedSubtrees(), roots) || modified;\n  roots = roots.filter(r => r.numChildren() > 0);\n  if (!firstPass) {\n    // Only run these optimizations after the optimizer has moved down the facet node.\n    // With this change, we can be more aggressive in the optimizations.\n    modified = runOptimizer(new optimizers.MoveParseUp(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeBins(model), roots) || modified;\n    modified = runOptimizer(new optimizers.RemoveDuplicateTimeUnits(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeParse(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeAggregates(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeTimeUnits(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeIdenticalNodes(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeOutputs(), roots) || modified;\n  }\n  dataComponent.sources = roots;\n  return modified;\n}\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data, model) {\n  // check before optimizations\n  checkLinks(data.sources);\n  let firstPassCounter = 0;\n  let secondPassCounter = 0;\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data, model, true)) {\n      break;\n    }\n    firstPassCounter++;\n  }\n  // move facets down and make a copy of the subtree so that we can have scales at the top level\n  data.sources.map(moveFacetDown);\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data, model, false)) {\n      break;\n    }\n    secondPassCounter++;\n  }\n  // check after optimizations\n  checkLinks(data.sources);\n  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n    log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n  }\n}","map":{"version":3,"names":["log","optimizers","moveFacetDown","FACET_SCALE_PREFIX","MAX_OPTIMIZATION_RUNS","checkLinks","nodes","node","child","children","parent","runOptimizer","optimizer","modified","optimize","optimizationDataflowHelper","dataComponent","model","firstPass","roots","sources","RemoveUnnecessaryOutputNodes","RemoveUnnecessaryIdentifierNodes","filter","r","numChildren","RemoveUnusedSubtrees","MoveParseUp","MergeBins","RemoveDuplicateTimeUnits","MergeParse","MergeAggregates","MergeTimeUnits","MergeIdenticalNodes","MergeOutputs","optimizeDataflow","data","firstPassCounter","secondPassCounter","i","map","Math","max","warn"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\optimize.ts"],"sourcesContent":["import {DataComponent} from '.';\nimport * as log from '../../log';\nimport {Model} from '../model';\nimport {DataFlowNode} from './dataflow';\nimport {Optimizer} from './optimizer';\nimport * as optimizers from './optimizers';\nimport {moveFacetDown} from './subtree';\n\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes: readonly DataFlowNode[]): boolean {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        // log.error('Dataflow graph is inconsistent.', node, child);\n        return false;\n      }\n    }\n\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer instance to run.\n * @param nodes A set of nodes to optimize.\n */\nfunction runOptimizer(optimizer: Optimizer, nodes: DataFlowNode[]): boolean {\n  let modified = false;\n\n  for (const node of nodes) {\n    modified = optimizer.optimize(node) || modified;\n  }\n\n  return modified;\n}\n\nfunction optimizationDataflowHelper(dataComponent: DataComponent, model: Model, firstPass: boolean) {\n  let roots = dataComponent.sources;\n  let modified = false;\n\n  modified = runOptimizer(new optimizers.RemoveUnnecessaryOutputNodes(), roots) || modified;\n  modified = runOptimizer(new optimizers.RemoveUnnecessaryIdentifierNodes(model), roots) || modified;\n\n  // remove source nodes that don't have any children because they also don't have output nodes\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  modified = runOptimizer(new optimizers.RemoveUnusedSubtrees(), roots) || modified;\n\n  roots = roots.filter(r => r.numChildren() > 0);\n\n  if (!firstPass) {\n    // Only run these optimizations after the optimizer has moved down the facet node.\n    // With this change, we can be more aggressive in the optimizations.\n    modified = runOptimizer(new optimizers.MoveParseUp(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeBins(model), roots) || modified;\n    modified = runOptimizer(new optimizers.RemoveDuplicateTimeUnits(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeParse(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeAggregates(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeTimeUnits(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeIdenticalNodes(), roots) || modified;\n    modified = runOptimizer(new optimizers.MergeOutputs(), roots) || modified;\n  }\n\n  dataComponent.sources = roots;\n\n  return modified;\n}\n\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data: DataComponent, model: Model) {\n  // check before optimizations\n  checkLinks(data.sources);\n\n  let firstPassCounter = 0;\n  let secondPassCounter = 0;\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data, model, true)) {\n      break;\n    }\n    firstPassCounter++;\n  }\n\n  // move facets down and make a copy of the subtree so that we can have scales at the top level\n  data.sources.map(moveFacetDown);\n\n  for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n    if (!optimizationDataflowHelper(data, model, false)) {\n      break;\n    }\n    secondPassCounter++;\n  }\n\n  // check after optimizations\n  checkLinks(data.sources);\n\n  if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n    log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}