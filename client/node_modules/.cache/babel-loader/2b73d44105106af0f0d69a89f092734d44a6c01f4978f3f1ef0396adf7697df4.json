{"ast":null,"code":"import { getMarkPropOrConfig } from '../common';\nimport * as encode from './encode';\nexport const text = {\n  vgMark: 'text',\n  encodeEntry: model => {\n    const {\n      config,\n      encoding\n    } = model;\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'include',\n        baseline: 'include',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore',\n        theta: 'include'\n      }),\n      ...encode.pointPosition('x', model, {\n        defaultPos: 'mid'\n      }),\n      ...encode.pointPosition('y', model, {\n        defaultPos: 'mid'\n      }),\n      ...encode.text(model),\n      ...encode.nonPosition('size', model, {\n        vgChannel: 'fontSize' // VL's text size is fontSize\n      }),\n      ...encode.nonPosition('angle', model),\n      ...encode.valueIfDefined('align', align(model.markDef, encoding, config)),\n      ...encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config)),\n      ...encode.pointPosition('radius', model, {\n        defaultPos: null\n      }),\n      ...encode.pointPosition('theta', model, {\n        defaultPos: null\n      })\n    };\n  }\n};\nfunction align(markDef, encoding, config) {\n  const a = getMarkPropOrConfig('align', markDef, config);\n  if (a === undefined) {\n    return 'center';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\nfunction baseline(markDef, encoding, config) {\n  const b = getMarkPropOrConfig('baseline', markDef, config);\n  if (b === undefined) {\n    return 'middle';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}","map":{"version":3,"names":["getMarkPropOrConfig","encode","text","vgMark","encodeEntry","model","config","encoding","baseEncodeEntry","align","baseline","color","size","orient","theta","pointPosition","defaultPos","nonPosition","vgChannel","valueIfDefined","markDef","a","undefined","b"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\text.ts"],"sourcesContent":["import type {SignalRef} from 'vega';\nimport {Config} from '../../config';\nimport {Encoding} from '../../encoding';\nimport {MarkDef} from '../../mark';\nimport {getMarkPropOrConfig} from '../common';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const text: MarkCompiler = {\n  vgMark: 'text',\n\n  encodeEntry: (model: UnitModel) => {\n    const {config, encoding} = model;\n\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'include',\n        baseline: 'include',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore',\n        theta: 'include'\n      }),\n      ...encode.pointPosition('x', model, {defaultPos: 'mid'}),\n      ...encode.pointPosition('y', model, {defaultPos: 'mid'}),\n      ...encode.text(model),\n      ...encode.nonPosition('size', model, {\n        vgChannel: 'fontSize' // VL's text size is fontSize\n      }),\n      ...encode.nonPosition('angle', model),\n      ...encode.valueIfDefined('align', align(model.markDef, encoding, config)),\n      ...encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config)),\n      ...encode.pointPosition('radius', model, {defaultPos: null}),\n      ...encode.pointPosition('theta', model, {defaultPos: null})\n    };\n  }\n};\n\nfunction align(markDef: MarkDef, encoding: Encoding<string>, config: Config<SignalRef>) {\n  const a = getMarkPropOrConfig('align', markDef, config);\n  if (a === undefined) {\n    return 'center';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n\nfunction baseline(markDef: MarkDef, encoding: Encoding<string>, config: Config<SignalRef>) {\n  const b = getMarkPropOrConfig('baseline', markDef, config);\n  if (b === undefined) {\n    return 'middle';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n"],"mappings":"AAIA,SAAQA,mBAAmB,QAAO,WAAW;AAG7C,OAAO,KAAKC,MAAM,MAAM,UAAU;AAElC,OAAO,MAAMC,IAAI,GAAiB;EAChCC,MAAM,EAAE,MAAM;EAEdC,WAAW,EAAGC,KAAgB,IAAI;IAChC,MAAM;MAACC,MAAM;MAAEC;IAAQ,CAAC,GAAGF,KAAK;IAEhC,OAAO;MACL,GAAGJ,MAAM,CAACO,eAAe,CAACH,KAAK,EAAE;QAC/BI,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE,SAAS;QACnBC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE,QAAQ;QAChBC,KAAK,EAAE;OACR,CAAC;MACF,GAAGb,MAAM,CAACc,aAAa,CAAC,GAAG,EAAEV,KAAK,EAAE;QAACW,UAAU,EAAE;MAAK,CAAC,CAAC;MACxD,GAAGf,MAAM,CAACc,aAAa,CAAC,GAAG,EAAEV,KAAK,EAAE;QAACW,UAAU,EAAE;MAAK,CAAC,CAAC;MACxD,GAAGf,MAAM,CAACC,IAAI,CAACG,KAAK,CAAC;MACrB,GAAGJ,MAAM,CAACgB,WAAW,CAAC,MAAM,EAAEZ,KAAK,EAAE;QACnCa,SAAS,EAAE,UAAU,CAAC;OACvB,CAAC;MACF,GAAGjB,MAAM,CAACgB,WAAW,CAAC,OAAO,EAAEZ,KAAK,CAAC;MACrC,GAAGJ,MAAM,CAACkB,cAAc,CAAC,OAAO,EAAEV,KAAK,CAACJ,KAAK,CAACe,OAAO,EAAEb,QAAQ,EAAED,MAAM,CAAC,CAAC;MACzE,GAAGL,MAAM,CAACkB,cAAc,CAAC,UAAU,EAAET,QAAQ,CAACL,KAAK,CAACe,OAAO,EAAEb,QAAQ,EAAED,MAAM,CAAC,CAAC;MAC/E,GAAGL,MAAM,CAACc,aAAa,CAAC,QAAQ,EAAEV,KAAK,EAAE;QAACW,UAAU,EAAE;MAAI,CAAC,CAAC;MAC5D,GAAGf,MAAM,CAACc,aAAa,CAAC,OAAO,EAAEV,KAAK,EAAE;QAACW,UAAU,EAAE;MAAI,CAAC;KAC3D;EACH;CACD;AAED,SAASP,KAAKA,CAACW,OAAgB,EAAEb,QAA0B,EAAED,MAAyB;EACpF,MAAMe,CAAC,GAAGrB,mBAAmB,CAAC,OAAO,EAAEoB,OAAO,EAAEd,MAAM,CAAC;EACvD,IAAIe,CAAC,KAAKC,SAAS,EAAE;IACnB,OAAO,QAAQ;EACjB;EACA;EACA,OAAOA,SAAS;AAClB;AAEA,SAASZ,QAAQA,CAACU,OAAgB,EAAEb,QAA0B,EAAED,MAAyB;EACvF,MAAMiB,CAAC,GAAGvB,mBAAmB,CAAC,UAAU,EAAEoB,OAAO,EAAEd,MAAM,CAAC;EAC1D,IAAIiB,CAAC,KAAKD,SAAS,EAAE;IACnB,OAAO,QAAQ;EACjB;EACA;EACA,OAAOA,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}