{"ast":null,"code":"import { isObject, isString } from 'vega-util';\nimport { dateTimeExprToExpr, dateTimeToExpr } from './datetime';\nimport { accessPathWithDatum, keys, stringify, varName } from './util';\nimport { hasOwnProperty } from 'vega';\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return hasOwnProperty(LOCAL_SINGLE_TIMEUNIT_INDEX, timeUnit);\n}\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n  yeardayofyear: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n  weekday: 1,\n  weekdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nconst BINNED_LOCAL_TIMEUNIT_INDEX = {\n  binnedyear: 1,\n  binnedyearquarter: 1,\n  binnedyearquartermonth: 1,\n  binnedyearmonth: 1,\n  binnedyearmonthdate: 1,\n  binnedyearmonthdatehours: 1,\n  binnedyearmonthdatehoursminutes: 1,\n  binnedyearmonthdatehoursminutesseconds: 1,\n  binnedyearweek: 1,\n  binnedyearweekday: 1,\n  binnedyearweekdayhours: 1,\n  binnedyearweekdayhoursminutes: 1,\n  binnedyearweekdayhoursminutesseconds: 1,\n  binnedyeardayofyear: 1\n};\nconst BINNED_UTC_TIMEUNIT_INDEX = {\n  binnedutcyear: 1,\n  binnedutcyearquarter: 1,\n  binnedutcyearquartermonth: 1,\n  binnedutcyearmonth: 1,\n  binnedutcyearmonthdate: 1,\n  binnedutcyearmonthdatehours: 1,\n  binnedutcyearmonthdatehoursminutes: 1,\n  binnedutcyearmonthdatehoursminutesseconds: 1,\n  binnedutcyearweek: 1,\n  binnedutcyearweekday: 1,\n  binnedutcyearweekdayhours: 1,\n  binnedutcyearweekdayhoursminutes: 1,\n  binnedutcyearweekdayhoursminutesseconds: 1,\n  binnedutcyeardayofyear: 1\n};\nexport const BINNED_TIMEUNIT_INDEX = {\n  ...BINNED_LOCAL_TIMEUNIT_INDEX,\n  ...BINNED_UTC_TIMEUNIT_INDEX\n};\nexport function isBinnedTimeUnit(timeUnit) {\n  if (isObject(timeUnit)) {\n    return timeUnit.binned;\n  }\n  return isBinnedTimeUnitString(timeUnit);\n}\nexport function isBinnedTimeUnitString(timeUnit) {\n  return timeUnit && timeUnit.startsWith('binned');\n}\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n  utcyeardayofyear: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n  utcweekday: 1,\n  utcweekdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nexport function isUTCTimeUnit(t) {\n  return t.startsWith('utc');\n}\nexport function getLocalTimeUnitFromUTCTimeUnit(t) {\n  return t.substring(3);\n}\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\nexport function getSmallestTimeUnitPart(timeUnit) {\n  const parts = getTimeUnitParts(timeUnit);\n  return parts[parts.length - 1];\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n  if (index < 0) {\n    return false;\n  }\n  // exclude milliseconds\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  }\n  // exclude dayofyear\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n  return true;\n}\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field) {\n  let {\n    end\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    end: false\n  };\n  const fieldRef = accessPathWithDatum(field);\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n  function func(timeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n  let lastTimeUnit;\n  const dateExpr = {};\n  for (const part of TIMEUNIT_PARTS) {\n    if (containsTimeUnit(fullTimeUnit, part)) {\n      dateExpr[part] = func(part);\n      lastTimeUnit = part;\n    }\n  }\n  if (end) {\n    dateExpr[lastTimeUnit] += '+1';\n  }\n  return dateTimeExprToExpr(dateExpr);\n}\nexport function timeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  const expr = timeUnitSpecifierExpression(timeUnit);\n  // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n  const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n  return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n  let params;\n  if (isString(timeUnit)) {\n    if (isBinnedTimeUnitString(timeUnit)) {\n      params = {\n        unit: timeUnit.substring(6),\n        binned: true\n      };\n    } else {\n      params = {\n        unit: timeUnit\n      };\n    }\n  } else if (isObject(timeUnit)) {\n    params = {\n      ...timeUnit,\n      ...(timeUnit.unit ? {\n        unit: timeUnit.unit\n      } : {})\n    };\n  }\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnitFromUTCTimeUnit(params.unit);\n  }\n  return params;\n}\nexport function timeUnitToString(tu) {\n  const {\n    utc,\n    ...rest\n  } = normalizeTimeUnit(tu);\n  if (rest.unit) {\n    return (utc ? 'utc' : '') + keys(rest).map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`)).join('');\n  } else {\n    // when maxbins is specified instead of units\n    return (utc ? 'utc' : '') + 'timeunit' + keys(rest).map(p => varName(`_${p}_${rest[p]}`)).join('');\n  }\n}\nexport function durationExpr(timeUnit) {\n  let wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  const normalizedTimeUnit = normalizeTimeUnit(timeUnit);\n  const smallestUnitPart = getSmallestTimeUnitPart(normalizedTimeUnit.unit);\n  if (smallestUnitPart && smallestUnitPart !== 'day') {\n    const startDate = {\n      year: 2001,\n      // pick a non-leap year\n      month: 1,\n      date: 1,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0\n    };\n    const {\n      step,\n      part\n    } = getDateTimePartAndStep(smallestUnitPart, normalizedTimeUnit.step);\n    const endDate = {\n      ...startDate,\n      [part]: +startDate[part] + step\n    };\n    // Calculate timestamp duration for the smallest unit listed\n    return `${wrap(dateTimeToExpr(endDate))} - ${wrap(dateTimeToExpr(startDate))}`;\n  }\n  return undefined;\n}\nconst DATE_PARTS = {\n  year: 1,\n  month: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport function isDatePart(timeUnit) {\n  return hasOwnProperty(DATE_PARTS, timeUnit);\n}\nexport function getDateTimePartAndStep(timeUnit) {\n  let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (isDatePart(timeUnit)) {\n    return {\n      part: timeUnit,\n      step\n    };\n  }\n  switch (timeUnit) {\n    case 'day':\n    case 'dayofyear':\n      return {\n        part: 'date',\n        step\n      };\n    case 'quarter':\n      return {\n        part: 'month',\n        step: step * 3\n      };\n    case 'week':\n      return {\n        part: 'date',\n        step: step * 7\n      };\n  }\n}","map":{"version":3,"names":["isObject","isString","dateTimeExprToExpr","dateTimeToExpr","accessPathWithDatum","keys","stringify","varName","hasOwnProperty","LOCAL_SINGLE_TIMEUNIT_INDEX","year","quarter","month","week","day","dayofyear","date","hours","minutes","seconds","milliseconds","TIMEUNIT_PARTS","isLocalSingleTimeUnit","timeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcweek","utcday","utcdayofyear","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","LOCAL_MULTI_TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","yearweek","yearweekday","yearweekdayhours","yearweekdayhoursminutes","yearweekdayhoursminutesseconds","yeardayofyear","quartermonth","monthdate","monthdatehours","monthdatehoursminutes","monthdatehoursminutesseconds","weekday","weekdayhours","weekdayhoursminutes","weekdayhoursminutesseconds","dayhours","dayhoursminutes","dayhoursminutesseconds","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","BINNED_LOCAL_TIMEUNIT_INDEX","binnedyear","binnedyearquarter","binnedyearquartermonth","binnedyearmonth","binnedyearmonthdate","binnedyearmonthdatehours","binnedyearmonthdatehoursminutes","binnedyearmonthdatehoursminutesseconds","binnedyearweek","binnedyearweekday","binnedyearweekdayhours","binnedyearweekdayhoursminutes","binnedyearweekdayhoursminutesseconds","binnedyeardayofyear","BINNED_UTC_TIMEUNIT_INDEX","binnedutcyear","binnedutcyearquarter","binnedutcyearquartermonth","binnedutcyearmonth","binnedutcyearmonthdate","binnedutcyearmonthdatehours","binnedutcyearmonthdatehoursminutes","binnedutcyearmonthdatehoursminutesseconds","binnedutcyearweek","binnedutcyearweekday","binnedutcyearweekdayhours","binnedutcyearweekdayhoursminutes","binnedutcyearweekdayhoursminutesseconds","binnedutcyeardayofyear","BINNED_TIMEUNIT_INDEX","isBinnedTimeUnit","binned","isBinnedTimeUnitString","startsWith","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcyearweek","utcyearweekday","utcyearweekdayhours","utcyearweekdayhoursminutes","utcyearweekdayhoursminutesseconds","utcyeardayofyear","utcquartermonth","utcmonthdate","utcmonthdatehours","utcmonthdatehoursminutes","utcmonthdatehoursminutesseconds","utcweekday","utcweekdayhours","utcweekdayhoursminutes","utcweekdayhoursminutesseconds","utcdayhours","utcdayhoursminutes","utcdayhoursminutesseconds","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","isUTCTimeUnit","t","getLocalTimeUnitFromUTCTimeUnit","substring","VEGALITE_TIMEFORMAT","getTimeUnitParts","filter","part","containsTimeUnit","getSmallestTimeUnitPart","parts","length","fullTimeUnit","index","indexOf","charAt","fieldExpr","field","end","arguments","undefined","fieldRef","utc","func","lastTimeUnit","dateExpr","timeUnitSpecifierExpression","timeUnitParts","formatExpression","isUTCScale","expr","normalizeTimeUnit","params","unit","timeUnitToString","tu","rest","map","p","join","durationExpr","wrap","x","normalizedTimeUnit","smallestUnitPart","startDate","step","getDateTimePartAndStep","endDate","DATE_PARTS","isDatePart"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\timeunit.ts"],"sourcesContent":["import {isObject, isString} from 'vega-util';\nimport {DateTime, DateTimeExpr, dateTimeExprToExpr, dateTimeToExpr} from './datetime';\nimport {accessPathWithDatum, keys, stringify, varName} from './util';\nimport {hasOwnProperty} from 'vega';\n\n/** Time Unit that only corresponds to only one part of Date objects. */\nexport const LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  week: 1,\n  day: 1,\n  dayofyear: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n} as const;\n\nexport type LocalSingleTimeUnit = keyof typeof LOCAL_SINGLE_TIMEUNIT_INDEX;\n\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\n\nexport function isLocalSingleTimeUnit(timeUnit: string): timeUnit is LocalSingleTimeUnit {\n  return hasOwnProperty(LOCAL_SINGLE_TIMEUNIT_INDEX, timeUnit);\n}\n\nexport const UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcweek: 1,\n  utcday: 1,\n  utcdayofyear: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n} as const;\n\nexport type UtcSingleTimeUnit = keyof typeof UTC_SINGLE_TIMEUNIT_INDEX;\n\nexport type SingleTimeUnit = LocalSingleTimeUnit | UtcSingleTimeUnit;\n\nexport const LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n\n  yearweek: 1,\n  yearweekday: 1,\n  yearweekdayhours: 1,\n  yearweekdayhoursminutes: 1,\n  yearweekdayhoursminutesseconds: 1,\n\n  yeardayofyear: 1,\n\n  quartermonth: 1,\n\n  monthdate: 1,\n  monthdatehours: 1,\n  monthdatehoursminutes: 1,\n  monthdatehoursminutesseconds: 1,\n\n  weekday: 1,\n  weekdayhours: 1,\n  weekdayhoursminutes: 1,\n  weekdayhoursminutesseconds: 1,\n\n  dayhours: 1,\n  dayhoursminutes: 1,\n  dayhoursminutesseconds: 1,\n\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n\n  minutesseconds: 1,\n\n  secondsmilliseconds: 1\n} as const;\n\nexport type LocalMultiTimeUnit = keyof typeof LOCAL_MULTI_TIMEUNIT_INDEX;\n\nconst BINNED_LOCAL_TIMEUNIT_INDEX = {\n  binnedyear: 1,\n  binnedyearquarter: 1,\n  binnedyearquartermonth: 1,\n\n  binnedyearmonth: 1,\n  binnedyearmonthdate: 1,\n  binnedyearmonthdatehours: 1,\n  binnedyearmonthdatehoursminutes: 1,\n  binnedyearmonthdatehoursminutesseconds: 1,\n\n  binnedyearweek: 1,\n  binnedyearweekday: 1,\n  binnedyearweekdayhours: 1,\n  binnedyearweekdayhoursminutes: 1,\n  binnedyearweekdayhoursminutesseconds: 1,\n\n  binnedyeardayofyear: 1\n} as const;\n\ntype BinnedLocalTimeUnit = keyof typeof BINNED_LOCAL_TIMEUNIT_INDEX;\n\nconst BINNED_UTC_TIMEUNIT_INDEX = {\n  binnedutcyear: 1,\n  binnedutcyearquarter: 1,\n  binnedutcyearquartermonth: 1,\n\n  binnedutcyearmonth: 1,\n  binnedutcyearmonthdate: 1,\n  binnedutcyearmonthdatehours: 1,\n  binnedutcyearmonthdatehoursminutes: 1,\n  binnedutcyearmonthdatehoursminutesseconds: 1,\n\n  binnedutcyearweek: 1,\n  binnedutcyearweekday: 1,\n  binnedutcyearweekdayhours: 1,\n  binnedutcyearweekdayhoursminutes: 1,\n  binnedutcyearweekdayhoursminutesseconds: 1,\n\n  binnedutcyeardayofyear: 1\n};\n\nexport const BINNED_TIMEUNIT_INDEX = {\n  ...BINNED_LOCAL_TIMEUNIT_INDEX,\n  ...BINNED_UTC_TIMEUNIT_INDEX\n};\n\ntype BinnedUtcTimeUnit = keyof typeof BINNED_UTC_TIMEUNIT_INDEX;\n\nexport type BinnedTimeUnit = BinnedLocalTimeUnit | BinnedUtcTimeUnit;\n\nexport function isBinnedTimeUnit(\n  timeUnit: TimeUnit | BinnedTimeUnit | TimeUnitParams | undefined\n): timeUnit is BinnedTimeUnit | TimeUnitParams {\n  if (isObject(timeUnit)) {\n    return timeUnit.binned;\n  }\n  return isBinnedTimeUnitString(timeUnit);\n}\n\nexport function isBinnedTimeUnitString(timeUnit: TimeUnit | BinnedTimeUnit | undefined): timeUnit is BinnedTimeUnit {\n  return timeUnit && timeUnit.startsWith('binned');\n}\n\nexport const UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n\n  utcyearweek: 1,\n  utcyearweekday: 1,\n  utcyearweekdayhours: 1,\n  utcyearweekdayhoursminutes: 1,\n  utcyearweekdayhoursminutesseconds: 1,\n\n  utcyeardayofyear: 1,\n\n  utcquartermonth: 1,\n\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utcmonthdatehoursminutes: 1,\n  utcmonthdatehoursminutesseconds: 1,\n\n  utcweekday: 1,\n  utcweekdayhours: 1,\n  utcweekdayhoursminutes: 1,\n  utcweekdayhoursminutesseconds: 1,\n\n  utcdayhours: 1,\n  utcdayhoursminutes: 1,\n  utcdayhoursminutesseconds: 1,\n\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n\n  utcminutesseconds: 1,\n\n  utcsecondsmilliseconds: 1\n} as const;\n\nexport type UtcMultiTimeUnit = keyof typeof UTC_MULTI_TIMEUNIT_INDEX;\n\nexport type MultiTimeUnit = LocalMultiTimeUnit | UtcMultiTimeUnit;\n\nexport type LocalTimeUnit = LocalSingleTimeUnit | LocalMultiTimeUnit;\nexport type UtcTimeUnit = UtcSingleTimeUnit | UtcMultiTimeUnit;\n\nexport function isUTCTimeUnit(t: string): t is UtcTimeUnit {\n  return t.startsWith('utc');\n}\n\nexport function getLocalTimeUnitFromUTCTimeUnit(t: UtcTimeUnit): LocalTimeUnit {\n  return t.substring(3) as LocalTimeUnit;\n}\n\nexport type TimeUnit = SingleTimeUnit | MultiTimeUnit;\n\nexport type TimeUnitFormat =\n  | 'year'\n  | 'year-month'\n  | 'year-month-date'\n  | 'quarter'\n  | 'month'\n  | 'date'\n  | 'week'\n  | 'day'\n  | 'hours'\n  | 'hours-minutes'\n  | 'minutes'\n  | 'seconds'\n  | 'milliseconds';\n\nexport interface TimeUnitTransformParams {\n  /**\n   * Defines how date-time values should be binned.\n   */\n  unit?: TimeUnit;\n\n  /**\n   * If no `unit` is specified, maxbins is used to infer time units.\n   */\n  maxbins?: number;\n\n  /**\n   * The number of steps between bins, in terms of the least\n   * significant unit provided.\n   */\n  step?: number;\n\n  /**\n   * True to use UTC timezone. Equivalent to using a `utc` prefixed `TimeUnit`.\n   */\n  utc?: boolean;\n}\n\n/**\n * Time Unit Params for encoding predicate, which can specified if the data is  already \"binned\".\n */\nexport interface TimeUnitParams extends TimeUnitTransformParams {\n  /**\n   * Whether the data has already been binned to this time unit.\n   * If true, Vega-Lite will only format the data, marks, and guides,\n   * without applying the timeUnit transform to re-bin the data again.\n   */\n  binned?: boolean;\n}\n\n// matches vega time unit format specifier\nexport type TimeFormatConfig = Partial<Record<TimeUnitFormat, string>>;\n\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT: TimeFormatConfig = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\n\nexport function getTimeUnitParts(timeUnit: TimeUnit): LocalSingleTimeUnit[] {\n  return TIMEUNIT_PARTS.filter(part => containsTimeUnit(timeUnit, part));\n}\n\nexport function getSmallestTimeUnitPart(timeUnit: TimeUnit): LocalSingleTimeUnit {\n  const parts = getTimeUnitParts(timeUnit);\n  return parts[parts.length - 1];\n}\n\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit: TimeUnit, timeUnit: TimeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n\n  if (index < 0) {\n    return false;\n  }\n\n  // exclude milliseconds\n  if (index > 0 && timeUnit === 'seconds' && fullTimeUnit.charAt(index - 1) === 'i') {\n    return false;\n  }\n\n  // exclude dayofyear\n  if (fullTimeUnit.length > index + 3 && timeUnit === 'day' && fullTimeUnit.charAt(index + 3) === 'o') {\n    return false;\n  }\n  if (index > 0 && timeUnit === 'year' && fullTimeUnit.charAt(index - 1) === 'f') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Returns Vega expression for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit: TimeUnit, field: string, {end}: {end: boolean} = {end: false}): string {\n  const fieldRef = accessPathWithDatum(field);\n\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit: TimeUnit) {\n    if (timeUnit === 'quarter') {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  let lastTimeUnit: TimeUnit;\n\n  const dateExpr: DateTimeExpr = {};\n\n  for (const part of TIMEUNIT_PARTS) {\n    if (containsTimeUnit(fullTimeUnit, part)) {\n      (dateExpr as any)[part] = func(part);\n      lastTimeUnit = part;\n    }\n  }\n\n  if (end) {\n    (dateExpr as any)[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExprToExpr(dateExpr);\n}\n\nexport function timeUnitSpecifierExpression(timeUnit: TimeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n\n/**\n * Returns the signal expression used for axis labels for a time unit.\n */\nexport function formatExpression(timeUnit: TimeUnit, field: string, isUTCScale: boolean): string {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const expr = timeUnitSpecifierExpression(timeUnit);\n\n  // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n  const utc = isUTCScale || isUTCTimeUnit(timeUnit);\n\n  return `${utc ? 'utc' : 'time'}Format(${field}, ${expr})`;\n}\n\nexport function normalizeTimeUnit(timeUnit: TimeUnit | BinnedTimeUnit | TimeUnitParams): TimeUnitParams {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  let params: TimeUnitParams;\n  if (isString(timeUnit)) {\n    if (isBinnedTimeUnitString(timeUnit)) {\n      params = {\n        unit: timeUnit.substring(6) as TimeUnit,\n        binned: true\n      };\n    } else {\n      params = {\n        unit: timeUnit\n      };\n    }\n  } else if (isObject(timeUnit)) {\n    params = {\n      ...timeUnit,\n      ...(timeUnit.unit ? {unit: timeUnit.unit} : {})\n    };\n  }\n\n  if (isUTCTimeUnit(params.unit)) {\n    params.utc = true;\n    params.unit = getLocalTimeUnitFromUTCTimeUnit(params.unit);\n  }\n\n  return params;\n}\n\nexport function timeUnitToString(tu: TimeUnit | TimeUnitTransformParams) {\n  const {utc, ...rest} = normalizeTimeUnit(tu);\n\n  if (rest.unit) {\n    return (\n      (utc ? 'utc' : '') +\n      keys(rest)\n        .map(p => varName(`${p === 'unit' ? '' : `_${p}_`}${rest[p]}`))\n        .join('')\n    );\n  } else {\n    // when maxbins is specified instead of units\n    return (\n      (utc ? 'utc' : '') +\n      'timeunit' +\n      keys(rest)\n        .map(p => varName(`_${p}_${rest[p]}`))\n        .join('')\n    );\n  }\n}\n\nexport function durationExpr(\n  timeUnit: TimeUnit | BinnedTimeUnit | TimeUnitTransformParams,\n  wrap: (x: string) => string = x => x\n) {\n  const normalizedTimeUnit = normalizeTimeUnit(timeUnit);\n  const smallestUnitPart = getSmallestTimeUnitPart(normalizedTimeUnit.unit);\n  if (smallestUnitPart && smallestUnitPart !== 'day') {\n    const startDate: DateTime = {\n      year: 2001, // pick a non-leap year\n      month: 1,\n      date: 1,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0\n    };\n    const {step, part} = getDateTimePartAndStep(smallestUnitPart, normalizedTimeUnit.step);\n    const endDate: DateTime = {\n      ...startDate,\n      [part]: +startDate[part] + step\n    };\n\n    // Calculate timestamp duration for the smallest unit listed\n    return `${wrap(dateTimeToExpr(endDate))} - ${wrap(dateTimeToExpr(startDate))}`;\n  }\n  return undefined;\n}\n\nconst DATE_PARTS = {\n  year: 1,\n  month: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n} as const;\n\ntype DatePart = keyof typeof DATE_PARTS;\n\nexport function isDatePart(timeUnit: LocalSingleTimeUnit): timeUnit is DatePart {\n  return hasOwnProperty(DATE_PARTS, timeUnit);\n}\n\nexport function getDateTimePartAndStep(\n  timeUnit: LocalSingleTimeUnit,\n  step = 1\n): {\n  part: keyof DateTime;\n  step: number;\n} {\n  if (isDatePart(timeUnit)) {\n    return {part: timeUnit, step};\n  }\n  switch (timeUnit) {\n    case 'day':\n    case 'dayofyear':\n      return {part: 'date', step};\n    case 'quarter':\n      return {part: 'month', step: step * 3};\n    case 'week':\n      return {part: 'date', step: step * 7};\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}