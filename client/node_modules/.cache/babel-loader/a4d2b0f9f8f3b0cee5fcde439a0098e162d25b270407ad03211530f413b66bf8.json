{"ast":null,"code":"import { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig, isObject } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const duplicate = structuredClone;\nexport function never(message) {\n  throw new Error(message);\n}\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick(obj, props) {\n  const copy = {};\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit(obj, props) {\n  const copy = {\n    ...obj\n  };\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n  return `Set(${[...this].map(x => stringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n  const str = isString(a) ? a : stringify(a);\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.includes(item);\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest) {\n  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    src[_key - 1] = arguments[_key];\n  }\n  for (const s of src) {\n    deepMerge_(dest, s ?? {});\n  }\n  return dest;\n}\nfunction deepMerge_(dest, src) {\n  for (const property of keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\nexport function unique(values, f) {\n  const results = [];\n  const u = {};\n  let v;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    u[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n/**\n * Returns true if the two dictionaries agree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function hasIntersection(a, b) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function prefixGenerator(a) {\n  const prefixes = new Set();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : `[${y}]`);\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    for (const y of computedPrefixes) {\n      prefixes.add(y);\n    }\n  }\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj) {\n  return keys(obj).length === 0;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\n// Stricter version from https://github.com/microsoft/TypeScript/issues/51572#issuecomment-1319153323\nexport const vals = Object.values;\n// Stricter version from https://github.com/microsoft/TypeScript/issues/51572#issuecomment-1319153323\nexport const entries = Object.entries;\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return `!(${logicalExpr(op.not, cb)})`;\n  } else if (isLogicalAnd(op)) {\n    return `(${op.and.map(and => logicalExpr(and, cb)).join(') && (')})`;\n  } else if (isLogicalOr(op)) {\n    return `(${op.or.map(or => logicalExpr(or, cb)).join(') || (')})`;\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return isEmpty(obj);\n}\nexport function titleCase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path) {\n  let datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path) {\n  let datum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'datum';\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\nfunction escapePathAccess(string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n  return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args.find(a => a !== undefined);\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n  return name.startsWith('__');\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n  if (angle === undefined) {\n    return undefined;\n  }\n  return (angle % 360 + 360) % 360;\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  }\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}\nconst clonedProto = Object.getPrototypeOf(structuredClone({}));\n/**\n * Compares two values for equality, including arrays and objects.\n *\n * Adapted from https://github.com/epoberezkin/fast-deep-equal.\n */\nexport function deepEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    // compare names to avoid issues with structured clone\n    if (a.constructor.name !== b.constructor.name) return false;\n    let length;\n    let i;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (const e of a.entries()) if (!b.has(e[0])) return false;\n      for (const e of a.entries()) if (!deepEqual(e[1], b.get(e[0]))) return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (const e of a.entries()) if (!b.has(e[0])) return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // also compare to structured clone prototype\n    if (a.valueOf !== Object.prototype.valueOf && a.valueOf !== clonedProto.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && a.toString !== clonedProto.toString) return a.toString() === b.toString();\n    const ks = Object.keys(a);\n    length = ks.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, ks[i])) return false;\n    for (i = length; i-- !== 0;) {\n      const key = ks[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n/**\n * Converts any object to a string representation that can be consumed by humans.\n *\n * Adapted from https://github.com/epoberezkin/fast-json-stable-stringify\n */\nexport function stringify(data) {\n  const seen = [];\n  return function _stringify(node) {\n    if (node && node.toJSON && typeof node.toJSON === 'function') {\n      node = node.toJSON();\n    }\n    if (node === undefined) return undefined;\n    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n    if (typeof node !== 'object') return JSON.stringify(node);\n    let i, out;\n    if (Array.isArray(node)) {\n      out = '[';\n      for (i = 0; i < node.length; i++) {\n        if (i) out += ',';\n        out += _stringify(node[i]) || 'null';\n      }\n      return out + ']';\n    }\n    if (node === null) return 'null';\n    if (seen.includes(node)) {\n      throw new TypeError('Converting circular structure to JSON');\n    }\n    const seenIndex = seen.push(node) - 1;\n    const ks = Object.keys(node).sort();\n    out = '';\n    for (i = 0; i < ks.length; i++) {\n      const key = ks[i];\n      const value = _stringify(node[key]);\n      if (!value) continue;\n      if (out) out += ',';\n      out += JSON.stringify(key) + ':' + value;\n    }\n    seen.splice(seenIndex, 1);\n    return `{${out}}`;\n  }(data);\n}\n/**\n * Check if the input object has the property and it's not undefined.\n *\n * @param object the object\n * @param property the property to search\n * @returns if the object has the property and it's not undefined.\n */\nexport function hasProperty(obj, key) {\n  return isObject(obj) && hasOwnProperty(obj, key) && obj[key] !== undefined;\n}","map":{"version":3,"names":["hasOwnProperty","isNumber","isString","splitAccessPath","stringValue","writeConfig","isObject","isLogicalAnd","isLogicalNot","isLogicalOr","duplicate","structuredClone","never","message","Error","pick","obj","props","copy","prop","omit","Set","prototype","map","x","stringify","join","hash","a","str","length","h","i","char","charCodeAt","isNullOrFalse","contains","array","item","includes","some","arr","f","k","entries","every","mergeDeep","dest","_len","arguments","src","Array","_key","s","deepMerge_","property","keys","unique","values","results","u","v","val","push","isEqual","dict","other","dictKeys","otherKeys","key","setEqual","b","size","e","has","hasIntersection","prefixGenerator","prefixes","splitField","wrappedWithAccessors","y","computedPrefixes","_","slice","add","fieldIntersection","undefined","isEmpty","Object","vals","isBoolean","varName","alphanumericS","replace","match","logicalExpr","op","cb","not","and","or","deleteNestedProperty","orderedProps","shift","titleCase","charAt","toUpperCase","substr","accessPathWithDatum","path","datum","pieces","prefix","flatAccessWithDatum","escapePathAccess","string","replacePathInField","replaceAll","find","replacement","RegExp","removePathFromField","accessPathDepth","getFirstDefined","_len2","args","_key2","idCounter","uniqueId","id","String","resetIdCounter","internalField","name","isInternalField","startsWith","normalizeAngle","angle","isNumeric","value","isNaN","parseFloat","clonedProto","getPrototypeOf","deepEqual","constructor","isArray","Map","get","ArrayBuffer","isView","source","flags","valueOf","toString","ks","call","data","seen","_stringify","node","toJSON","isFinite","JSON","out","TypeError","seenIndex","sort","splice","hasProperty"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\util.ts"],"sourcesContent":["import {hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig, isObject} from 'vega-util';\nimport {isLogicalAnd, isLogicalNot, isLogicalOr, LogicalComposition} from './logical';\n\nexport const duplicate = structuredClone;\n\nexport function never(message: string): never {\n  throw new Error(message);\n}\n\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function pick<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Pick<T, K> {\n  const copy: any = {};\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function omit<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Omit<T, K> {\n  const copy = {...(obj as any)};\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n(Set.prototype as any)['toJSON'] = function () {\n  return `Set(${[...this].map(x => stringify(x)).join(',')})`;\n};\n\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a: any): string | number {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stringify(a);\n\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n  return h;\n}\n\nexport function isNullOrFalse(x: any): x is false | null {\n  return x === false || x === null;\n}\n\nexport function contains<T>(array: readonly T[], item: T) {\n  return array.includes(item);\n}\n\n/**\n * Returns true if any item returns true.\n */\nexport function some<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if all items return true.\n */\nexport function every<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Like TS Partial but applies recursively to all properties.\n */\nexport type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\n\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep<T>(dest: T, ...src: readonly DeepPartial<T>[]): T {\n  for (const s of src) {\n    deepMerge_(dest, s ?? {});\n  }\n  return dest;\n}\n\nfunction deepMerge_(dest: any, src: any) {\n  for (const property of keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique<T>(values: readonly T[], f: (item: T) => string | number): T[] {\n  const results: T[] = [];\n  const u = {};\n  let v: string | number;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    (u as any)[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n\nexport type Dict<T> = Record<string, T>;\n\n/**\n * Returns true if the two dictionaries agree. Applies only to defined values.\n */\nexport function isEqual<T>(dict: Dict<T>, other: Dict<T>) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function setEqual<T>(a: Set<T>, b: Set<T>) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function hasIntersection<T>(a: ReadonlySet<T>, b: ReadonlySet<T>) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function prefixGenerator(a: ReadonlySet<string>): ReadonlySet<string> {\n  const prefixes = new Set<string>();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    for (const y of computedPrefixes) {\n      prefixes.add(y);\n    }\n  }\n  return prefixes;\n}\n\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a: ReadonlySet<string>, b: ReadonlySet<string>): boolean {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isEmpty(obj: object) {\n  return keys(obj).length === 0;\n}\n\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\n\n// Stricter version from https://github.com/microsoft/TypeScript/issues/51572#issuecomment-1319153323\nexport const vals = Object.values as <T>(obj: T) => Array<T[keyof T]>;\n\n// Stricter version from https://github.com/microsoft/TypeScript/issues/51572#issuecomment-1319153323\nexport const entries = Object.entries as <T>(obj: T) => Array<[keyof T, T[keyof T]]>;\n\n// Using mapped type to declare a collect of flags for a string literal type S\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\nexport type Flag<S extends string> = {[K in S]: 1};\n\nexport function isBoolean(b: any): b is boolean {\n  return b === true || b === false;\n}\n\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s: string): string {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\n\nexport function logicalExpr<T>(op: LogicalComposition<T>, cb: (...args: readonly any[]) => string): string {\n  if (isLogicalNot(op)) {\n    return `!(${logicalExpr(op.not, cb)})`;\n  } else if (isLogicalAnd(op)) {\n    return `(${op.and.map((and: LogicalComposition<T>) => logicalExpr(and, cb)).join(') && (')})`;\n  } else if (isLogicalOr(op)) {\n    return `(${op.or.map((or: LogicalComposition<T>) => logicalExpr(or, cb)).join(') || (')})`;\n  } else {\n    return cb(op);\n  }\n}\n\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj: any, orderedProps: string[]) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift()!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (prop in obj && deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return isEmpty(obj);\n}\n\nexport function titleCase(s: string) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path: string, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path: string, datum: 'datum' | 'parent' | 'datum.datum' = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n\nfunction escapePathAccess(string: string) {\n  return string.replace(/(\\[|\\]|\\.|'|\")/g, '\\\\$1');\n}\n\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path: string) {\n  return `${splitAccessPath(path).map(escapePathAccess).join('\\\\.')}`;\n}\n\n/**\n * Replace all occurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string: string, find: string, replacement: string) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path: string) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path: string) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined<T>(...args: readonly T[]): T | undefined {\n  return args.find(a => a !== undefined);\n}\n\n// variable used to generate id\nlet idCounter = 42;\n\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix?: string) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\n\nexport function internalField(name: string) {\n  return isInternalField(name) ? name : `__${name}`;\n}\n\nexport function isInternalField(name: string) {\n  return name.startsWith('__');\n}\n\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle: number) {\n  if (angle === undefined) {\n    return undefined;\n  }\n  return ((angle % 360) + 360) % 360;\n}\n\n/**\n * Returns whether the passed in value is a valid number.\n */\nexport function isNumeric(value: number | string): boolean {\n  if (isNumber(value)) {\n    return true;\n  }\n  return !isNaN(value as any) && !isNaN(parseFloat(value));\n}\n\nconst clonedProto = Object.getPrototypeOf(structuredClone({}));\n\n/**\n * Compares two values for equality, including arrays and objects.\n *\n * Adapted from https://github.com/epoberezkin/fast-deep-equal.\n */\nexport function deepEqual(a: any, b: any) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    // compare names to avoid issues with structured clone\n    if (a.constructor.name !== b.constructor.name) return false;\n\n    let length;\n    let i: number;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (const e of a.entries()) if (!b.has(e[0])) return false;\n      for (const e of a.entries()) if (!deepEqual(e[1], b.get(e[0]))) return false;\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (const e of a.entries()) if (!b.has(e[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = (a as any).length;\n      if (length != (b as any).length) return false;\n      for (i = length; i-- !== 0; ) if ((a as any)[i] !== (b as any)[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // also compare to structured clone prototype\n    if (a.valueOf !== Object.prototype.valueOf && a.valueOf !== clonedProto.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && a.toString !== clonedProto.toString)\n      return a.toString() === b.toString();\n\n    const ks = Object.keys(a);\n    length = ks.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(b, ks[i])) return false;\n\n    for (i = length; i-- !== 0; ) {\n      const key = ks[i];\n\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b;\n}\n\n/**\n * Converts any object to a string representation that can be consumed by humans.\n *\n * Adapted from https://github.com/epoberezkin/fast-json-stable-stringify\n */\nexport function stringify(data: any) {\n  const seen: any[] = [];\n\n  return (function _stringify(node: any) {\n    if (node && node.toJSON && typeof node.toJSON === 'function') {\n      node = node.toJSON();\n    }\n\n    if (node === undefined) return undefined;\n    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n    if (typeof node !== 'object') return JSON.stringify(node);\n\n    let i, out;\n    if (Array.isArray(node)) {\n      out = '[';\n      for (i = 0; i < node.length; i++) {\n        if (i) out += ',';\n        out += _stringify(node[i]) || 'null';\n      }\n      return out + ']';\n    }\n\n    if (node === null) return 'null';\n\n    if (seen.includes(node)) {\n      throw new TypeError('Converting circular structure to JSON');\n    }\n\n    const seenIndex = seen.push(node) - 1;\n    const ks = Object.keys(node).sort();\n    out = '';\n    for (i = 0; i < ks.length; i++) {\n      const key = ks[i];\n      const value = _stringify(node[key]);\n\n      if (!value) continue;\n      if (out) out += ',';\n      out += JSON.stringify(key) + ':' + value;\n    }\n    seen.splice(seenIndex, 1);\n    return `{${out}}`;\n  })(data);\n}\n\n/**\n * Check if the input object has the property and it's not undefined.\n *\n * @param object the object\n * @param property the property to search\n * @returns if the object has the property and it's not undefined.\n */\nexport function hasProperty<T>(obj: T, key: string | number | symbol): key is keyof T {\n  return isObject(obj) && hasOwnProperty(obj, key) && (obj as any)[key] !== undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}