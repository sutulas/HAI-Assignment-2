{"ast":null,"code":"import { isFieldDef, vgField } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport * as encode from './encode';\nexport const geoshape = {\n  vgMark: 'shape',\n  encodeEntry: model => {\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore',\n        theta: 'ignore'\n      })\n    };\n  },\n  postEncodingTransform: model => {\n    const {\n      encoding\n    } = model;\n    const shapeDef = encoding.shape;\n    const transform = {\n      type: 'geoshape',\n      projection: model.projectionName(),\n      // as: 'shape',\n      ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {\n        field: vgField(shapeDef, {\n          expr: 'datum'\n        })\n      } : {})\n    };\n    return [transform];\n  }\n};","map":{"version":3,"names":["isFieldDef","vgField","GEOJSON","encode","geoshape","vgMark","encodeEntry","model","baseEncodeEntry","align","baseline","color","size","orient","theta","postEncodingTransform","encoding","shapeDef","shape","transform","type","projection","projectionName","field","expr"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\geoshape.ts"],"sourcesContent":["import {GeoShapeTransform as VgGeoShapeTransform} from 'vega';\nimport {isFieldDef, vgField} from '../../channeldef';\nimport {GEOJSON} from '../../type';\nimport {VgPostEncodingTransform} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const geoshape: MarkCompiler = {\n  vgMark: 'shape',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore',\n        theta: 'ignore'\n      })\n    };\n  },\n  postEncodingTransform: (model: UnitModel): VgPostEncodingTransform[] => {\n    const {encoding} = model;\n    const shapeDef = encoding.shape;\n\n    const transform: VgGeoShapeTransform = {\n      type: 'geoshape',\n      projection: model.projectionName(),\n      // as: 'shape',\n      ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n        ? {field: vgField(shapeDef, {expr: 'datum'})}\n        : {})\n    };\n    return [transform];\n  }\n};\n"],"mappings":"AACA,SAAQA,UAAU,EAAEC,OAAO,QAAO,kBAAkB;AACpD,SAAQC,OAAO,QAAO,YAAY;AAIlC,OAAO,KAAKC,MAAM,MAAM,UAAU;AAElC,OAAO,MAAMC,QAAQ,GAAiB;EACpCC,MAAM,EAAE,OAAO;EACfC,WAAW,EAAGC,KAAgB,IAAI;IAChC,OAAO;MACL,GAAGJ,MAAM,CAACK,eAAe,CAACD,KAAK,EAAE;QAC/BE,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE,QAAQ;QAChBC,KAAK,EAAE;OACR;KACF;EACH,CAAC;EACDC,qBAAqB,EAAGR,KAAgB,IAA+B;IACrE,MAAM;MAACS;IAAQ,CAAC,GAAGT,KAAK;IACxB,MAAMU,QAAQ,GAAGD,QAAQ,CAACE,KAAK;IAE/B,MAAMC,SAAS,GAAwB;MACrCC,IAAI,EAAE,UAAU;MAChBC,UAAU,EAAEd,KAAK,CAACe,cAAc,EAAE;MAClC;MACA,IAAIL,QAAQ,IAAIjB,UAAU,CAACiB,QAAQ,CAAC,IAAIA,QAAQ,CAACG,IAAI,KAAKlB,OAAO,GAC7D;QAACqB,KAAK,EAAEtB,OAAO,CAACgB,QAAQ,EAAE;UAACO,IAAI,EAAE;QAAO,CAAC;MAAC,CAAC,GAC3C,EAAE;KACP;IACD,OAAO,CAACL,SAAS,CAAC;EACpB;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}