{"ast":null,"code":"import { array, isString } from 'vega-util';\nimport * as log from '../../log';\nimport { isLookupData, isLookupSelection } from '../../transform';\nimport { duplicate, hash, varName } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nimport { DataSourceType } from '../../data';\nexport class LookupNode extends DataFlowNode {\n  clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n  constructor(parent, transform, secondary) {\n    super(parent);\n    this.transform = transform;\n    this.secondary = secondary;\n  }\n  static make(parent, model, transform, counter) {\n    const sources = model.component.data.sources;\n    const {\n      from\n    } = transform;\n    let fromOutputNode = null;\n    if (isLookupData(from)) {\n      let fromSource = findSource(from.data, sources);\n      if (!fromSource) {\n        fromSource = new SourceNode(from.data);\n        sources.push(fromSource);\n      }\n      const fromOutputName = model.getName(`lookup_${counter}`);\n      fromOutputNode = new OutputNode(fromSource, fromOutputName, DataSourceType.Lookup, model.component.data.outputNodeRefCounts);\n      model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n    } else if (isLookupSelection(from)) {\n      const selName = from.param;\n      transform = {\n        as: selName,\n        ...transform\n      };\n      let selCmpt;\n      try {\n        selCmpt = model.getSelectionComponent(varName(selName), selName);\n      } catch (e) {\n        throw new Error(log.message.cannotLookupVariableParameter(selName));\n      }\n      fromOutputNode = selCmpt.materialized;\n      if (!fromOutputNode) {\n        throw new Error(log.message.noSameUnitLookup(selName));\n      }\n    }\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n  dependentFields() {\n    return new Set([this.transform.lookup]);\n  }\n  producedFields() {\n    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n  }\n  hash() {\n    return `Lookup ${hash({\n      transform: this.transform,\n      secondary: this.secondary\n    })}`;\n  }\n  assemble() {\n    let foreign;\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = {\n        values: this.transform.from.fields,\n        ...(this.transform.as ? {\n          as: array(this.transform.as)\n        } : {})\n      };\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n      foreign = {\n        as: [asName]\n      };\n    }\n    return {\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup],\n      ...foreign,\n      ...(this.transform.default ? {\n        default: this.transform.default\n      } : {})\n    };\n  }\n}","map":{"version":3,"names":["array","isString","log","isLookupData","isLookupSelection","duplicate","hash","varName","DataFlowNode","OutputNode","findSource","SourceNode","DataSourceType","LookupNode","clone","transform","secondary","constructor","parent","make","model","counter","sources","component","data","from","fromOutputNode","fromSource","push","fromOutputName","getName","Lookup","outputNodeRefCounts","outputNodes","selName","param","as","selCmpt","getSelectionComponent","e","Error","message","cannotLookupVariableParameter","materialized","noSameUnitLookup","getSource","dependentFields","Set","lookup","producedFields","fields","assemble","foreign","values","asName","warn","NO_FIELDS_NEEDS_AS","type","key","default"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\lookup.ts"],"sourcesContent":["import {LookupTransform as VgLookupTransform} from 'vega';\nimport {array, isString} from 'vega-util';\nimport * as log from '../../log';\nimport {isLookupData, isLookupSelection, LookupTransform} from '../../transform';\nimport {duplicate, hash, varName} from '../../util';\nimport {Model} from '../model';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {findSource} from './parse';\nimport {SourceNode} from './source';\nimport {DataSourceType} from '../../data';\n\nexport class LookupNode extends DataFlowNode {\n  public clone() {\n    return new LookupNode(null, duplicate(this.transform), this.secondary);\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    public readonly transform: LookupTransform,\n    public readonly secondary: string\n  ) {\n    super(parent);\n  }\n\n  public static make(parent: DataFlowNode, model: Model, transform: LookupTransform, counter: number) {\n    const sources = model.component.data.sources;\n    const {from} = transform;\n    let fromOutputNode = null;\n\n    if (isLookupData(from)) {\n      let fromSource = findSource(from.data, sources);\n\n      if (!fromSource) {\n        fromSource = new SourceNode(from.data);\n        sources.push(fromSource);\n      }\n\n      const fromOutputName = model.getName(`lookup_${counter}`);\n      fromOutputNode = new OutputNode(\n        fromSource,\n        fromOutputName,\n        DataSourceType.Lookup,\n        model.component.data.outputNodeRefCounts\n      );\n      model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n    } else if (isLookupSelection(from)) {\n      const selName = from.param;\n      transform = {as: selName, ...transform};\n      let selCmpt;\n\n      try {\n        selCmpt = model.getSelectionComponent(varName(selName), selName);\n      } catch (e) {\n        throw new Error(log.message.cannotLookupVariableParameter(selName));\n      }\n\n      fromOutputNode = selCmpt.materialized;\n      if (!fromOutputNode) {\n        throw new Error(log.message.noSameUnitLookup(selName));\n      }\n    }\n\n    return new LookupNode(parent, transform, fromOutputNode.getSource());\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.lookup]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n  }\n\n  public hash() {\n    return `Lookup ${hash({transform: this.transform, secondary: this.secondary})}`;\n  }\n\n  public assemble(): VgLookupTransform {\n    let foreign: Partial<VgLookupTransform>;\n\n    if (this.transform.from.fields) {\n      // lookup a few fields and add create a flat output\n      foreign = {\n        values: this.transform.from.fields,\n        ...(this.transform.as ? {as: array(this.transform.as)} : {})\n      };\n    } else {\n      // lookup full record and nest it\n      let asName = this.transform.as;\n      if (!isString(asName)) {\n        log.warn(log.message.NO_FIELDS_NEEDS_AS);\n        asName = '_lookup';\n      }\n\n      foreign = {\n        as: [asName]\n      };\n    }\n\n    return {\n      type: 'lookup',\n      from: this.secondary,\n      key: this.transform.from.key,\n      fields: [this.transform.lookup],\n      ...foreign,\n      ...(this.transform.default ? {default: this.transform.default} : {})\n    };\n  }\n}\n"],"mappings":"AACA,SAAQA,KAAK,EAAEC,QAAQ,QAAO,WAAW;AACzC,OAAO,KAAKC,GAAG,MAAM,WAAW;AAChC,SAAQC,YAAY,EAAEC,iBAAiB,QAAwB,iBAAiB;AAChF,SAAQC,SAAS,EAAEC,IAAI,EAAEC,OAAO,QAAO,YAAY;AAEnD,SAAQC,YAAY,EAAEC,UAAU,QAAO,YAAY;AACnD,SAAQC,UAAU,QAAO,SAAS;AAClC,SAAQC,UAAU,QAAO,UAAU;AACnC,SAAQC,cAAc,QAAO,YAAY;AAEzC,OAAM,MAAOC,UAAW,SAAQL,YAAY;EACnCM,KAAKA,CAAA;IACV,OAAO,IAAID,UAAU,CAAC,IAAI,EAAER,SAAS,CAAC,IAAI,CAACU,SAAS,CAAC,EAAE,IAAI,CAACC,SAAS,CAAC;EACxE;EAEAC,YACEC,MAAoB,EACJH,SAA0B,EAC1BC,SAAiB;IAEjC,KAAK,CAACE,MAAM,CAAC;IAHG,KAAAH,SAAS,GAATA,SAAS;IACT,KAAAC,SAAS,GAATA,SAAS;EAG3B;EAEO,OAAOG,IAAIA,CAACD,MAAoB,EAAEE,KAAY,EAAEL,SAA0B,EAAEM,OAAe;IAChG,MAAMC,OAAO,GAAGF,KAAK,CAACG,SAAS,CAACC,IAAI,CAACF,OAAO;IAC5C,MAAM;MAACG;IAAI,CAAC,GAAGV,SAAS;IACxB,IAAIW,cAAc,GAAG,IAAI;IAEzB,IAAIvB,YAAY,CAACsB,IAAI,CAAC,EAAE;MACtB,IAAIE,UAAU,GAAGjB,UAAU,CAACe,IAAI,CAACD,IAAI,EAAEF,OAAO,CAAC;MAE/C,IAAI,CAACK,UAAU,EAAE;QACfA,UAAU,GAAG,IAAIhB,UAAU,CAACc,IAAI,CAACD,IAAI,CAAC;QACtCF,OAAO,CAACM,IAAI,CAACD,UAAU,CAAC;MAC1B;MAEA,MAAME,cAAc,GAAGT,KAAK,CAACU,OAAO,CAAC,UAAUT,OAAO,EAAE,CAAC;MACzDK,cAAc,GAAG,IAAIjB,UAAU,CAC7BkB,UAAU,EACVE,cAAc,EACdjB,cAAc,CAACmB,MAAM,EACrBX,KAAK,CAACG,SAAS,CAACC,IAAI,CAACQ,mBAAmB,CACzC;MACDZ,KAAK,CAACG,SAAS,CAACC,IAAI,CAACS,WAAW,CAACJ,cAAc,CAAC,GAAGH,cAAc;IACnE,CAAC,MAAM,IAAItB,iBAAiB,CAACqB,IAAI,CAAC,EAAE;MAClC,MAAMS,OAAO,GAAGT,IAAI,CAACU,KAAK;MAC1BpB,SAAS,GAAG;QAACqB,EAAE,EAAEF,OAAO;QAAE,GAAGnB;MAAS,CAAC;MACvC,IAAIsB,OAAO;MAEX,IAAI;QACFA,OAAO,GAAGjB,KAAK,CAACkB,qBAAqB,CAAC/B,OAAO,CAAC2B,OAAO,CAAC,EAAEA,OAAO,CAAC;MAClE,CAAC,CAAC,OAAOK,CAAC,EAAE;QACV,MAAM,IAAIC,KAAK,CAACtC,GAAG,CAACuC,OAAO,CAACC,6BAA6B,CAACR,OAAO,CAAC,CAAC;MACrE;MAEAR,cAAc,GAAGW,OAAO,CAACM,YAAY;MACrC,IAAI,CAACjB,cAAc,EAAE;QACnB,MAAM,IAAIc,KAAK,CAACtC,GAAG,CAACuC,OAAO,CAACG,gBAAgB,CAACV,OAAO,CAAC,CAAC;MACxD;IACF;IAEA,OAAO,IAAIrB,UAAU,CAACK,MAAM,EAAEH,SAAS,EAAEW,cAAc,CAACmB,SAAS,EAAE,CAAC;EACtE;EAEOC,eAAeA,CAAA;IACpB,OAAO,IAAIC,GAAG,CAAC,CAAC,IAAI,CAAChC,SAAS,CAACiC,MAAM,CAAC,CAAC;EACzC;EAEOC,cAAcA,CAAA;IACnB,OAAO,IAAIF,GAAG,CAAC,IAAI,CAAChC,SAAS,CAACqB,EAAE,GAAGpC,KAAK,CAAC,IAAI,CAACe,SAAS,CAACqB,EAAE,CAAC,GAAG,IAAI,CAACrB,SAAS,CAACU,IAAI,CAACyB,MAAM,CAAC;EAC3F;EAEO5C,IAAIA,CAAA;IACT,OAAO,UAAUA,IAAI,CAAC;MAACS,SAAS,EAAE,IAAI,CAACA,SAAS;MAAEC,SAAS,EAAE,IAAI,CAACA;IAAS,CAAC,CAAC,EAAE;EACjF;EAEOmC,QAAQA,CAAA;IACb,IAAIC,OAAmC;IAEvC,IAAI,IAAI,CAACrC,SAAS,CAACU,IAAI,CAACyB,MAAM,EAAE;MAC9B;MACAE,OAAO,GAAG;QACRC,MAAM,EAAE,IAAI,CAACtC,SAAS,CAACU,IAAI,CAACyB,MAAM;QAClC,IAAI,IAAI,CAACnC,SAAS,CAACqB,EAAE,GAAG;UAACA,EAAE,EAAEpC,KAAK,CAAC,IAAI,CAACe,SAAS,CAACqB,EAAE;QAAC,CAAC,GAAG,EAAE;OAC5D;IACH,CAAC,MAAM;MACL;MACA,IAAIkB,MAAM,GAAG,IAAI,CAACvC,SAAS,CAACqB,EAAE;MAC9B,IAAI,CAACnC,QAAQ,CAACqD,MAAM,CAAC,EAAE;QACrBpD,GAAG,CAACqD,IAAI,CAACrD,GAAG,CAACuC,OAAO,CAACe,kBAAkB,CAAC;QACxCF,MAAM,GAAG,SAAS;MACpB;MAEAF,OAAO,GAAG;QACRhB,EAAE,EAAE,CAACkB,MAAM;OACZ;IACH;IAEA,OAAO;MACLG,IAAI,EAAE,QAAQ;MACdhC,IAAI,EAAE,IAAI,CAACT,SAAS;MACpB0C,GAAG,EAAE,IAAI,CAAC3C,SAAS,CAACU,IAAI,CAACiC,GAAG;MAC5BR,MAAM,EAAE,CAAC,IAAI,CAACnC,SAAS,CAACiC,MAAM,CAAC;MAC/B,GAAGI,OAAO;MACV,IAAI,IAAI,CAACrC,SAAS,CAAC4C,OAAO,GAAG;QAACA,OAAO,EAAE,IAAI,CAAC5C,SAAS,CAAC4C;MAAO,CAAC,GAAG,EAAE;KACpE;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}