{"ast":null,"code":"import { DataSourceType } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { StackNode } from './stack';\nimport { WindowTransformNode } from './window';\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n  function clone(node) {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (copy instanceof AggregateNode || copy instanceof StackNode || copy instanceof WindowTransformNode || copy instanceof JoinAggregateTransformNode) {\n        copy.addDimensions(facet.fields);\n      }\n      for (const n of node.children.flatMap(clone)) {\n        n.parent = copy;\n      }\n      return [copy];\n    }\n    return node.children.flatMap(clone);\n  }\n  return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      const child = node.children[0];\n      if (child instanceof AggregateNode || child instanceof StackNode || child instanceof WindowTransformNode || child instanceof JoinAggregateTransformNode) {\n        child.addDimensions(node.fields);\n      }\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n      const facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain);\n      // replicate the subtree and place it before the facet's main node\n      const cloner = cloneSubtree(node);\n      const copy = node.children.map(cloner).flat();\n      for (const c of copy) {\n        c.parent = facetMain;\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\nfunction moveMainDownToFacet(node) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}","map":{"version":3,"names":["DataSourceType","AggregateNode","OutputNode","FacetNode","JoinAggregateTransformNode","FACET_SCALE_PREFIX","StackNode","WindowTransformNode","cloneSubtree","facet","clone","node","copy","newName","getSource","setSource","model","component","data","outputNodes","addDimensions","fields","n","children","flatMap","parent","moveFacetDown","numChildren","child","swapWithParent","facetMain","main","moveMainDownToFacet","cloner","map","flat","c","type","Main"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\data\\subtree.ts"],"sourcesContent":["import {DataSourceType} from '../../data';\nimport {AggregateNode} from './aggregate';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {JoinAggregateTransformNode} from './joinaggregate';\nimport {FACET_SCALE_PREFIX} from './optimize';\nimport {StackNode} from './stack';\nimport {WindowTransformNode} from './window';\n\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet: FacetNode) {\n  function clone(node: DataFlowNode): DataFlowNode[] {\n    if (!(node instanceof FacetNode)) {\n      const copy = node.clone();\n\n      if (copy instanceof OutputNode) {\n        const newName = FACET_SCALE_PREFIX + copy.getSource();\n        copy.setSource(newName);\n\n        facet.model.component.data.outputNodes[newName] = copy;\n      } else if (\n        copy instanceof AggregateNode ||\n        copy instanceof StackNode ||\n        copy instanceof WindowTransformNode ||\n        copy instanceof JoinAggregateTransformNode\n      ) {\n        copy.addDimensions(facet.fields);\n      }\n      for (const n of node.children.flatMap(clone)) {\n        n.parent = copy;\n      }\n\n      return [copy];\n    }\n\n    return node.children.flatMap(clone);\n  }\n  return clone;\n}\n\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node: DataFlowNode) {\n  if (node instanceof FacetNode) {\n    if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n      // move down until we hit a fork or output node\n      const child = node.children[0];\n\n      if (\n        child instanceof AggregateNode ||\n        child instanceof StackNode ||\n        child instanceof WindowTransformNode ||\n        child instanceof JoinAggregateTransformNode\n      ) {\n        child.addDimensions(node.fields);\n      }\n\n      child.swapWithParent();\n      moveFacetDown(node);\n    } else {\n      // move main to facet\n\n      const facetMain = node.model.component.data.main;\n      moveMainDownToFacet(facetMain);\n\n      // replicate the subtree and place it before the facet's main node\n      const cloner = cloneSubtree(node);\n      const copy: DataFlowNode[] = node.children.map(cloner).flat();\n      for (const c of copy) {\n        c.parent = facetMain;\n      }\n    }\n  } else {\n    node.children.map(moveFacetDown);\n  }\n}\n\nfunction moveMainDownToFacet(node: DataFlowNode) {\n  if (node instanceof OutputNode && node.type === DataSourceType.Main) {\n    if (node.numChildren() === 1) {\n      const child = node.children[0];\n      if (!(child instanceof FacetNode)) {\n        child.swapWithParent();\n        moveMainDownToFacet(node);\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}