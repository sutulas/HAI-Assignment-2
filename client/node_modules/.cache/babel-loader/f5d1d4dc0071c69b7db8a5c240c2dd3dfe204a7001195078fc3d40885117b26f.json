{"ast":null,"code":"import { hasOwnProperty } from 'vega-util';\nimport { hasProperty, keys } from './util';\n/**\n * All types of primitive marks.\n */\nexport const Mark = {\n  arc: 'arc',\n  area: 'area',\n  bar: 'bar',\n  image: 'image',\n  line: 'line',\n  point: 'point',\n  rect: 'rect',\n  rule: 'rule',\n  text: 'text',\n  tick: 'tick',\n  trail: 'trail',\n  circle: 'circle',\n  square: 'square',\n  geoshape: 'geoshape'\n};\nexport const ARC = Mark.arc;\nexport const AREA = Mark.area;\nexport const BAR = Mark.bar;\nexport const IMAGE = Mark.image;\nexport const LINE = Mark.line;\nexport const POINT = Mark.point;\nexport const RECT = Mark.rect;\nexport const RULE = Mark.rule;\nexport const TEXT = Mark.text;\nexport const TICK = Mark.tick;\nexport const TRAIL = Mark.trail;\nexport const CIRCLE = Mark.circle;\nexport const SQUARE = Mark.square;\nexport const GEOSHAPE = Mark.geoshape;\nexport function isMark(m) {\n  return hasOwnProperty(Mark, m);\n}\nexport const PATH_MARKS = ['line', 'area', 'trail'];\nexport function isPathMark(m) {\n  return ['line', 'area', 'trail'].includes(m);\n}\nexport function isRectBasedMark(m) {\n  return ['rect', 'bar', 'image', 'arc', 'tick' /* arc is rect/interval in polar coordinate */].includes(m);\n}\nexport const PRIMITIVE_MARKS = new Set(keys(Mark));\nexport function isMarkDef(mark) {\n  return hasProperty(mark, 'type');\n}\nexport function isPrimitiveMark(mark) {\n  const markType = isMarkDef(mark) ? mark.type : mark;\n  return PRIMITIVE_MARKS.has(markType);\n}\nexport const STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];\nexport const FILL_CONFIG = ['fill', 'fillOpacity'];\nexport const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\nconst VL_ONLY_MARK_CONFIG_INDEX = {\n  color: 1,\n  filled: 1,\n  invalid: 1,\n  order: 1,\n  radius2: 1,\n  theta2: 1,\n  timeUnitBandSize: 1,\n  timeUnitBandPosition: 1\n};\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);\nconst VL_ONLY_RECT_CONFIG = ['binSpacing', 'continuousBandSize', 'discreteBandSize', 'minBandSize'];\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n  area: ['line', 'point'],\n  bar: VL_ONLY_RECT_CONFIG,\n  rect: VL_ONLY_RECT_CONFIG,\n  line: ['point'],\n  tick: ['bandSize', 'thickness', ...VL_ONLY_RECT_CONFIG]\n};\nexport const defaultMarkConfig = {\n  color: '#4c78a8',\n  invalid: 'break-paths-show-path-domains',\n  timeUnitBandSize: 1\n};\nconst MARK_CONFIG_INDEX = {\n  mark: 1,\n  arc: 1,\n  area: 1,\n  bar: 1,\n  circle: 1,\n  image: 1,\n  line: 1,\n  point: 1,\n  rect: 1,\n  rule: 1,\n  square: 1,\n  text: 1,\n  tick: 1,\n  trail: 1,\n  geoshape: 1\n};\nexport const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);\nexport function isRelativeBandSize(o) {\n  return hasProperty(o, 'band');\n}\nexport const BAR_CORNER_RADIUS_INDEX = {\n  horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],\n  vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']\n};\nconst DEFAULT_RECT_BAND_SIZE = 5;\nexport const defaultRectConfig = {\n  binSpacing: 0,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  minBandSize: 0.25,\n  timeUnitBandPosition: 0.5\n};\nexport const defaultBarConfig = {\n  ...defaultRectConfig,\n  binSpacing: 1\n};\nexport const defaultTickConfig = {\n  ...defaultRectConfig,\n  thickness: 1\n};\nexport function getMarkType(m) {\n  return isMarkDef(m) ? m.type : m;\n}","map":{"version":3,"names":["hasOwnProperty","hasProperty","keys","Mark","arc","area","bar","image","line","point","rect","rule","text","tick","trail","circle","square","geoshape","ARC","AREA","BAR","IMAGE","LINE","POINT","RECT","RULE","TEXT","TICK","TRAIL","CIRCLE","SQUARE","GEOSHAPE","isMark","m","PATH_MARKS","isPathMark","includes","isRectBasedMark","PRIMITIVE_MARKS","Set","isMarkDef","mark","isPrimitiveMark","markType","type","has","STROKE_CONFIG","FILL_CONFIG","FILL_STROKE_CONFIG","VL_ONLY_MARK_CONFIG_INDEX","color","filled","invalid","order","radius2","theta2","timeUnitBandSize","timeUnitBandPosition","VL_ONLY_MARK_CONFIG_PROPERTIES","VL_ONLY_RECT_CONFIG","VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","defaultMarkConfig","MARK_CONFIG_INDEX","MARK_CONFIGS","isRelativeBandSize","o","BAR_CORNER_RADIUS_INDEX","horizontal","vertical","DEFAULT_RECT_BAND_SIZE","defaultRectConfig","binSpacing","continuousBandSize","minBandSize","defaultBarConfig","defaultTickConfig","thickness","getMarkType"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\mark.ts"],"sourcesContent":["import type {Align, Color, Gradient, Orientation, SignalRef, TextBaseline, MarkConfig as VgMarkConfig} from 'vega';\nimport {hasOwnProperty} from 'vega-util';\nimport {CompositeMark, CompositeMarkDef} from './compositemark';\nimport {ExprRef} from './expr';\nimport {MarkInvalidMixins} from './invalid';\nimport {Flag, hasProperty, keys} from './util';\nimport {MapExcludeValueRefAndReplaceSignalWith} from './vega.schema';\n\n/**\n * All types of primitive marks.\n */\nexport const Mark = {\n  arc: 'arc',\n  area: 'area',\n  bar: 'bar',\n  image: 'image',\n  line: 'line',\n  point: 'point',\n  rect: 'rect',\n  rule: 'rule',\n  text: 'text',\n  tick: 'tick',\n  trail: 'trail',\n  circle: 'circle',\n  square: 'square',\n  geoshape: 'geoshape'\n} as const;\n\nexport const ARC = Mark.arc;\nexport const AREA = Mark.area;\nexport const BAR = Mark.bar;\nexport const IMAGE = Mark.image;\nexport const LINE = Mark.line;\nexport const POINT = Mark.point;\nexport const RECT = Mark.rect;\nexport const RULE = Mark.rule;\nexport const TEXT = Mark.text;\nexport const TICK = Mark.tick;\nexport const TRAIL = Mark.trail;\nexport const CIRCLE = Mark.circle;\nexport const SQUARE = Mark.square;\nexport const GEOSHAPE = Mark.geoshape;\n\nexport type Mark = keyof typeof Mark;\n\nexport function isMark(m: string): m is Mark {\n  return hasOwnProperty(Mark, m);\n}\n\nexport const PATH_MARKS = ['line', 'area', 'trail'] as const;\n\nexport type PathMark = (typeof PATH_MARKS)[number];\n\nexport function isPathMark(m: Mark | CompositeMark): m is PathMark {\n  return ['line', 'area', 'trail'].includes(m);\n}\n\nexport function isRectBasedMark(m: Mark | CompositeMark): m is 'rect' | 'bar' | 'image' | 'arc' | 'tick' {\n  return ['rect', 'bar', 'image', 'arc', 'tick' /* arc is rect/interval in polar coordinate */].includes(m);\n}\n\nexport const PRIMITIVE_MARKS = new Set(keys(Mark));\n\nexport interface ColorMixins<ES extends ExprRef | SignalRef> {\n  /**\n   * Default color.\n   *\n   * __Default value:__ <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`\n   *\n   * __Note:__\n   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.\n   */\n  color?: Color | Gradient | ES;\n}\n\nexport interface TooltipContent {\n  content: 'encoding' | 'data';\n}\n\nexport interface VLOnlyMarkConfig<ES extends ExprRef | SignalRef> extends ColorMixins<ES>, MarkInvalidMixins {\n  /**\n   * Whether the mark's color should be used as fill color instead of stroke color.\n   *\n   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\n   *\n   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   *\n   */\n  filled?: boolean;\n\n  /**\n   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.\n   */\n  order?: null | boolean;\n\n  /**\n   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step.\n   * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.\n   */\n  timeUnitBandPosition?: number;\n\n  /**\n   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step.\n   * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.\n   */\n  timeUnitBandSize?: number;\n\n  /**\n   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.\n   */\n  theta2?: number | ES; // In Vega, this is called endAngle\n\n  /**\n   * The secondary (inner) radius in pixels of arc marks.\n   *\n   * __Default value:__ `0`\n   * @minimum 0\n   */\n  radius2?: number | ES; // In Vega, this is called innerRadius\n}\n\nexport interface MarkConfig<ES extends ExprRef | SignalRef>\n  extends VLOnlyMarkConfig<ES>,\n    MapExcludeValueRefAndReplaceSignalWith<Omit<VgMarkConfig, 'tooltip' | 'fill' | 'stroke'>, ES> {\n  // ========== Overriding Vega ==========\n\n  /**\n   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n   *\n   * - If `tooltip` is `true` or `{\"content\": \"encoding\"}`, then all fields from `encoding` will be used.\n   * - If `tooltip` is `{\"content\": \"data\"}`, then all fields that appear in the highlighted data point will be used.\n   * - If set to `null` or `false`, then no tooltip will be used.\n   *\n   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\n   *\n   * __Default value:__ `null`\n   */\n  tooltip?: number | string | boolean | TooltipContent | ES | null; // VL has a special object form for tooltip content\n\n  /**\n   * Default size for marks.\n   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.\n   * - For `bar`, this represents the band size of the bar, in pixels.\n   * - For `text`, this represents the font size, in pixels.\n   *\n   * __Default value:__\n   * - `30` for point, circle, square marks; width/height's `step`\n   * - `2` for bar marks with discrete dimensions;\n   * - `5` for bar marks with continuous dimensions;\n   * - `11` for text marks.\n   *\n   * @minimum 0\n   */\n  size?: number | ES; // size works beyond symbol marks in VL\n\n  /**\n   * X coordinates of the marks, or width of horizontal `\"bar\"` and `\"area\"` without specified `x2` or `width`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"` for the width of the plot.\n   */\n  x?: number | 'width' | ES; // Vega doesn't have 'width'\n\n  /**\n   * Y coordinates of the marks, or height of vertical `\"bar\"` and `\"area\"` without specified `y2` or `height`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"` for the height of the plot.\n   */\n  y?: number | 'height' | ES; // Vega doesn't have 'height'\n\n  /**\n   * X2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"` for the width of the plot.\n   */\n  x2?: number | 'width' | ES; // Vega doesn't have 'width'\n\n  /**\n   * Y2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"` for the height of the plot.\n   */\n  y2?: number | 'height' | ES; // Vega doesn't have 'height'\n\n  /**\n   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.\n   *\n   * __Default value:__ (None)\n   *\n   */\n  fill?: Color | Gradient | null | ES; // docs: Vega doesn't have config.color\n\n  /**\n   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.\n   *\n   * __Default value:__ (None)\n   *\n   */\n  stroke?: Color | Gradient | null | ES; // docs: Vega doesn't have config.color\n\n  /**\n   * The overall opacity (value between [0,1]).\n   *\n   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  opacity?: number | ES; // docs (different defaults)\n\n  /**\n   * The orientation of a non-stacked bar, tick, area, and line charts.\n   * The value is either horizontal (default) or vertical.\n   * - For bar, rule and tick, this determines whether the size of the bar and tick\n   * should be applied to x or y dimension.\n   * - For area, this property determines the orient property of the Vega output.\n   * - For line and trail marks, this property determines the sort order of the points in the line\n   * if `config.sortLineBy` is not specified.\n   * For stacked charts, this is always determined by the orientation of the stack;\n   * therefore explicitly specified value will be ignored.\n   */\n  orient?: Orientation; // Vega orient doesn't apply to bar/tick/line. Since some logic depends on this property, Vega-Lite does NOT allow signal for orient.\n\n  /**\n   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `\"left\"`, `\"right\"`, `\"center\"`.\n   *\n   * __Note:__ Expression reference is *not* supported for range marks.\n   */\n  align?: Align | ES;\n\n  /**\n   * For text marks, the vertical text baseline. One of `\"alphabetic\"` (default), `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"line-top\"`, `\"line-bottom\"`, or an expression reference that provides one of the valid values.\n   * The `\"line-top\"` and `\"line-bottom\"` values operate similarly to `\"top\"` and `\"bottom\"`,\n   * but are calculated relative to the `lineHeight` rather than `fontSize` alone.\n   *\n   * For range marks, the vertical alignment of the marks. One of `\"top\"`, `\"middle\"`, `\"bottom\"`.\n   *\n   * __Note:__ Expression reference is *not* supported for range marks.\n   *\n   */\n  baseline?: TextBaseline | ES;\n\n  /**\n   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\n   *\n   * - For text marks, polar coordinate angle in radians.\n   *\n   * @minimum 0\n   * @maximum 360\n   */\n  theta?: number | ES; // overriding VG\n\n  /**\n   *\n   * For arc mark, the primary (outer) radius in pixels.\n   *\n   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.\n   *\n   * __Default value:__ `min(plot_width, plot_height)/2`\n   * @minimum 0\n   */\n  radius?: number | ES; // overriding VG\n\n  /**\n   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.\n   *\n   * __Default value:__ `0`\n   * @minimum 0\n   */\n  innerRadius?: number | ES;\n\n  /**\n   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.\n   *\n   * __Default value:__ `0`\n   * @minimum 0\n   */\n  outerRadius?: number | ES;\n}\n\nexport interface RectBinSpacingMixins {\n  /**\n   * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   */\n  binSpacing?: number;\n}\n\nexport type AnyMark = CompositeMark | CompositeMarkDef | Mark | MarkDef;\n\nexport function isMarkDef(mark: string | GenericMarkDef<any>): mark is GenericMarkDef<any> {\n  return hasProperty(mark, 'type');\n}\n\nexport function isPrimitiveMark(mark: AnyMark): mark is Mark {\n  const markType = isMarkDef(mark) ? mark.type : mark;\n  return (PRIMITIVE_MARKS as Set<Mark | CompositeMark>).has(markType);\n}\n\nexport const STROKE_CONFIG = [\n  'stroke',\n  'strokeWidth',\n  'strokeDash',\n  'strokeDashOffset',\n  'strokeOpacity',\n  'strokeJoin',\n  'strokeMiterLimit'\n] as const;\n\nexport const FILL_CONFIG = ['fill', 'fillOpacity'] as const;\n\nexport const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\n\nconst VL_ONLY_MARK_CONFIG_INDEX: Flag<keyof VLOnlyMarkConfig<any>> = {\n  color: 1,\n  filled: 1,\n  invalid: 1,\n  order: 1,\n  radius2: 1,\n  theta2: 1,\n  timeUnitBandSize: 1,\n  timeUnitBandPosition: 1\n};\n\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES = keys(VL_ONLY_MARK_CONFIG_INDEX);\n\nconst VL_ONLY_RECT_CONFIG: (keyof RectConfig<any>)[] = [\n  'binSpacing',\n  'continuousBandSize',\n  'discreteBandSize',\n  'minBandSize'\n];\n\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX: {\n  [k in Mark]?: (keyof Required<MarkConfigMixins<any>>[k])[];\n} = {\n  area: ['line', 'point'],\n  bar: VL_ONLY_RECT_CONFIG,\n  rect: VL_ONLY_RECT_CONFIG,\n  line: ['point'],\n  tick: ['bandSize', 'thickness', ...VL_ONLY_RECT_CONFIG]\n};\n\nexport const defaultMarkConfig: MarkConfig<SignalRef> = {\n  color: '#4c78a8',\n  invalid: 'break-paths-show-path-domains',\n  timeUnitBandSize: 1\n};\n\n// TODO: replace with MarkConfigMixins[Mark] once https://github.com/vega/ts-json-schema-generator/issues/344 is fixed\nexport type AnyMarkConfig<ES extends ExprRef | SignalRef> =\n  | MarkConfig<ES>\n  | AreaConfig<ES>\n  | BarConfig<ES>\n  | RectConfig<ES>\n  | LineConfig<ES>\n  | TickConfig<ES>;\n\nexport interface MarkConfigMixins<ES extends ExprRef | SignalRef> {\n  /** Mark Config */\n  mark?: MarkConfig<ES>;\n\n  // MARK-SPECIFIC CONFIGS\n\n  /** Arc-specific Config */\n  arc?: RectConfig<ES>;\n\n  /** Area-Specific Config */\n  area?: AreaConfig<ES>;\n\n  /** Bar-Specific Config */\n  bar?: BarConfig<ES>;\n\n  /** Circle-Specific Config */\n  circle?: MarkConfig<ES>;\n\n  /** Image-specific Config */\n  image?: RectConfig<ES>;\n\n  /** Line-Specific Config */\n  line?: LineConfig<ES>;\n\n  /** Point-Specific Config */\n  point?: MarkConfig<ES>;\n\n  /** Rect-Specific Config */\n  rect?: RectConfig<ES>;\n\n  /** Rule-Specific Config */\n  rule?: MarkConfig<ES>;\n\n  /** Square-Specific Config */\n  square?: MarkConfig<ES>;\n\n  /** Text-Specific Config */\n  text?: MarkConfig<ES>;\n\n  /** Tick-Specific Config */\n  tick?: TickConfig<ES>;\n\n  /** Trail-Specific Config */\n  trail?: LineConfig<ES>;\n\n  /** Geoshape-Specific Config */\n  geoshape?: MarkConfig<ES>;\n}\n\nconst MARK_CONFIG_INDEX: Flag<keyof MarkConfigMixins<any>> = {\n  mark: 1,\n  arc: 1,\n  area: 1,\n  bar: 1,\n  circle: 1,\n  image: 1,\n  line: 1,\n  point: 1,\n  rect: 1,\n  rule: 1,\n  square: 1,\n  text: 1,\n  tick: 1,\n  trail: 1,\n  geoshape: 1\n};\n\nexport const MARK_CONFIGS = keys(MARK_CONFIG_INDEX);\n\nexport interface RectConfig<ES extends ExprRef | SignalRef> extends RectBinSpacingMixins, MarkConfig<ES> {\n  /**\n   * The default size of the bars on continuous scales.\n   *\n   * __Default value:__ `5`\n   *\n   * @minimum 0\n   */\n  continuousBandSize?: number;\n\n  /**\n   * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.\n   * @minimum 0\n   */\n  discreteBandSize?: number | RelativeBandSize;\n\n  /**\n   * The minimum band size for bar and rectangle marks.\n   * __Default value:__ `0.25`\n   */\n  minBandSize?: number | ES;\n}\n\nexport type BandSize = number | RelativeBandSize | SignalRef;\n\nexport interface RelativeBandSize {\n  /**\n   * The relative band size.  For example `0.5` means half of the band scale's band width.\n   */\n  band: number;\n}\n\nexport function isRelativeBandSize(o: number | RelativeBandSize | ExprRef | SignalRef): o is RelativeBandSize {\n  return hasProperty(o, 'band');\n}\n\nexport const BAR_CORNER_RADIUS_INDEX: Partial<\n  Record<\n    Orientation,\n    ('cornerRadiusTopLeft' | 'cornerRadiusTopRight' | 'cornerRadiusBottomLeft' | 'cornerRadiusBottomRight')[]\n  >\n> = {\n  horizontal: ['cornerRadiusTopRight', 'cornerRadiusBottomRight'],\n  vertical: ['cornerRadiusTopLeft', 'cornerRadiusTopRight']\n};\n\nexport interface BarCornerRadiusMixins<ES extends ExprRef | SignalRef> {\n  /**\n   * - For vertical bars, top-left and top-right corner radius.\n   *\n   * - For horizontal bars, top-right and bottom-right corner radius.\n   */\n  cornerRadiusEnd?: number | ES;\n}\n\nexport type BarConfig<ES extends ExprRef | SignalRef> = RectConfig<ES> & BarCornerRadiusMixins<ES>;\n\nexport type OverlayMarkDef<ES extends ExprRef | SignalRef> = MarkConfig<ES> & MarkDefMixins<ES>;\n\nexport interface PointOverlayMixins<ES extends ExprRef | SignalRef> {\n  /**\n   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n   *\n   * - If this property is `\"transparent\"`, transparent points will be used (for enhancing tooltips and selections).\n   *\n   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n   *\n   * - If this property is `false`, no points would be automatically added to line or area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  point?: boolean | OverlayMarkDef<ES> | 'transparent';\n}\n\nexport interface LineConfig<ES extends ExprRef | SignalRef> extends MarkConfig<ES>, PointOverlayMixins<ES> {}\n\nexport interface LineOverlayMixins<ES extends ExprRef | SignalRef> {\n  /**\n   * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\n   *\n   * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\n   *\n   * - If this value is `false`, no lines would be automatically added to area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  line?: boolean | OverlayMarkDef<ES>;\n}\n\nexport interface AreaConfig<ES extends ExprRef | SignalRef>\n  extends MarkConfig<ES>,\n    PointOverlayMixins<ES>,\n    LineOverlayMixins<ES> {}\n\nexport interface TickThicknessMixins {\n  /**\n   * Thickness of the tick mark.\n   *\n   * __Default value:__  `1`\n   *\n   * @minimum 0\n   */\n  thickness?: number | SignalRef;\n}\n\nexport interface GenericMarkDef<M> {\n  /**\n   * The mark type. This could a primitive mark type\n   * (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"geoshape\"`, `\"rule\"`, and `\"text\"`)\n   * or a composite mark type (`\"boxplot\"`, `\"errorband\"`, `\"errorbar\"`).\n   */\n  type: M;\n}\n\nexport interface MarkDefMixins<ES extends ExprRef | SignalRef> {\n  /**\n   * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\n   *\n   * __Default value:__ The mark's name. For example, a bar mark will have style `\"bar\"` by default.\n   * __Note:__ Any specified style will augment the default style. For example, a bar mark with `\"style\": \"foo\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\"foo\"` has higher precedence).\n   */\n  style?: string | string[];\n\n  /**\n   * Whether a mark be clipped to the enclosing group’s width and height.\n   */\n  clip?: boolean | ES;\n\n  // Offset properties should not be a part of config\n\n  /**\n   * Offset for x-position.\n   */\n  xOffset?: number | ES;\n\n  /**\n   * Offset for y-position.\n   */\n  yOffset?: number | ES;\n\n  /**\n   * Offset for x2-position.\n   */\n  x2Offset?: number | ES;\n\n  /**\n   * Offset for y2-position.\n   */\n  y2Offset?: number | ES;\n\n  /**\n   * Offset for theta.\n   */\n  thetaOffset?: number | ES;\n\n  /**\n   * Offset for theta2.\n   */\n  theta2Offset?: number | ES;\n\n  /**\n   * Offset for radius.\n   */\n  radiusOffset?: number | ES;\n\n  /**\n   * Offset for radius2.\n   */\n  radius2Offset?: number | ES;\n}\n\nexport interface RelativeBandSize {\n  /**\n   * The relative band size.  For example `0.5` means half of the band scale's band width.\n   */\n  band: number;\n}\n\n// Point/Line OverlayMixins are only for area, line, and trail but we don't want to declare multiple types of MarkDef\nexport interface MarkDef<M extends string | Mark = Mark, ES extends ExprRef | SignalRef = ExprRef | SignalRef>\n  extends GenericMarkDef<M>,\n    Omit<\n      MarkConfig<ES> &\n        AreaConfig<ES> &\n        BarConfig<ES> & // always extends RectConfig\n        LineConfig<ES> &\n        TickConfig<ES>,\n      'startAngle' | 'endAngle' | 'width' | 'height'\n    >,\n    MarkDefMixins<ES> {\n  // Omit startAngle/endAngle since we use theta/theta2 from Vega-Lite schema to avoid confusion\n  // We still support start/endAngle  only in config, just in case people use Vega config with Vega-Lite.\n\n  /**\n   * @hidden\n   */\n  startAngle?: number | ES;\n  /**\n   * @hidden\n   */\n  endAngle?: number | ES;\n\n  // Replace width / height to include relative band size\n\n  /**\n   * Width of the marks.  One of:\n   *\n   * - A number representing a fixed pixel width.\n   *\n   * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band.\n   */\n  width?: number | ES | RelativeBandSize;\n\n  /**\n   * Height of the marks.  One of:\n   *\n   * - A number representing a fixed pixel height.\n   *\n   * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band\n   */\n  height?: number | ES | RelativeBandSize;\n}\n\nconst DEFAULT_RECT_BAND_SIZE = 5;\n\nexport const defaultRectConfig: RectConfig<SignalRef> = {\n  binSpacing: 0,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  minBandSize: 0.25,\n  timeUnitBandPosition: 0.5\n};\n\nexport const defaultBarConfig: RectConfig<SignalRef> = {\n  ...defaultRectConfig,\n  binSpacing: 1\n};\n\nexport interface TickConfig<ES extends ExprRef | SignalRef>\n  extends MarkConfig<ES>,\n    TickThicknessMixins,\n    RectConfig<ES> {\n  /**\n   * The width of the ticks.\n   *\n   * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).\n   * @minimum 0\n   */\n  bandSize?: number;\n}\n\nexport const defaultTickConfig: TickConfig<SignalRef> = {\n  ...defaultRectConfig,\n  thickness: 1\n};\n\nexport function getMarkType(m: string | GenericMarkDef<any>) {\n  return isMarkDef(m) ? m.type : m;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}