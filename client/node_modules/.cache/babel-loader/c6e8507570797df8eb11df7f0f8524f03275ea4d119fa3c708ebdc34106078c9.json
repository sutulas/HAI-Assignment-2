{"ast":null,"code":"import { getSecondaryRangeChannel } from '../../channel';\nimport { channelDefType, getFieldOrDatumDef, isFieldDef, isPositionFieldOrDatumDef } from '../../channeldef';\nimport { formatCustomType, isCustomFormatType } from '../format';\nexport function labels(model, channel, specifiedLabelsSpec) {\n  const {\n    encoding,\n    config\n  } = model;\n  const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]) ?? getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  const axis = model.axis(channel) || {};\n  const {\n    format,\n    formatType\n  } = axis;\n  if (isCustomFormatType(formatType)) {\n    return {\n      text: formatCustomType({\n        fieldOrDatumDef,\n        field: 'datum.value',\n        format,\n        formatType,\n        config\n      }),\n      ...specifiedLabelsSpec\n    };\n  } else if (format === undefined && formatType === undefined && config.customFormatTypes) {\n    if (channelDefType(fieldOrDatumDef) === 'quantitative') {\n      if (isPositionFieldOrDatumDef(fieldOrDatumDef) && fieldOrDatumDef.stack === 'normalize' && config.normalizedNumberFormatType) {\n        return {\n          text: formatCustomType({\n            fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.normalizedNumberFormat,\n            formatType: config.normalizedNumberFormatType,\n            config\n          }),\n          ...specifiedLabelsSpec\n        };\n      } else if (config.numberFormatType) {\n        return {\n          text: formatCustomType({\n            fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.numberFormat,\n            formatType: config.numberFormatType,\n            config\n          }),\n          ...specifiedLabelsSpec\n        };\n      }\n    }\n    if (channelDefType(fieldOrDatumDef) === 'temporal' && config.timeFormatType && isFieldDef(fieldOrDatumDef) && !fieldOrDatumDef.timeUnit) {\n      return {\n        text: formatCustomType({\n          fieldOrDatumDef,\n          field: 'datum.value',\n          format: config.timeFormat,\n          formatType: config.timeFormatType,\n          config\n        }),\n        ...specifiedLabelsSpec\n      };\n    }\n  }\n  return specifiedLabelsSpec;\n}","map":{"version":3,"names":["getSecondaryRangeChannel","channelDefType","getFieldOrDatumDef","isFieldDef","isPositionFieldOrDatumDef","formatCustomType","isCustomFormatType","labels","model","channel","specifiedLabelsSpec","encoding","config","fieldOrDatumDef","axis","format","formatType","text","field","undefined","customFormatTypes","stack","normalizedNumberFormatType","normalizedNumberFormat","numberFormatType","numberFormat","timeFormatType","timeUnit","timeFormat"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\axis\\encode.ts"],"sourcesContent":["import {getSecondaryRangeChannel, PositionScaleChannel} from '../../channel';\nimport {channelDefType, getFieldOrDatumDef, isFieldDef, isPositionFieldOrDatumDef} from '../../channeldef';\nimport {formatCustomType, isCustomFormatType} from '../format';\nimport {UnitModel} from '../unit';\n\nexport function labels(model: UnitModel, channel: PositionScaleChannel, specifiedLabelsSpec: any) {\n  const {encoding, config} = model;\n\n  const fieldOrDatumDef =\n    getFieldOrDatumDef<string>(encoding[channel]) ?? getFieldOrDatumDef(encoding[getSecondaryRangeChannel(channel)]);\n  const axis = model.axis(channel) || {};\n  const {format, formatType} = axis;\n\n  if (isCustomFormatType(formatType)) {\n    return {\n      text: formatCustomType({\n        fieldOrDatumDef,\n        field: 'datum.value',\n        format,\n        formatType,\n        config\n      }),\n      ...specifiedLabelsSpec\n    };\n  } else if (format === undefined && formatType === undefined && config.customFormatTypes) {\n    if (channelDefType(fieldOrDatumDef) === 'quantitative') {\n      if (\n        isPositionFieldOrDatumDef(fieldOrDatumDef) &&\n        fieldOrDatumDef.stack === 'normalize' &&\n        config.normalizedNumberFormatType\n      ) {\n        return {\n          text: formatCustomType({\n            fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.normalizedNumberFormat,\n            formatType: config.normalizedNumberFormatType,\n            config\n          }),\n          ...specifiedLabelsSpec\n        };\n      } else if (config.numberFormatType) {\n        return {\n          text: formatCustomType({\n            fieldOrDatumDef,\n            field: 'datum.value',\n            format: config.numberFormat,\n            formatType: config.numberFormatType,\n            config\n          }),\n          ...specifiedLabelsSpec\n        };\n      }\n    }\n    if (\n      channelDefType(fieldOrDatumDef) === 'temporal' &&\n      config.timeFormatType &&\n      isFieldDef(fieldOrDatumDef) &&\n      !fieldOrDatumDef.timeUnit\n    ) {\n      return {\n        text: formatCustomType({\n          fieldOrDatumDef,\n          field: 'datum.value',\n          format: config.timeFormat,\n          formatType: config.timeFormatType,\n          config\n        }),\n        ...specifiedLabelsSpec\n      };\n    }\n  }\n  return specifiedLabelsSpec;\n}\n"],"mappings":"AAAA,SAAQA,wBAAwB,QAA6B,eAAe;AAC5E,SAAQC,cAAc,EAAEC,kBAAkB,EAAEC,UAAU,EAAEC,yBAAyB,QAAO,kBAAkB;AAC1G,SAAQC,gBAAgB,EAAEC,kBAAkB,QAAO,WAAW;AAG9D,OAAM,SAAUC,MAAMA,CAACC,KAAgB,EAAEC,OAA6B,EAAEC,mBAAwB;EAC9F,MAAM;IAACC,QAAQ;IAAEC;EAAM,CAAC,GAAGJ,KAAK;EAEhC,MAAMK,eAAe,GACnBX,kBAAkB,CAASS,QAAQ,CAACF,OAAO,CAAC,CAAC,IAAIP,kBAAkB,CAACS,QAAQ,CAACX,wBAAwB,CAACS,OAAO,CAAC,CAAC,CAAC;EAClH,MAAMK,IAAI,GAAGN,KAAK,CAACM,IAAI,CAACL,OAAO,CAAC,IAAI,EAAE;EACtC,MAAM;IAACM,MAAM;IAAEC;EAAU,CAAC,GAAGF,IAAI;EAEjC,IAAIR,kBAAkB,CAACU,UAAU,CAAC,EAAE;IAClC,OAAO;MACLC,IAAI,EAAEZ,gBAAgB,CAAC;QACrBQ,eAAe;QACfK,KAAK,EAAE,aAAa;QACpBH,MAAM;QACNC,UAAU;QACVJ;OACD,CAAC;MACF,GAAGF;KACJ;EACH,CAAC,MAAM,IAAIK,MAAM,KAAKI,SAAS,IAAIH,UAAU,KAAKG,SAAS,IAAIP,MAAM,CAACQ,iBAAiB,EAAE;IACvF,IAAInB,cAAc,CAACY,eAAe,CAAC,KAAK,cAAc,EAAE;MACtD,IACET,yBAAyB,CAACS,eAAe,CAAC,IAC1CA,eAAe,CAACQ,KAAK,KAAK,WAAW,IACrCT,MAAM,CAACU,0BAA0B,EACjC;QACA,OAAO;UACLL,IAAI,EAAEZ,gBAAgB,CAAC;YACrBQ,eAAe;YACfK,KAAK,EAAE,aAAa;YACpBH,MAAM,EAAEH,MAAM,CAACW,sBAAsB;YACrCP,UAAU,EAAEJ,MAAM,CAACU,0BAA0B;YAC7CV;WACD,CAAC;UACF,GAAGF;SACJ;MACH,CAAC,MAAM,IAAIE,MAAM,CAACY,gBAAgB,EAAE;QAClC,OAAO;UACLP,IAAI,EAAEZ,gBAAgB,CAAC;YACrBQ,eAAe;YACfK,KAAK,EAAE,aAAa;YACpBH,MAAM,EAAEH,MAAM,CAACa,YAAY;YAC3BT,UAAU,EAAEJ,MAAM,CAACY,gBAAgB;YACnCZ;WACD,CAAC;UACF,GAAGF;SACJ;MACH;IACF;IACA,IACET,cAAc,CAACY,eAAe,CAAC,KAAK,UAAU,IAC9CD,MAAM,CAACc,cAAc,IACrBvB,UAAU,CAACU,eAAe,CAAC,IAC3B,CAACA,eAAe,CAACc,QAAQ,EACzB;MACA,OAAO;QACLV,IAAI,EAAEZ,gBAAgB,CAAC;UACrBQ,eAAe;UACfK,KAAK,EAAE,aAAa;UACpBH,MAAM,EAAEH,MAAM,CAACgB,UAAU;UACzBZ,UAAU,EAAEJ,MAAM,CAACc,cAAc;UACjCd;SACD,CAAC;QACF,GAAGF;OACJ;IACH;EACF;EACA,OAAOA,mBAAmB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}