{"ast":null,"code":"import { array, isArray } from 'vega-util';\nimport { isArgmaxDef, isArgminDef } from './aggregate';\nimport { isBinned, isBinning } from './bin';\nimport { ANGLE, CHANNELS, COLOR, DESCRIPTION, DETAIL, FILL, FILLOPACITY, getMainChannelFromOffsetChannel, getOffsetScaleChannel, HREF, isChannel, isNonPositionScaleChannel, isSecondaryRangeChannel, isXorY, isXorYOffset, KEY, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, OPACITY, ORDER, RADIUS, RADIUS2, SHAPE, SIZE, STROKE, STROKEDASH, STROKEOPACITY, STROKEWIDTH, supportMark, TEXT, THETA, THETA2, TOOLTIP, UNIT_CHANNELS, URL, X, X2, XOFFSET, Y, Y2, YOFFSET } from './channel';\nimport { binRequiresRange, getFieldDef, getGuide, hasConditionalFieldDef, hasConditionalFieldOrDatumDef, initChannelDef, initFieldDef, isConditionalDef, isDatumDef, isFieldDef, isOrderOnlyDef, isTypedFieldDef, isValueDef, title, vgField } from './channeldef';\nimport * as log from './log';\nimport { isContinuous, isDiscrete, QUANTITATIVE, TEMPORAL } from './type';\nimport { keys, some } from './util';\nimport { isSignalRef } from './vega.schema';\nimport { isBinnedTimeUnit } from './timeunit';\nexport function channelHasField(encoding, channel) {\n  const channelDef = encoding && encoding[channel];\n  if (channelDef) {\n    if (isArray(channelDef)) {\n      return some(channelDef, fieldDef => !!fieldDef.field);\n    } else {\n      return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n    }\n  }\n  return false;\n}\nexport function channelHasFieldOrDatum(encoding, channel) {\n  const channelDef = encoding && encoding[channel];\n  if (channelDef) {\n    if (isArray(channelDef)) {\n      return some(channelDef, fieldDef => !!fieldDef.field);\n    } else {\n      return isFieldDef(channelDef) || isDatumDef(channelDef) || hasConditionalFieldOrDatumDef(channelDef);\n    }\n  }\n  return false;\n}\nexport function channelHasNestedOffsetScale(encoding, channel) {\n  if (isXorY(channel)) {\n    const fieldDef = encoding[channel];\n    if ((isFieldDef(fieldDef) || isDatumDef(fieldDef)) && (isDiscrete(fieldDef.type) || isFieldDef(fieldDef) && fieldDef.timeUnit)) {\n      const offsetChannel = getOffsetScaleChannel(channel);\n      return channelHasFieldOrDatum(encoding, offsetChannel);\n    }\n  }\n  return false;\n}\nexport function isAggregate(encoding) {\n  return some(CHANNELS, channel => {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      if (isArray(channelDef)) {\n        return some(channelDef, fieldDef => !!fieldDef.aggregate);\n      } else {\n        const fieldDef = getFieldDef(channelDef);\n        return fieldDef && !!fieldDef.aggregate;\n      }\n    }\n    return false;\n  });\n}\nexport function extractTransformsFromEncoding(oldEncoding, config) {\n  const groupby = [];\n  const bins = [];\n  const timeUnits = [];\n  const aggregate = [];\n  const encoding = {};\n  forEach(oldEncoding, (channelDef, channel) => {\n    // Extract potential embedded transformations along with remaining properties\n    if (isFieldDef(channelDef)) {\n      const {\n        field,\n        aggregate: aggOp,\n        bin,\n        timeUnit,\n        ...remaining\n      } = channelDef;\n      if (aggOp || timeUnit || bin) {\n        const guide = getGuide(channelDef);\n        const isTitleDefined = guide?.title;\n        let newField = vgField(channelDef, {\n          forAs: true\n        });\n        const newFieldDef = {\n          // Only add title if it doesn't exist\n          ...(isTitleDefined ? [] : {\n            title: title(channelDef, config, {\n              allowDisabling: true\n            })\n          }),\n          ...remaining,\n          // Always overwrite field\n          field: newField\n        };\n        if (aggOp) {\n          let op;\n          if (isArgmaxDef(aggOp)) {\n            op = 'argmax';\n            newField = vgField({\n              op: 'argmax',\n              field: aggOp.argmax\n            }, {\n              forAs: true\n            });\n            newFieldDef.field = `${newField}.${field}`;\n          } else if (isArgminDef(aggOp)) {\n            op = 'argmin';\n            newField = vgField({\n              op: 'argmin',\n              field: aggOp.argmin\n            }, {\n              forAs: true\n            });\n            newFieldDef.field = `${newField}.${field}`;\n          } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {\n            op = aggOp;\n          }\n          if (op) {\n            const aggregateEntry = {\n              op,\n              as: newField\n            };\n            if (field) {\n              aggregateEntry.field = field;\n            }\n            aggregate.push(aggregateEntry);\n          }\n        } else {\n          groupby.push(newField);\n          if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n            bins.push({\n              bin,\n              field,\n              as: newField\n            });\n            // Add additional groupbys for range and end of bins\n            groupby.push(vgField(channelDef, {\n              binSuffix: 'end'\n            }));\n            if (binRequiresRange(channelDef, channel)) {\n              groupby.push(vgField(channelDef, {\n                binSuffix: 'range'\n              }));\n            }\n            // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n            if (isXorY(channel)) {\n              const secondaryChannel = {\n                field: `${newField}_end`\n              };\n              encoding[`${channel}2`] = secondaryChannel;\n            }\n            newFieldDef.bin = 'binned';\n            if (!isSecondaryRangeChannel(channel)) {\n              newFieldDef['type'] = QUANTITATIVE;\n            }\n          } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n            timeUnits.push({\n              timeUnit,\n              field,\n              as: newField\n            });\n            // define the format type for later compilation\n            const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';\n            if (formatType) {\n              if (channel === TEXT || channel === TOOLTIP) {\n                newFieldDef['formatType'] = formatType;\n              } else if (isNonPositionScaleChannel(channel)) {\n                newFieldDef['legend'] = {\n                  formatType,\n                  ...newFieldDef['legend']\n                };\n              } else if (isXorY(channel)) {\n                newFieldDef['axis'] = {\n                  formatType,\n                  ...newFieldDef['axis']\n                };\n              }\n            }\n          }\n        }\n        // now the field should refer to post-transformed field instead\n        encoding[channel] = newFieldDef;\n      } else {\n        groupby.push(field);\n        encoding[channel] = oldEncoding[channel];\n      }\n    } else {\n      // For value def / signal ref / datum def, just copy\n      encoding[channel] = oldEncoding[channel];\n    }\n  });\n  return {\n    bins,\n    timeUnits,\n    aggregate,\n    groupby,\n    encoding\n  };\n}\nexport function markChannelCompatible(encoding, channel, mark) {\n  const markSupported = supportMark(channel, mark);\n  if (!markSupported) {\n    return false;\n  } else if (markSupported === 'binned') {\n    const primaryFieldDef = encoding[channel === X2 ? X : Y];\n    // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n    // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n    if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nexport function initEncoding(encoding, mark, filled, config) {\n  const normalizedEncoding = {};\n  for (const key of keys(encoding)) {\n    if (!isChannel(key)) {\n      // Drop invalid channel\n      log.warn(log.message.invalidEncodingChannel(key));\n    }\n  }\n  for (let channel of UNIT_CHANNELS) {\n    if (!encoding[channel]) {\n      continue;\n    }\n    const channelDef = encoding[channel];\n    if (isXorYOffset(channel)) {\n      const mainChannel = getMainChannelFromOffsetChannel(channel);\n      const positionDef = normalizedEncoding[mainChannel];\n      if (isFieldDef(positionDef)) {\n        if (isContinuous(positionDef.type)) {\n          if (isFieldDef(channelDef) && !positionDef.timeUnit) {\n            // TODO: nesting continuous field instead continuous field should\n            // behave like offsetting the data in data domain\n            log.warn(log.message.offsetNestedInsideContinuousPositionScaleDropped(mainChannel));\n            continue;\n          }\n        }\n      }\n    }\n    if (channel === 'angle' && mark === 'arc' && !encoding.theta) {\n      log.warn(log.message.REPLACE_ANGLE_WITH_THETA);\n      channel = THETA;\n    }\n    if (!markChannelCompatible(encoding, channel, mark)) {\n      // Drop unsupported channel\n      log.warn(log.message.incompatibleChannel(channel, mark));\n      continue;\n    }\n    // Drop line's size if the field is aggregated.\n    if (channel === SIZE && mark === 'line') {\n      const fieldDef = getFieldDef(encoding[channel]);\n      if (fieldDef?.aggregate) {\n        log.warn(log.message.LINE_WITH_VARYING_SIZE);\n        continue;\n      }\n    }\n    // Drop color if either fill or stroke is specified\n    if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {\n      log.warn(log.message.droppingColor('encoding', {\n        fill: 'fill' in encoding,\n        stroke: 'stroke' in encoding\n      }));\n      continue;\n    }\n    if (channel === DETAIL || channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef) || channel === TOOLTIP && isArray(channelDef)) {\n      if (channelDef) {\n        if (channel === ORDER) {\n          const def = encoding[channel];\n          if (isOrderOnlyDef(def)) {\n            normalizedEncoding[channel] = def;\n            continue;\n          }\n        }\n        // Array of fieldDefs for detail channel (or production rule)\n        normalizedEncoding[channel] = array(channelDef).reduce((defs, fieldDef) => {\n          if (!isFieldDef(fieldDef)) {\n            log.warn(log.message.emptyFieldDef(fieldDef, channel));\n          } else {\n            defs.push(initFieldDef(fieldDef, channel));\n          }\n          return defs;\n        }, []);\n      }\n    } else {\n      if (channel === TOOLTIP && channelDef === null) {\n        // Preserve null so we can use it to disable tooltip\n        normalizedEncoding[channel] = null;\n      } else if (!isFieldDef(channelDef) && !isDatumDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef) && !isSignalRef(channelDef)) {\n        log.warn(log.message.emptyFieldDef(channelDef, channel));\n        continue;\n      }\n      normalizedEncoding[channel] = initChannelDef(channelDef, channel, config);\n    }\n  }\n  return normalizedEncoding;\n}\n/**\n * For composite marks, we have to call initChannelDef during init so we can infer types earlier.\n */\nexport function normalizeEncoding(encoding, config) {\n  const normalizedEncoding = {};\n  for (const channel of keys(encoding)) {\n    const newChannelDef = initChannelDef(encoding[channel], channel, config, {\n      compositeMark: true\n    });\n    normalizedEncoding[channel] = newChannelDef;\n  }\n  return normalizedEncoding;\n}\nexport function fieldDefs(encoding) {\n  const arr = [];\n  for (const channel of keys(encoding)) {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      const channelDefArray = array(channelDef);\n      for (const def of channelDefArray) {\n        if (isFieldDef(def)) {\n          arr.push(def);\n        } else if (hasConditionalFieldDef(def)) {\n          arr.push(def.condition);\n        }\n      }\n    }\n  }\n  return arr;\n}\nexport function forEach(mapping, f, thisArg) {\n  if (!mapping) {\n    return;\n  }\n  for (const channel of keys(mapping)) {\n    const el = mapping[channel];\n    if (isArray(el)) {\n      for (const channelDef of el) {\n        f.call(thisArg, channelDef, channel);\n      }\n    } else {\n      f.call(thisArg, el, channel);\n    }\n  }\n}\nexport function reduce(mapping, f, init, thisArg) {\n  if (!mapping) {\n    return init;\n  }\n  return keys(mapping).reduce((r, channel) => {\n    const map = mapping[channel];\n    if (isArray(map)) {\n      return map.reduce((r1, channelDef) => {\n        return f.call(thisArg, r1, channelDef, channel);\n      }, r);\n    } else {\n      return f.call(thisArg, r, map, channel);\n    }\n  }, init);\n}\n/**\n * Returns list of path grouping fields for the given encoding\n */\nexport function pathGroupingFields(mark, encoding) {\n  return keys(encoding).reduce((details, channel) => {\n    switch (channel) {\n      // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group\n      case X:\n      case Y:\n      case HREF:\n      case DESCRIPTION:\n      case URL:\n      case X2:\n      case Y2:\n      case XOFFSET:\n      case YOFFSET:\n      case THETA:\n      case THETA2:\n      case RADIUS:\n      case RADIUS2:\n      // falls through\n      case LATITUDE:\n      case LONGITUDE:\n      case LATITUDE2:\n      case LONGITUDE2:\n      // TODO: case 'cursor':\n      // text, shape, shouldn't be a part of line/trail/area [falls through]\n      case TEXT:\n      case SHAPE:\n      case ANGLE:\n      // falls through\n      // tooltip fields should not be added to group by [falls through]\n      case TOOLTIP:\n        return details;\n      case ORDER:\n        // order should not group line / trail\n        if (mark === 'line' || mark === 'trail') {\n          return details;\n        }\n      // but order should group area for stacking (falls through)\n      case DETAIL:\n      case KEY:\n        {\n          const channelDef = encoding[channel];\n          if (isArray(channelDef) || isFieldDef(channelDef)) {\n            for (const fieldDef of array(channelDef)) {\n              if (!fieldDef.aggregate) {\n                details.push(vgField(fieldDef, {}));\n              }\n            }\n          }\n          return details;\n        }\n      case SIZE:\n        if (mark === 'trail') {\n          // For trail, size should not group trail lines.\n          return details;\n        }\n      // For line, size should group lines.\n      // falls through\n      case COLOR:\n      case FILL:\n      case STROKE:\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case STROKEDASH:\n      case STROKEWIDTH:\n        {\n          // TODO strokeDashOffset:\n          // falls through\n          const fieldDef = getFieldDef(encoding[channel]);\n          if (fieldDef && !fieldDef.aggregate) {\n            details.push(vgField(fieldDef, {}));\n          }\n          return details;\n        }\n    }\n  }, []);\n}","map":{"version":3,"names":["array","isArray","isArgmaxDef","isArgminDef","isBinned","isBinning","ANGLE","CHANNELS","COLOR","DESCRIPTION","DETAIL","FILL","FILLOPACITY","getMainChannelFromOffsetChannel","getOffsetScaleChannel","HREF","isChannel","isNonPositionScaleChannel","isSecondaryRangeChannel","isXorY","isXorYOffset","KEY","LATITUDE","LATITUDE2","LONGITUDE","LONGITUDE2","OPACITY","ORDER","RADIUS","RADIUS2","SHAPE","SIZE","STROKE","STROKEDASH","STROKEOPACITY","STROKEWIDTH","supportMark","TEXT","THETA","THETA2","TOOLTIP","UNIT_CHANNELS","URL","X","X2","XOFFSET","Y","Y2","YOFFSET","binRequiresRange","getFieldDef","getGuide","hasConditionalFieldDef","hasConditionalFieldOrDatumDef","initChannelDef","initFieldDef","isConditionalDef","isDatumDef","isFieldDef","isOrderOnlyDef","isTypedFieldDef","isValueDef","title","vgField","log","isContinuous","isDiscrete","QUANTITATIVE","TEMPORAL","keys","some","isSignalRef","isBinnedTimeUnit","channelHasField","encoding","channel","channelDef","fieldDef","field","channelHasFieldOrDatum","channelHasNestedOffsetScale","type","timeUnit","offsetChannel","isAggregate","aggregate","extractTransformsFromEncoding","oldEncoding","config","groupby","bins","timeUnits","forEach","aggOp","bin","remaining","guide","isTitleDefined","newField","forAs","newFieldDef","allowDisabling","op","argmax","argmin","aggregateEntry","as","push","binSuffix","secondaryChannel","formatType","markChannelCompatible","mark","markSupported","primaryFieldDef","initEncoding","filled","normalizedEncoding","key","warn","message","invalidEncodingChannel","mainChannel","positionDef","offsetNestedInsideContinuousPositionScaleDropped","theta","REPLACE_ANGLE_WITH_THETA","incompatibleChannel","LINE_WITH_VARYING_SIZE","droppingColor","fill","stroke","def","reduce","defs","emptyFieldDef","normalizeEncoding","newChannelDef","compositeMark","fieldDefs","arr","channelDefArray","condition","mapping","f","thisArg","el","call","init","r","map","r1","pathGroupingFields","details"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\encoding.ts"],"sourcesContent":["import type {AggregateOp} from 'vega';\nimport {array, isArray} from 'vega-util';\nimport {isArgmaxDef, isArgminDef} from './aggregate';\nimport {isBinned, isBinning} from './bin';\nimport {\n  ANGLE,\n  Channel,\n  CHANNELS,\n  COLOR,\n  DESCRIPTION,\n  DETAIL,\n  FILL,\n  FILLOPACITY,\n  getMainChannelFromOffsetChannel,\n  getOffsetScaleChannel,\n  HREF,\n  isChannel,\n  isNonPositionScaleChannel,\n  isSecondaryRangeChannel,\n  isXorY,\n  isXorYOffset,\n  KEY,\n  LATITUDE,\n  LATITUDE2,\n  LONGITUDE,\n  LONGITUDE2,\n  OPACITY,\n  ORDER,\n  RADIUS,\n  RADIUS2,\n  SHAPE,\n  SIZE,\n  STROKE,\n  STROKEDASH,\n  STROKEOPACITY,\n  STROKEWIDTH,\n  supportMark,\n  TEXT,\n  THETA,\n  THETA2,\n  TOOLTIP,\n  UNIT_CHANNELS,\n  URL,\n  X,\n  X2,\n  XOFFSET,\n  Y,\n  Y2,\n  YOFFSET\n} from './channel';\nimport {\n  binRequiresRange,\n  ChannelDef,\n  ColorDef,\n  Field,\n  FieldDef,\n  FieldDefWithoutScale,\n  getFieldDef,\n  getGuide,\n  hasConditionalFieldDef,\n  hasConditionalFieldOrDatumDef,\n  initChannelDef,\n  initFieldDef,\n  isConditionalDef,\n  isDatumDef,\n  isFieldDef,\n  isOrderOnlyDef,\n  isTypedFieldDef,\n  isValueDef,\n  LatLongDef,\n  NumericArrayMarkPropDef,\n  NumericMarkPropDef,\n  OffsetDef,\n  OrderFieldDef,\n  OrderOnlyDef,\n  OrderValueDef,\n  PolarDef,\n  Position2Def,\n  PositionDef,\n  SecondaryFieldDef,\n  ShapeDef,\n  StringFieldDef,\n  StringFieldDefWithCondition,\n  StringValueDefWithCondition,\n  TextDef,\n  title,\n  TypedFieldDef,\n  vgField\n} from './channeldef';\nimport {Config} from './config';\nimport * as log from './log';\nimport {Mark} from './mark';\nimport {EncodingFacetMapping} from './spec/facet';\nimport {AggregatedFieldDef, BinTransform, TimeUnitTransform} from './transform';\nimport {isContinuous, isDiscrete, QUANTITATIVE, TEMPORAL} from './type';\nimport {keys, some} from './util';\nimport {isSignalRef} from './vega.schema';\nimport {isBinnedTimeUnit} from './timeunit';\n\nexport interface Encoding<F extends Field> {\n  /**\n   * X coordinates of the marks, or width of horizontal `\"bar\"` and `\"area\"` without specified `x2` or `width`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"` for the width of the plot.\n   */\n  x?: PositionDef<F>;\n\n  /**\n   * Y coordinates of the marks, or height of vertical `\"bar\"` and `\"area\"` without specified `y2` or `height`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"` for the height of the plot.\n   */\n  y?: PositionDef<F>;\n\n  /**\n   * Offset of x-position of the marks\n   */\n  xOffset?: OffsetDef<F>;\n\n  /**\n   * Offset of y-position of the marks\n   */\n  yOffset?: OffsetDef<F>;\n\n  /**\n   * X2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"width\"` for the width of the plot.\n   */\n  // TODO: Ham need to add default behavior\n  // `x2` cannot have type as it should have the same type as `x`\n  x2?: Position2Def<F>;\n\n  /**\n   * Y2 coordinates for ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   *\n   * The `value` of this channel can be a number or a string `\"height\"` for the height of the plot.\n   */\n  // TODO: Ham need to add default behavior\n  // `y2` cannot have type as it should have the same type as `y`\n  y2?: Position2Def<F>;\n\n  /**\n   * Longitude position of geographically projected marks.\n   */\n  longitude?: LatLongDef<F>;\n\n  /**\n   * Latitude position of geographically projected marks.\n   */\n  latitude?: LatLongDef<F>;\n\n  /**\n   * Longitude-2 position for geographically projected ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   */\n  // `longitude2` cannot have type as it should have the same type as `longitude`\n  longitude2?: Position2Def<F>;\n\n  /**\n   * Latitude-2 position for geographically projected ranged `\"area\"`, `\"bar\"`, `\"rect\"`, and  `\"rule\"`.\n   */\n  // `latitude2` cannot have type as it should have the same type as `latitude`\n  latitude2?: Position2Def<F>;\n\n  /**\n   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)\n   *\n   * - For text marks, polar coordinate angle in radians.\n   */\n  theta?: PolarDef<F>;\n\n  /**\n   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.\n   */\n  theta2?: Position2Def<F>;\n\n  /**\n   * The outer radius in pixels of arc marks.\n   */\n\n  radius?: PolarDef<F>;\n\n  /**\n   * The inner radius in pixels of arc marks.\n   */\n  radius2?: Position2Def<F>;\n\n  /**\n   * Color of the marks – either fill or stroke color based on  the `filled` property of mark definition.\n   * By default, `color` represents fill color for `\"area\"`, `\"bar\"`, `\"tick\"`,\n   * `\"text\"`, `\"trail\"`, `\"circle\"`, and `\"square\"` / stroke color for `\"line\"` and `\"point\"`.\n   *\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.\n   *\n   * _Note:_\n   * 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.\n   * 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).\n   */\n  color?: ColorDef<F>;\n\n  /**\n   * Fill color of the marks.\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.\n   *\n   * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.\n   */\n  fill?: ColorDef<F>;\n\n  /**\n   * Stroke color of the marks.\n   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.\n   *\n   * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.\n   */\n\n  stroke?: ColorDef<F>;\n\n  /**\n   * Opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity` property.\n   */\n  opacity?: NumericMarkPropDef<F>;\n\n  /**\n   * Fill opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity` property.\n   */\n  fillOpacity?: NumericMarkPropDef<F>;\n\n  /**\n   * Stroke opacity of the marks.\n   *\n   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity` property.\n   */\n  strokeOpacity?: NumericMarkPropDef<F>;\n\n  /**\n   * Stroke width of the marks.\n   *\n   * __Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth` property.\n   */\n  strokeWidth?: NumericMarkPropDef<F>;\n\n  /**\n   * Stroke dash of the marks.\n   *\n   * __Default value:__ `[1,0]` (No dash).\n   */\n  strokeDash?: NumericArrayMarkPropDef<F>;\n\n  /**\n   * Size of the mark.\n   * - For `\"point\"`, `\"square\"` and `\"circle\"`, – the symbol size, or pixel area of the mark.\n   * - For `\"bar\"` and `\"tick\"` – the bar and tick's size.\n   * - For `\"text\"` – the text's font size.\n   * - Size is unsupported for `\"line\"`, `\"area\"`, and `\"rect\"`. (Use `\"trail\"` instead of line with varying size)\n   */\n  size?: NumericMarkPropDef<F>;\n\n  /**\n   * Rotation angle of point and text marks.\n   */\n  angle?: NumericMarkPropDef<F>;\n\n  /**\n   * Shape of the mark.\n   *\n   * 1. For `point` marks the supported values include:\n   *   - plotting shapes: `\"circle\"`, `\"square\"`, `\"cross\"`, `\"diamond\"`, `\"triangle-up\"`, `\"triangle-down\"`, `\"triangle-right\"`, or `\"triangle-left\"`.\n   *   - the line symbol `\"stroke\"`\n   *   - centered directional shapes `\"arrow\"`, `\"wedge\"`, or `\"triangle\"`\n   *   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n   *\n   * 2. For `geoshape` marks it should be a field definition of the geojson data\n   *\n   * __Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape` property. (`\"circle\"` if unset.)\n   */\n  shape?: ShapeDef<F>;\n  /**\n   * Additional levels of detail for grouping data in aggregate views and\n   * in line, trail, and area marks without mapping data to a specific visual channel.\n   */\n  detail?: FieldDefWithoutScale<F> | FieldDefWithoutScale<F>[];\n\n  /**\n   * A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.\n   */\n  key?: FieldDefWithoutScale<F>;\n\n  /**\n   * Text of the `text` mark.\n   */\n  text?: TextDef<F>;\n\n  /**\n   * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).\n   *\n   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.\n   */\n  tooltip?: StringFieldDefWithCondition<F> | StringValueDefWithCondition<F> | StringFieldDef<F>[] | null;\n\n  /**\n   * A URL to load upon mouse click.\n   */\n  href?: StringFieldDefWithCondition<F> | StringValueDefWithCondition<F>;\n\n  /**\n   * The URL of an image mark.\n   */\n  url?: StringFieldDefWithCondition<F> | StringValueDefWithCondition<F>;\n\n  /**\n   * A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `\"aria-label\"` attribute will be set to this description.\n   */\n  description?: StringFieldDefWithCondition<F> | StringValueDefWithCondition<F>;\n\n  /**\n   * Order of the marks.\n   * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\n   * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{\"value\": null}` makes the line marks use the original order in the data sources.\n   * - Otherwise, this `order` channel encodes layer order of the marks.\n   *\n   * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.\n   */\n  order?: OrderFieldDef<F> | OrderFieldDef<F>[] | OrderValueDef | OrderOnlyDef;\n}\n\nexport interface EncodingWithFacet<F extends Field> extends Encoding<F>, EncodingFacetMapping<F> {}\n\nexport function channelHasField<F extends Field>(\n  encoding: EncodingWithFacet<F>,\n  channel: keyof EncodingWithFacet<F>\n): boolean {\n  const channelDef = encoding && encoding[channel];\n  if (channelDef) {\n    if (isArray(channelDef)) {\n      return some(channelDef, fieldDef => !!fieldDef.field);\n    } else {\n      return isFieldDef(channelDef) || hasConditionalFieldDef<Field>(channelDef);\n    }\n  }\n  return false;\n}\n\nexport function channelHasFieldOrDatum<F extends Field>(\n  encoding: EncodingWithFacet<F>,\n  channel: keyof EncodingWithFacet<F>\n): boolean {\n  const channelDef = encoding && encoding[channel];\n  if (channelDef) {\n    if (isArray(channelDef)) {\n      return some(channelDef, fieldDef => !!fieldDef.field);\n    } else {\n      return isFieldDef(channelDef) || isDatumDef(channelDef) || hasConditionalFieldOrDatumDef<Field>(channelDef);\n    }\n  }\n  return false;\n}\n\nexport function channelHasNestedOffsetScale<F extends Field>(\n  encoding: EncodingWithFacet<F>,\n  channel: keyof EncodingWithFacet<F>\n): boolean {\n  if (isXorY(channel)) {\n    const fieldDef = encoding[channel];\n    if (\n      (isFieldDef(fieldDef) || isDatumDef(fieldDef)) &&\n      (isDiscrete(fieldDef.type) || (isFieldDef(fieldDef) && fieldDef.timeUnit))\n    ) {\n      const offsetChannel = getOffsetScaleChannel(channel);\n      return channelHasFieldOrDatum(encoding, offsetChannel);\n    }\n  }\n  return false;\n}\n\nexport function isAggregate(encoding: EncodingWithFacet<any>) {\n  return some(CHANNELS, channel => {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      if (isArray(channelDef)) {\n        return some(channelDef, fieldDef => !!fieldDef.aggregate);\n      } else {\n        const fieldDef = getFieldDef(channelDef);\n        return fieldDef && !!fieldDef.aggregate;\n      }\n    }\n    return false;\n  });\n}\n\nexport function extractTransformsFromEncoding(oldEncoding: Encoding<any>, config: Config) {\n  const groupby: string[] = [];\n  const bins: BinTransform[] = [];\n  const timeUnits: TimeUnitTransform[] = [];\n  const aggregate: AggregatedFieldDef[] = [];\n  const encoding: Encoding<string> = {};\n\n  forEach(oldEncoding, (channelDef, channel) => {\n    // Extract potential embedded transformations along with remaining properties\n    if (isFieldDef(channelDef)) {\n      const {field, aggregate: aggOp, bin, timeUnit, ...remaining} = channelDef;\n      if (aggOp || timeUnit || bin) {\n        const guide = getGuide(channelDef);\n        const isTitleDefined = guide?.title;\n        let newField = vgField(channelDef, {forAs: true});\n        const newFieldDef: FieldDef<string> = {\n          // Only add title if it doesn't exist\n          ...(isTitleDefined ? [] : {title: title(channelDef, config, {allowDisabling: true})}),\n          ...remaining,\n          // Always overwrite field\n          field: newField\n        };\n\n        if (aggOp) {\n          let op: AggregateOp;\n\n          if (isArgmaxDef(aggOp)) {\n            op = 'argmax';\n            newField = vgField({op: 'argmax', field: aggOp.argmax}, {forAs: true});\n            newFieldDef.field = `${newField}.${field}`;\n          } else if (isArgminDef(aggOp)) {\n            op = 'argmin';\n            newField = vgField({op: 'argmin', field: aggOp.argmin}, {forAs: true});\n            newFieldDef.field = `${newField}.${field}`;\n          } else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {\n            op = aggOp;\n          }\n\n          if (op) {\n            const aggregateEntry: AggregatedFieldDef = {\n              op,\n              as: newField\n            };\n            if (field) {\n              aggregateEntry.field = field;\n            }\n            aggregate.push(aggregateEntry);\n          }\n        } else {\n          groupby.push(newField);\n          if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n            bins.push({bin, field, as: newField});\n            // Add additional groupbys for range and end of bins\n            groupby.push(vgField(channelDef, {binSuffix: 'end'}));\n            if (binRequiresRange(channelDef, channel)) {\n              groupby.push(vgField(channelDef, {binSuffix: 'range'}));\n            }\n            // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n            if (isXorY(channel)) {\n              const secondaryChannel: SecondaryFieldDef<string> = {\n                field: `${newField}_end`\n              };\n              encoding[`${channel}2`] = secondaryChannel;\n            }\n            newFieldDef.bin = 'binned';\n            if (!isSecondaryRangeChannel(channel)) {\n              (newFieldDef as any)['type'] = QUANTITATIVE;\n            }\n          } else if (timeUnit && !isBinnedTimeUnit(timeUnit)) {\n            timeUnits.push({\n              timeUnit,\n              field,\n              as: newField\n            });\n\n            // define the format type for later compilation\n            const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';\n            if (formatType) {\n              if (channel === TEXT || channel === TOOLTIP) {\n                (newFieldDef as any)['formatType'] = formatType;\n              } else if (isNonPositionScaleChannel(channel)) {\n                (newFieldDef as any)['legend'] = {\n                  formatType,\n                  ...(newFieldDef as any)['legend']\n                };\n              } else if (isXorY(channel)) {\n                (newFieldDef as any)['axis'] = {\n                  formatType,\n                  ...(newFieldDef as any)['axis']\n                };\n              }\n            }\n          }\n        }\n\n        // now the field should refer to post-transformed field instead\n        (encoding as any)[channel as any] = newFieldDef;\n      } else {\n        groupby.push(field);\n        (encoding as any)[channel as any] = oldEncoding[channel];\n      }\n    } else {\n      // For value def / signal ref / datum def, just copy\n      (encoding as any)[channel as any] = oldEncoding[channel];\n    }\n  });\n\n  return {\n    bins,\n    timeUnits,\n    aggregate,\n    groupby,\n    encoding\n  };\n}\n\nexport function markChannelCompatible(encoding: Encoding<string>, channel: Channel, mark: Mark) {\n  const markSupported = supportMark(channel, mark);\n  if (!markSupported) {\n    return false;\n  } else if (markSupported === 'binned') {\n    const primaryFieldDef = encoding[channel === X2 ? X : Y];\n\n    // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n    // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n    if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function initEncoding(\n  encoding: Encoding<string>,\n  mark: Mark,\n  filled: boolean,\n  config: Config\n): Encoding<string> {\n  const normalizedEncoding: Encoding<string> = {};\n  for (const key of keys(encoding)) {\n    if (!isChannel(key)) {\n      // Drop invalid channel\n      log.warn(log.message.invalidEncodingChannel(key));\n    }\n  }\n\n  for (let channel of UNIT_CHANNELS) {\n    if (!encoding[channel]) {\n      continue;\n    }\n\n    const channelDef = encoding[channel];\n    if (isXorYOffset(channel)) {\n      const mainChannel = getMainChannelFromOffsetChannel(channel);\n\n      const positionDef = normalizedEncoding[mainChannel];\n      if (isFieldDef(positionDef)) {\n        if (isContinuous(positionDef.type)) {\n          if (isFieldDef(channelDef) && !positionDef.timeUnit) {\n            // TODO: nesting continuous field instead continuous field should\n            // behave like offsetting the data in data domain\n            log.warn(log.message.offsetNestedInsideContinuousPositionScaleDropped(mainChannel));\n            continue;\n          }\n        }\n      }\n    }\n\n    if (channel === 'angle' && mark === 'arc' && !encoding.theta) {\n      log.warn(log.message.REPLACE_ANGLE_WITH_THETA);\n      channel = THETA;\n    }\n\n    if (!markChannelCompatible(encoding, channel, mark)) {\n      // Drop unsupported channel\n      log.warn(log.message.incompatibleChannel(channel, mark));\n      continue;\n    }\n\n    // Drop line's size if the field is aggregated.\n    if (channel === SIZE && mark === 'line') {\n      const fieldDef = getFieldDef(encoding[channel]);\n      if (fieldDef?.aggregate) {\n        log.warn(log.message.LINE_WITH_VARYING_SIZE);\n        continue;\n      }\n    }\n    // Drop color if either fill or stroke is specified\n\n    if (channel === COLOR && (filled ? 'fill' in encoding : 'stroke' in encoding)) {\n      log.warn(log.message.droppingColor('encoding', {fill: 'fill' in encoding, stroke: 'stroke' in encoding}));\n      continue;\n    }\n\n    if (\n      channel === DETAIL ||\n      (channel === ORDER && !isArray(channelDef) && !isValueDef(channelDef)) ||\n      (channel === TOOLTIP && isArray(channelDef))\n    ) {\n      if (channelDef) {\n        if (channel === ORDER) {\n          const def = encoding[channel];\n          if (isOrderOnlyDef(def)) {\n            normalizedEncoding[channel] = def;\n            continue;\n          }\n        }\n        // Array of fieldDefs for detail channel (or production rule)\n        (normalizedEncoding[channel] as any) = array(channelDef).reduce(\n          (defs: FieldDef<string>[], fieldDef: FieldDef<string>) => {\n            if (!isFieldDef(fieldDef)) {\n              log.warn(log.message.emptyFieldDef(fieldDef, channel));\n            } else {\n              defs.push(initFieldDef(fieldDef, channel));\n            }\n            return defs;\n          },\n          []\n        );\n      }\n    } else {\n      if (channel === TOOLTIP && channelDef === null) {\n        // Preserve null so we can use it to disable tooltip\n        normalizedEncoding[channel] = null;\n      } else if (\n        !isFieldDef(channelDef) &&\n        !isDatumDef(channelDef) &&\n        !isValueDef(channelDef) &&\n        !isConditionalDef(channelDef) &&\n        !isSignalRef(channelDef)\n      ) {\n        log.warn(log.message.emptyFieldDef(channelDef, channel));\n        continue;\n      }\n\n      (normalizedEncoding as any)[channel as any] = initChannelDef(channelDef as ChannelDef, channel, config);\n    }\n  }\n  return normalizedEncoding;\n}\n\n/**\n * For composite marks, we have to call initChannelDef during init so we can infer types earlier.\n */\nexport function normalizeEncoding(encoding: Encoding<string>, config: Config): Encoding<string> {\n  const normalizedEncoding: Encoding<string> = {};\n\n  for (const channel of keys(encoding)) {\n    const newChannelDef = initChannelDef(encoding[channel], channel, config, {compositeMark: true});\n    (normalizedEncoding as any)[channel as any] = newChannelDef;\n  }\n\n  return normalizedEncoding;\n}\n\nexport function fieldDefs<F extends Field>(encoding: EncodingWithFacet<F>): FieldDef<F>[] {\n  const arr: FieldDef<F>[] = [];\n  for (const channel of keys(encoding)) {\n    if (channelHasField(encoding, channel)) {\n      const channelDef = encoding[channel];\n      const channelDefArray = array(channelDef);\n      for (const def of channelDefArray) {\n        if (isFieldDef(def)) {\n          arr.push(def);\n        } else if (hasConditionalFieldDef<F>(def)) {\n          arr.push(def.condition);\n        }\n      }\n    }\n  }\n  return arr;\n}\n\nexport function forEach<U extends Record<any, any>>(\n  mapping: U,\n  f: (cd: ChannelDef, c: keyof U) => void,\n  thisArg?: any\n) {\n  if (!mapping) {\n    return;\n  }\n\n  for (const channel of keys(mapping)) {\n    const el = mapping[channel];\n    if (isArray(el)) {\n      for (const channelDef of el as unknown[]) {\n        f.call(thisArg, channelDef, channel);\n      }\n    } else {\n      f.call(thisArg, el, channel);\n    }\n  }\n}\n\nexport function reduce<T, U extends Record<any, any>>(\n  mapping: U,\n  f: (acc: any, fd: TypedFieldDef<string>, c: keyof U) => U,\n  init: T,\n  thisArg?: any\n) {\n  if (!mapping) {\n    return init;\n  }\n\n  return keys(mapping).reduce((r, channel) => {\n    const map = mapping[channel];\n    if (isArray(map)) {\n      return map.reduce((r1: T, channelDef: ChannelDef) => {\n        return f.call(thisArg, r1, channelDef, channel);\n      }, r);\n    } else {\n      return f.call(thisArg, r, map, channel);\n    }\n  }, init);\n}\n\n/**\n * Returns list of path grouping fields for the given encoding\n */\nexport function pathGroupingFields(mark: Mark, encoding: Encoding<string>): string[] {\n  return keys(encoding).reduce((details, channel) => {\n    switch (channel) {\n      // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, aria label, cursor should not cause lines to group\n      case X:\n      case Y:\n      case HREF:\n      case DESCRIPTION:\n      case URL:\n      case X2:\n      case Y2:\n      case XOFFSET:\n      case YOFFSET:\n      case THETA:\n      case THETA2:\n      case RADIUS:\n      case RADIUS2:\n      // falls through\n\n      case LATITUDE:\n      case LONGITUDE:\n      case LATITUDE2:\n      case LONGITUDE2:\n      // TODO: case 'cursor':\n\n      // text, shape, shouldn't be a part of line/trail/area [falls through]\n      case TEXT:\n      case SHAPE:\n      case ANGLE:\n      // falls through\n\n      // tooltip fields should not be added to group by [falls through]\n      case TOOLTIP:\n        return details;\n\n      case ORDER:\n        // order should not group line / trail\n        if (mark === 'line' || mark === 'trail') {\n          return details;\n        }\n      // but order should group area for stacking (falls through)\n\n      case DETAIL:\n      case KEY: {\n        const channelDef = encoding[channel];\n        if (isArray(channelDef) || isFieldDef(channelDef)) {\n          for (const fieldDef of array(channelDef)) {\n            if (!fieldDef.aggregate) {\n              details.push(vgField(fieldDef, {}));\n            }\n          }\n        }\n        return details;\n      }\n\n      case SIZE:\n        if (mark === 'trail') {\n          // For trail, size should not group trail lines.\n          return details;\n        }\n      // For line, size should group lines.\n\n      // falls through\n      case COLOR:\n      case FILL:\n      case STROKE:\n      case OPACITY:\n      case FILLOPACITY:\n      case STROKEOPACITY:\n      case STROKEDASH:\n      case STROKEWIDTH: {\n        // TODO strokeDashOffset:\n        // falls through\n\n        const fieldDef = getFieldDef<string>(encoding[channel]);\n        if (fieldDef && !fieldDef.aggregate) {\n          details.push(vgField(fieldDef, {}));\n        }\n        return details;\n      }\n    }\n  }, []);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}