{"ast":null,"code":"export function scaledZeroOrMinOrMax(_ref) {\n  let {\n    scaleName,\n    scale,\n    mode\n  } = _ref;\n  const domain = `domain('${scaleName}')`;\n  if (!scale || !scaleName) {\n    return undefined;\n  }\n  const min = `${domain}[0]`;\n  const max = `peek(${domain})`; // peek = the last item of the array\n  // If there is a scale (and hence its name)\n  const domainHasZero = scale.domainHasZero();\n  // zeroOrMin or zeroOrMax mode\n  if (domainHasZero === 'definitely') {\n    return {\n      scale: scaleName,\n      value: 0\n    };\n  } else if (domainHasZero === 'maybe') {\n    const nonZeroValue = mode === 'zeroOrMin' ? min : max;\n    return {\n      signal: `scale('${scaleName}', inrange(0, ${domain}) ? 0 : ${nonZeroValue})`\n    };\n  } else {\n    // domainHasZero === 'definitely-not'\n    return {\n      signal: `scale('${scaleName}', ${mode === 'zeroOrMin' ? min : max})`\n    };\n  }\n}","map":{"version":3,"names":["scaledZeroOrMinOrMax","_ref","scaleName","scale","mode","domain","undefined","min","max","domainHasZero","value","nonZeroValue","signal"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\encode\\scaledZeroOrMinOrMax.ts"],"sourcesContent":["import {VgValueRef} from '../../../vega.schema';\nimport {ScaleComponent} from '../../scale/component';\n\nexport interface ScaledZeroOrMinOrMaxProps {\n  scaleName: string;\n  scale: ScaleComponent;\n  mode: 'zeroOrMin' | {zeroOrMax: {widthSignal: string; heightSignal: string}};\n}\n\nexport function scaledZeroOrMinOrMax({scaleName, scale, mode}: ScaledZeroOrMinOrMaxProps): VgValueRef | undefined {\n  const domain = `domain('${scaleName}')`;\n\n  if (!scale || !scaleName) {\n    return undefined;\n  }\n  const min = `${domain}[0]`;\n  const max = `peek(${domain})`; // peek = the last item of the array\n\n  // If there is a scale (and hence its name)\n  const domainHasZero = scale.domainHasZero();\n  // zeroOrMin or zeroOrMax mode\n  if (domainHasZero === 'definitely') {\n    return {\n      scale: scaleName,\n      value: 0\n    };\n  } else if (domainHasZero === 'maybe') {\n    const nonZeroValue = mode === 'zeroOrMin' ? min : max;\n    return {signal: `scale('${scaleName}', inrange(0, ${domain}) ? 0 : ${nonZeroValue})`};\n  } else {\n    // domainHasZero === 'definitely-not'\n    return {signal: `scale('${scaleName}', ${mode === 'zeroOrMin' ? min : max})`};\n  }\n}\n"],"mappings":"AASA,OAAM,SAAUA,oBAAoBA,CAAAC,IAAA,EAAoD;EAAA,IAAnD;IAACC,SAAS;IAAEC,KAAK;IAAEC;EAAI,CAA4B,GAAAH,IAAA;EACtF,MAAMI,MAAM,GAAG,WAAWH,SAAS,IAAI;EAEvC,IAAI,CAACC,KAAK,IAAI,CAACD,SAAS,EAAE;IACxB,OAAOI,SAAS;EAClB;EACA,MAAMC,GAAG,GAAG,GAAGF,MAAM,KAAK;EAC1B,MAAMG,GAAG,GAAG,QAAQH,MAAM,GAAG,CAAC,CAAC;EAE/B;EACA,MAAMI,aAAa,GAAGN,KAAK,CAACM,aAAa,EAAE;EAC3C;EACA,IAAIA,aAAa,KAAK,YAAY,EAAE;IAClC,OAAO;MACLN,KAAK,EAAED,SAAS;MAChBQ,KAAK,EAAE;KACR;EACH,CAAC,MAAM,IAAID,aAAa,KAAK,OAAO,EAAE;IACpC,MAAME,YAAY,GAAGP,IAAI,KAAK,WAAW,GAAGG,GAAG,GAAGC,GAAG;IACrD,OAAO;MAACI,MAAM,EAAE,UAAUV,SAAS,iBAAiBG,MAAM,WAAWM,YAAY;IAAG,CAAC;EACvF,CAAC,MAAM;IACL;IACA,OAAO;MAACC,MAAM,EAAE,UAAUV,SAAS,MAAME,IAAI,KAAK,WAAW,GAAGG,GAAG,GAAGC,GAAG;IAAG,CAAC;EAC/E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}