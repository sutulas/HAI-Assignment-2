{"ast":null,"code":"import { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { BOXPLOT, BOXPLOT_PARTS, normalizeBoxPlot } from './boxplot';\nimport { ERRORBAND, ERRORBAND_PARTS, normalizeErrorBand } from './errorband';\nimport { ERRORBAR, ERRORBAR_PARTS, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry = {};\nexport function add(mark, run, parts) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {\n    normalizer,\n    parts\n  };\n}\nexport function remove(mark) {\n  delete compositeMarkRegistry[mark];\n}\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);","map":{"version":3,"names":["keys","CompositeMarkNormalizer","BOXPLOT","BOXPLOT_PARTS","normalizeBoxPlot","ERRORBAND","ERRORBAND_PARTS","normalizeErrorBand","ERRORBAR","ERRORBAR_PARTS","normalizeErrorBar","compositeMarkRegistry","add","mark","run","parts","normalizer","remove","getAllCompositeMarks"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compositemark\\index.ts"],"sourcesContent":["import {Field} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {EncodingFacetMapping} from '../spec/facet';\nimport {NormalizedUnitSpec} from '../spec/unit';\nimport {keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {BOXPLOT, BoxPlot, BoxPlotConfigMixins, BoxPlotDef, BOXPLOT_PARTS, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  ERRORBAND_PARTS,\n  normalizeErrorBand\n} from './errorband';\nimport {\n  ERRORBAR,\n  ErrorBar,\n  ErrorBarConfigMixins,\n  ErrorBarDef,\n  ERRORBAR_PARTS,\n  ErrorExtraEncoding,\n  normalizeErrorBar\n} from './errorbar';\n\nexport type {BoxPlotConfig} from './boxplot';\nexport type {ErrorBandConfigMixins} from './errorband';\nexport type {ErrorBarConfigMixins} from './errorbar';\n\nexport type CompositeMarkNormalizerRun = (\n  spec: GenericUnitSpec<any, any>,\n  params: NormalizerParams\n) => NormalizedLayerSpec | NormalizedUnitSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: CompositeMarkNormalizer<any>;\n    parts: readonly string[];\n  };\n} = {};\n\nexport function add(mark: string, run: CompositeMarkNormalizerRun, parts: readonly string[]) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeEncoding<F extends Field> = Encoding<F> & ErrorExtraEncoding<F>;\n\nexport type PartialIndex<T extends Encoding<any>> = {\n  [t in keyof T]?: Partial<T[t]>;\n};\n\nexport type SharedCompositeEncoding<F extends Field> = PartialIndex<\n  Omit<CompositeEncoding<F>, 'detail' | 'order' | 'tooltip'> // need to omit and cherry pick detail / order / tooltip since they allow array\n> &\n  Pick<Encoding<F>, 'detail' | 'order' | 'tooltip'>;\n\nexport type FacetedCompositeEncoding<F extends Field> = Encoding<F> & ErrorExtraEncoding<F> & EncodingFacetMapping<F>;\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n"],"mappings":"AAMA,SAAQA,IAAI,QAAO,SAAS;AAC5B,SAAQC,uBAAuB,QAAO,QAAQ;AAC9C,SAAQC,OAAO,EAA4CC,aAAa,EAAEC,gBAAgB,QAAO,WAAW;AAC5G,SACEC,SAAS,EAITC,eAAe,EACfC,kBAAkB,QACb,aAAa;AACpB,SACEC,QAAQ,EAIRC,cAAc,EAEdC,iBAAiB,QACZ,YAAY;AAWnB;;;AAGA,MAAMC,qBAAqB,GAKvB,EAAE;AAEN,OAAM,SAAUC,GAAGA,CAACC,IAAY,EAAEC,GAA+B,EAAEC,KAAwB;EACzF,MAAMC,UAAU,GAAG,IAAIf,uBAAuB,CAACY,IAAI,EAAEC,GAAG,CAAC;EACzDH,qBAAqB,CAACE,IAAI,CAAC,GAAG;IAACG,UAAU;IAAED;EAAK,CAAC;AACnD;AAEA,OAAM,SAAUE,MAAMA,CAACJ,IAAY;EACjC,OAAOF,qBAAqB,CAACE,IAAI,CAAC;AACpC;AAiBA,OAAM,SAAUK,oBAAoBA,CAAA;EAClC,OAAOlB,IAAI,CAACW,qBAAqB,CAAC;AACpC;AAQAC,GAAG,CAACV,OAAO,EAAEE,gBAAgB,EAAED,aAAa,CAAC;AAC7CS,GAAG,CAACJ,QAAQ,EAAEE,iBAAiB,EAAED,cAAc,CAAC;AAChDG,GAAG,CAACP,SAAS,EAAEE,kBAAkB,EAAED,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}