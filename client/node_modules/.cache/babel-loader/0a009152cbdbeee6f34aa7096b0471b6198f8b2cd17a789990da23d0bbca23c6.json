{"ast":null,"code":"import { bisector, union, intersection } from 'd3-array';\nimport { field, isDate, toNumber, isArray, inrange, extend, array, error, peek, hasOwnProperty } from 'vega-util';\nimport { Literal } from 'vega-expression';\n\n// Registers vega-util field accessors to protect against XSS attacks\nconst SELECTION_GETTER = Symbol('vega_selection_getter');\nfunction getter(f) {\n  if (!f.getter || !f.getter[SELECTION_GETTER]) {\n    f.getter = field(f.field);\n    f.getter[SELECTION_GETTER] = true;\n  }\n  return f.getter;\n}\nconst Intersect = 'intersect';\nconst Union = 'union';\nconst VlMulti = 'vlMulti';\nconst VlPoint = 'vlPoint';\nconst Or = 'or';\nconst And = 'and';\nconst SelectionId = '_vgsid_';\nconst $selectionId = field(SelectionId);\nconst TYPE_ENUM = 'E',\n  TYPE_RANGE_INC = 'R',\n  TYPE_RANGE_EXC = 'R-E',\n  TYPE_RANGE_LE = 'R-LE',\n  TYPE_RANGE_RE = 'R-RE',\n  UNIT_INDEX = 'index:unit';\n\n// TODO: revisit date coercion?\nfunction testPoint(datum, entry) {\n  var fields = entry.fields,\n    values = entry.values,\n    n = fields.length,\n    i = 0,\n    dval,\n    f;\n  for (; i < n; ++i) {\n    f = fields[i];\n    dval = getter(f)(datum);\n    if (isDate(dval)) dval = toNumber(dval);\n    if (isDate(values[i])) values[i] = toNumber(values[i]);\n    if (isArray(values[i]) && isDate(values[i][0])) values[i] = values[i].map(toNumber);\n    if (f.type === TYPE_ENUM) {\n      // Enumerated fields can either specify individual values (single/multi selections)\n      // or an array of values (interval selections).\n      if (isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {\n        return false;\n      }\n    } else {\n      if (f.type === TYPE_RANGE_INC) {\n        if (!inrange(dval, values[i])) return false;\n      } else if (f.type === TYPE_RANGE_RE) {\n        // Discrete selection of bins test within the range [bin_start, bin_end).\n        if (!inrange(dval, values[i], true, false)) return false;\n      } else if (f.type === TYPE_RANGE_EXC) {\n        // 'R-E'/'R-LE' included for completeness.\n        if (!inrange(dval, values[i], false, false)) return false;\n      } else if (f.type === TYPE_RANGE_LE) {\n        if (!inrange(dval, values[i], false, true)) return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Tests if a tuple is contained within an interactive selection.\n * @param {string} name - The name of the data set representing the selection.\n *  Tuples in the dataset are of the form\n *  {unit: string, fields: array<fielddef>, values: array<*>}.\n *  Fielddef is of the form\n *  {field: string, channel: string, type: 'E' | 'R'} where\n *  'type' identifies whether tuples in the dataset enumerate\n *  values for the field, or specify a continuous range.\n * @param {object} datum - The tuple to test for inclusion.\n * @param {string} op - The set operation for combining selections.\n *   One of 'intersect' or 'union' (default).\n * @return {boolean} - True if the datum is in the selection, false otherwise.\n */\nfunction selectionTest(name, datum, op) {\n  var data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n    intersect = op === Intersect,\n    n = entries.length,\n    i = 0,\n    entry,\n    miss,\n    count,\n    unit,\n    b;\n  for (; i < n; ++i) {\n    entry = entries[i];\n    if (unitIdx && intersect) {\n      // multi selections union within the same unit and intersect across units.\n      miss = miss || {};\n      count = miss[unit = entry.unit] || 0;\n\n      // if we've already matched this unit, skip.\n      if (count === -1) continue;\n      b = testPoint(datum, entry);\n      miss[unit] = b ? -1 : ++count;\n\n      // if we match and there are no other units return true\n      // if we've missed against all tuples in this unit return false\n      if (b && unitIdx.size === 1) return true;\n      if (!b && count === unitIdx.get(unit).count) return false;\n    } else {\n      b = testPoint(datum, entry);\n\n      // if we find a miss and we do require intersection return false\n      // if we find a match and we don't require intersection return true\n      if (intersect ^ b) return b;\n    }\n  }\n\n  // if intersecting and we made it here, then we saw no misses\n  // if not intersecting, then we saw no matches\n  // if no active selections, return false\n  return n && intersect;\n}\nconst bisect = bisector($selectionId),\n  bisectLeft = bisect.left,\n  bisectRight = bisect.right;\nfunction selectionIdTest(name, datum, op) {\n  const data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n    intersect = op === Intersect,\n    value = $selectionId(datum),\n    index = bisectLeft(entries, value);\n  if (index === entries.length) return false;\n  if ($selectionId(entries[index]) !== value) return false;\n  if (unitIdx && intersect) {\n    if (unitIdx.size === 1) return true;\n    if (bisectRight(entries, value) - index < unitIdx.size) return false;\n  }\n  return true;\n}\n\n/**\n * Maps an array of scene graph items to an array of selection tuples.\n * @param {string} name  - The name of the dataset representing the selection.\n * @param {string} base  - The base object that generated tuples extend.\n *\n * @returns {array} An array of selection entries for the given unit.\n */\nfunction selectionTuples(array, base) {\n  return array.map(x => extend(base.fields ? {\n    values: base.fields.map(f => getter(f)(x.datum))\n  } : {\n    [SelectionId]: $selectionId(x.datum)\n  }, base));\n}\n\n/**\n * Resolves selection for use as a scale domain or reads via the API.\n * @param {string} name - The name of the dataset representing the selection\n * @param {string} [op='union'] - The set operation for combining selections.\n *                 One of 'intersect' or 'union' (default).\n * @param {boolean} isMulti - Identifies a \"multi\" selection to perform more\n *                 expensive resolution computation.\n * @param {boolean} vl5 - With Vega-Lite v5, \"multi\" selections are now called \"point\"\n *                 selections, and thus the resolved tuple should reflect this name.\n *                 This parameter allows us to reflect this change without triggering\n *                 a major version bump for Vega.\n * @returns {object} An object of selected fields and values.\n */\nfunction selectionResolve(name, op, isMulti, vl5) {\n  var data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    resolved = {},\n    multiRes = {},\n    types = {},\n    entry,\n    fields,\n    values,\n    unit,\n    field,\n    value,\n    res,\n    resUnit,\n    type,\n    union,\n    n = entries.length,\n    i = 0,\n    j,\n    m;\n\n  // First union all entries within the same unit.\n  for (; i < n; ++i) {\n    entry = entries[i];\n    unit = entry.unit;\n    fields = entry.fields;\n    values = entry.values;\n    if (fields && values) {\n      // Intentional selection stores\n      for (j = 0, m = fields.length; j < m; ++j) {\n        field = fields[j];\n        res = resolved[field.field] || (resolved[field.field] = {});\n        resUnit = res[unit] || (res[unit] = []);\n        types[field.field] = type = field.type.charAt(0);\n        union = ops[`${type}_union`];\n        res[unit] = union(resUnit, array(values[j]));\n      }\n\n      // If the same multi-selection is repeated over views and projected over\n      // an encoding, it may operate over different fields making it especially\n      // tricky to reliably resolve it. At best, we can de-dupe identical entries\n      // but doing so may be more computationally expensive than it is worth.\n      // Instead, for now, we simply transform our store representation into\n      // a more human-friendly one.\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push(array(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));\n      }\n    } else {\n      // Short circuit extensional selectionId stores which hold sorted IDs unique to each unit.\n      field = SelectionId;\n      value = $selectionId(entry);\n      res = resolved[field] || (resolved[field] = {});\n      resUnit = res[unit] || (res[unit] = []);\n      resUnit.push(value);\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push({\n          [SelectionId]: value\n        });\n      }\n    }\n  }\n\n  // Then resolve fields across units as per the op.\n  op = op || Union;\n  if (resolved[SelectionId]) {\n    resolved[SelectionId] = ops[`${SelectionId}_${op}`](...Object.values(resolved[SelectionId]));\n  } else {\n    Object.keys(resolved).forEach(field => {\n      resolved[field] = Object.keys(resolved[field]).map(unit => resolved[field][unit]).reduce((acc, curr) => acc === undefined ? curr : ops[`${types[field]}_${op}`](acc, curr));\n    });\n  }\n  entries = Object.keys(multiRes);\n  if (isMulti && entries.length) {\n    const key = vl5 ? VlPoint : VlMulti;\n    resolved[key] = op === Union ? {\n      [Or]: entries.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])\n    } : {\n      [And]: entries.map(k => ({\n        [Or]: multiRes[k]\n      }))\n    };\n  }\n  return resolved;\n}\nvar ops = {\n  [`${SelectionId}_union`]: union,\n  [`${SelectionId}_intersect`]: intersection,\n  E_union: function (base, value) {\n    if (!base.length) return value;\n    var i = 0,\n      n = value.length;\n    for (; i < n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);\n    return base;\n  },\n  E_intersect: function (base, value) {\n    return !base.length ? value : base.filter(v => value.indexOf(v) >= 0);\n  },\n  R_union: function (base, value) {\n    var lo = toNumber(value[0]),\n      hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n    if (!base.length) return [lo, hi];\n    if (base[0] > lo) base[0] = lo;\n    if (base[1] < hi) base[1] = hi;\n    return base;\n  },\n  R_intersect: function (base, value) {\n    var lo = toNumber(value[0]),\n      hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n    if (!base.length) return [lo, hi];\n    if (hi < base[0] || base[1] < lo) {\n      return [];\n    } else {\n      if (base[0] < lo) base[0] = lo;\n      if (base[1] > hi) base[1] = hi;\n    }\n    return base;\n  }\n};\nconst DataPrefix = ':',\n  IndexPrefix = '@';\nfunction selectionVisitor(name, args, scope, params) {\n  if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');\n  const data = args[0].value,\n    op = args.length >= 2 && peek(args).value,\n    field = 'unit',\n    indexName = IndexPrefix + field,\n    dataName = DataPrefix + data;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (op === Intersect && !hasOwnProperty(params, indexName)) {\n    params[indexName] = scope.getData(data).indataRef(scope, field);\n  }\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (!hasOwnProperty(params, dataName)) {\n    params[dataName] = scope.getData(data).tuplesRef();\n  }\n}\nexport { selectionIdTest, selectionResolve, selectionTest, selectionTuples, selectionVisitor };","map":{"version":3,"names":["bisector","union","intersection","field","isDate","toNumber","isArray","inrange","extend","array","error","peek","hasOwnProperty","Literal","SELECTION_GETTER","Symbol","getter","f","Intersect","Union","VlMulti","VlPoint","Or","And","SelectionId","$selectionId","TYPE_ENUM","TYPE_RANGE_INC","TYPE_RANGE_EXC","TYPE_RANGE_LE","TYPE_RANGE_RE","UNIT_INDEX","testPoint","datum","entry","fields","values","n","length","i","dval","map","type","indexOf","selectionTest","name","op","data","context","entries","value","unitIdx","undefined","intersect","miss","count","unit","b","size","get","bisect","bisectLeft","left","bisectRight","right","selectionIdTest","index","selectionTuples","base","x","selectionResolve","isMulti","vl5","resolved","multiRes","types","res","resUnit","j","m","charAt","ops","push","reduce","obj","curr","Object","keys","forEach","acc","key","k","E_union","E_intersect","filter","v","R_union","lo","hi","R_intersect","DataPrefix","IndexPrefix","selectionVisitor","args","scope","params","indexName","dataName","getData","indataRef","tuplesRef"],"sources":["C:/Users/sutul/node_modules/vega-selections/build/vega-selection.module.js"],"sourcesContent":["import { bisector, union, intersection } from 'd3-array';\nimport { field, isDate, toNumber, isArray, inrange, extend, array, error, peek, hasOwnProperty } from 'vega-util';\nimport { Literal } from 'vega-expression';\n\n// Registers vega-util field accessors to protect against XSS attacks\nconst SELECTION_GETTER = Symbol('vega_selection_getter');\nfunction getter(f) {\n  if (!f.getter || !f.getter[SELECTION_GETTER]) {\n    f.getter = field(f.field);\n    f.getter[SELECTION_GETTER] = true;\n  }\n  return f.getter;\n}\nconst Intersect = 'intersect';\nconst Union = 'union';\nconst VlMulti = 'vlMulti';\nconst VlPoint = 'vlPoint';\nconst Or = 'or';\nconst And = 'and';\nconst SelectionId = '_vgsid_';\nconst $selectionId = field(SelectionId);\n\nconst TYPE_ENUM = 'E',\n  TYPE_RANGE_INC = 'R',\n  TYPE_RANGE_EXC = 'R-E',\n  TYPE_RANGE_LE = 'R-LE',\n  TYPE_RANGE_RE = 'R-RE',\n  UNIT_INDEX = 'index:unit';\n\n// TODO: revisit date coercion?\nfunction testPoint(datum, entry) {\n  var fields = entry.fields,\n    values = entry.values,\n    n = fields.length,\n    i = 0,\n    dval,\n    f;\n  for (; i < n; ++i) {\n    f = fields[i];\n    dval = getter(f)(datum);\n    if (isDate(dval)) dval = toNumber(dval);\n    if (isDate(values[i])) values[i] = toNumber(values[i]);\n    if (isArray(values[i]) && isDate(values[i][0])) values[i] = values[i].map(toNumber);\n    if (f.type === TYPE_ENUM) {\n      // Enumerated fields can either specify individual values (single/multi selections)\n      // or an array of values (interval selections).\n      if (isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {\n        return false;\n      }\n    } else {\n      if (f.type === TYPE_RANGE_INC) {\n        if (!inrange(dval, values[i])) return false;\n      } else if (f.type === TYPE_RANGE_RE) {\n        // Discrete selection of bins test within the range [bin_start, bin_end).\n        if (!inrange(dval, values[i], true, false)) return false;\n      } else if (f.type === TYPE_RANGE_EXC) {\n        // 'R-E'/'R-LE' included for completeness.\n        if (!inrange(dval, values[i], false, false)) return false;\n      } else if (f.type === TYPE_RANGE_LE) {\n        if (!inrange(dval, values[i], false, true)) return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Tests if a tuple is contained within an interactive selection.\n * @param {string} name - The name of the data set representing the selection.\n *  Tuples in the dataset are of the form\n *  {unit: string, fields: array<fielddef>, values: array<*>}.\n *  Fielddef is of the form\n *  {field: string, channel: string, type: 'E' | 'R'} where\n *  'type' identifies whether tuples in the dataset enumerate\n *  values for the field, or specify a continuous range.\n * @param {object} datum - The tuple to test for inclusion.\n * @param {string} op - The set operation for combining selections.\n *   One of 'intersect' or 'union' (default).\n * @return {boolean} - True if the datum is in the selection, false otherwise.\n */\nfunction selectionTest(name, datum, op) {\n  var data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n    intersect = op === Intersect,\n    n = entries.length,\n    i = 0,\n    entry,\n    miss,\n    count,\n    unit,\n    b;\n  for (; i < n; ++i) {\n    entry = entries[i];\n    if (unitIdx && intersect) {\n      // multi selections union within the same unit and intersect across units.\n      miss = miss || {};\n      count = miss[unit = entry.unit] || 0;\n\n      // if we've already matched this unit, skip.\n      if (count === -1) continue;\n      b = testPoint(datum, entry);\n      miss[unit] = b ? -1 : ++count;\n\n      // if we match and there are no other units return true\n      // if we've missed against all tuples in this unit return false\n      if (b && unitIdx.size === 1) return true;\n      if (!b && count === unitIdx.get(unit).count) return false;\n    } else {\n      b = testPoint(datum, entry);\n\n      // if we find a miss and we do require intersection return false\n      // if we find a match and we don't require intersection return true\n      if (intersect ^ b) return b;\n    }\n  }\n\n  // if intersecting and we made it here, then we saw no misses\n  // if not intersecting, then we saw no matches\n  // if no active selections, return false\n  return n && intersect;\n}\nconst bisect = bisector($selectionId),\n  bisectLeft = bisect.left,\n  bisectRight = bisect.right;\nfunction selectionIdTest(name, datum, op) {\n  const data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n    intersect = op === Intersect,\n    value = $selectionId(datum),\n    index = bisectLeft(entries, value);\n  if (index === entries.length) return false;\n  if ($selectionId(entries[index]) !== value) return false;\n  if (unitIdx && intersect) {\n    if (unitIdx.size === 1) return true;\n    if (bisectRight(entries, value) - index < unitIdx.size) return false;\n  }\n  return true;\n}\n\n/**\n * Maps an array of scene graph items to an array of selection tuples.\n * @param {string} name  - The name of the dataset representing the selection.\n * @param {string} base  - The base object that generated tuples extend.\n *\n * @returns {array} An array of selection entries for the given unit.\n */\nfunction selectionTuples(array, base) {\n  return array.map(x => extend(base.fields ? {\n    values: base.fields.map(f => getter(f)(x.datum))\n  } : {\n    [SelectionId]: $selectionId(x.datum)\n  }, base));\n}\n\n/**\n * Resolves selection for use as a scale domain or reads via the API.\n * @param {string} name - The name of the dataset representing the selection\n * @param {string} [op='union'] - The set operation for combining selections.\n *                 One of 'intersect' or 'union' (default).\n * @param {boolean} isMulti - Identifies a \"multi\" selection to perform more\n *                 expensive resolution computation.\n * @param {boolean} vl5 - With Vega-Lite v5, \"multi\" selections are now called \"point\"\n *                 selections, and thus the resolved tuple should reflect this name.\n *                 This parameter allows us to reflect this change without triggering\n *                 a major version bump for Vega.\n * @returns {object} An object of selected fields and values.\n */\nfunction selectionResolve(name, op, isMulti, vl5) {\n  var data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    resolved = {},\n    multiRes = {},\n    types = {},\n    entry,\n    fields,\n    values,\n    unit,\n    field,\n    value,\n    res,\n    resUnit,\n    type,\n    union,\n    n = entries.length,\n    i = 0,\n    j,\n    m;\n\n  // First union all entries within the same unit.\n  for (; i < n; ++i) {\n    entry = entries[i];\n    unit = entry.unit;\n    fields = entry.fields;\n    values = entry.values;\n    if (fields && values) {\n      // Intentional selection stores\n      for (j = 0, m = fields.length; j < m; ++j) {\n        field = fields[j];\n        res = resolved[field.field] || (resolved[field.field] = {});\n        resUnit = res[unit] || (res[unit] = []);\n        types[field.field] = type = field.type.charAt(0);\n        union = ops[`${type}_union`];\n        res[unit] = union(resUnit, array(values[j]));\n      }\n\n      // If the same multi-selection is repeated over views and projected over\n      // an encoding, it may operate over different fields making it especially\n      // tricky to reliably resolve it. At best, we can de-dupe identical entries\n      // but doing so may be more computationally expensive than it is worth.\n      // Instead, for now, we simply transform our store representation into\n      // a more human-friendly one.\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push(array(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));\n      }\n    } else {\n      // Short circuit extensional selectionId stores which hold sorted IDs unique to each unit.\n      field = SelectionId;\n      value = $selectionId(entry);\n      res = resolved[field] || (resolved[field] = {});\n      resUnit = res[unit] || (res[unit] = []);\n      resUnit.push(value);\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push({\n          [SelectionId]: value\n        });\n      }\n    }\n  }\n\n  // Then resolve fields across units as per the op.\n  op = op || Union;\n  if (resolved[SelectionId]) {\n    resolved[SelectionId] = ops[`${SelectionId}_${op}`](...Object.values(resolved[SelectionId]));\n  } else {\n    Object.keys(resolved).forEach(field => {\n      resolved[field] = Object.keys(resolved[field]).map(unit => resolved[field][unit]).reduce((acc, curr) => acc === undefined ? curr : ops[`${types[field]}_${op}`](acc, curr));\n    });\n  }\n  entries = Object.keys(multiRes);\n  if (isMulti && entries.length) {\n    const key = vl5 ? VlPoint : VlMulti;\n    resolved[key] = op === Union ? {\n      [Or]: entries.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])\n    } : {\n      [And]: entries.map(k => ({\n        [Or]: multiRes[k]\n      }))\n    };\n  }\n  return resolved;\n}\nvar ops = {\n  [`${SelectionId}_union`]: union,\n  [`${SelectionId}_intersect`]: intersection,\n  E_union: function (base, value) {\n    if (!base.length) return value;\n    var i = 0,\n      n = value.length;\n    for (; i < n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);\n    return base;\n  },\n  E_intersect: function (base, value) {\n    return !base.length ? value : base.filter(v => value.indexOf(v) >= 0);\n  },\n  R_union: function (base, value) {\n    var lo = toNumber(value[0]),\n      hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n    if (!base.length) return [lo, hi];\n    if (base[0] > lo) base[0] = lo;\n    if (base[1] < hi) base[1] = hi;\n    return base;\n  },\n  R_intersect: function (base, value) {\n    var lo = toNumber(value[0]),\n      hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n    if (!base.length) return [lo, hi];\n    if (hi < base[0] || base[1] < lo) {\n      return [];\n    } else {\n      if (base[0] < lo) base[0] = lo;\n      if (base[1] > hi) base[1] = hi;\n    }\n    return base;\n  }\n};\n\nconst DataPrefix = ':',\n  IndexPrefix = '@';\nfunction selectionVisitor(name, args, scope, params) {\n  if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');\n  const data = args[0].value,\n    op = args.length >= 2 && peek(args).value,\n    field = 'unit',\n    indexName = IndexPrefix + field,\n    dataName = DataPrefix + data;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (op === Intersect && !hasOwnProperty(params, indexName)) {\n    params[indexName] = scope.getData(data).indataRef(scope, field);\n  }\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (!hasOwnProperty(params, dataName)) {\n    params[dataName] = scope.getData(data).tuplesRef();\n  }\n}\n\nexport { selectionIdTest, selectionResolve, selectionTest, selectionTuples, selectionVisitor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}