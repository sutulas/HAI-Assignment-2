{"ast":null,"code":"import { signalOrValueRef } from '../../common';\nimport { midPoint } from './valueref';\nexport function positionOffset(_ref) {\n  let {\n    channel: baseChannel,\n    markDef,\n    encoding = {},\n    model,\n    bandPosition\n  } = _ref;\n  const channel = `${baseChannel}Offset`; // Need to cast as the type can't be inferred automatically\n  const defaultValue = markDef[channel];\n  // FIXME: remove as any\n  const channelDef = encoding[channel];\n  if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n    const ref = midPoint({\n      channel: channel,\n      channelDef,\n      markDef,\n      config: model?.config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef: signalOrValueRef(defaultValue),\n      bandPosition\n    });\n    return {\n      offsetType: 'encoding',\n      offset: ref\n    };\n  }\n  const markDefOffsetValue = markDef[channel];\n  if (markDefOffsetValue) {\n    return {\n      offsetType: 'visual',\n      offset: markDefOffsetValue\n    };\n  }\n  return {};\n}","map":{"version":3,"names":["signalOrValueRef","midPoint","positionOffset","_ref","channel","baseChannel","markDef","encoding","model","bandPosition","defaultValue","channelDef","ref","config","scaleName","scale","getScaleComponent","stack","defaultRef","offsetType","offset","markDefOffsetValue"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\mark\\encode\\offset.ts"],"sourcesContent":["/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport type {SignalRef} from 'vega';\nimport {PolarPositionChannel, PositionChannel} from '../../../channel';\nimport {Encoding} from '../../../encoding';\nimport {Mark, MarkDef} from '../../../mark';\nimport {VgValueRef} from '../../../vega.schema';\nimport {signalOrValueRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {midPoint} from './valueref';\n\nexport interface Offset {\n  offsetType?: 'visual' | 'encoding';\n  offset?: number | VgValueRef;\n}\n\nexport function positionOffset({\n  channel: baseChannel,\n  markDef,\n  encoding = {},\n  model,\n  bandPosition\n}: {\n  channel: PositionChannel | PolarPositionChannel;\n  markDef: MarkDef<Mark, SignalRef>;\n  encoding?: Encoding<string>;\n  model?: UnitModel;\n  bandPosition?: number;\n}): Offset {\n  const channel = `${baseChannel}Offset` as\n    | 'xOffset'\n    | 'yOffset'\n    | 'x2Offset'\n    | 'y2Offset'\n    | 'thetaOffset'\n    | 'radiusOffset'\n    | 'theta2Offset'\n    | 'radius2Offset'; // Need to cast as the type can't be inferred automatically\n\n  const defaultValue = markDef[channel];\n  // FIXME: remove as any\n  const channelDef = (encoding as any)[channel];\n\n  if ((channel === 'xOffset' || channel === 'yOffset') && channelDef) {\n    const ref = midPoint({\n      channel: channel,\n      channelDef,\n      markDef,\n      config: model?.config,\n      scaleName: model.scaleName(channel),\n      scale: model.getScaleComponent(channel),\n      stack: null,\n      defaultRef: signalOrValueRef(defaultValue),\n      bandPosition\n    });\n    return {offsetType: 'encoding', offset: ref};\n  }\n\n  const markDefOffsetValue = markDef[channel];\n  if (markDefOffsetValue) {\n    return {offsetType: 'visual', offset: markDefOffsetValue};\n  }\n\n  return {};\n}\n"],"mappings":"AAQA,SAAQA,gBAAgB,QAAO,cAAc;AAE7C,SAAQC,QAAQ,QAAO,YAAY;AAOnC,OAAM,SAAUC,cAAcA,CAAAC,IAAA,EAY7B;EAAA,IAZ8B;IAC7BC,OAAO,EAAEC,WAAW;IACpBC,OAAO;IACPC,QAAQ,GAAG,EAAE;IACbC,KAAK;IACLC;EAAY,CAOb,GAAAN,IAAA;EACC,MAAMC,OAAO,GAAG,GAAGC,WAAW,QAQX,CAAC,CAAC;EAErB,MAAMK,YAAY,GAAGJ,OAAO,CAACF,OAAO,CAAC;EACrC;EACA,MAAMO,UAAU,GAAIJ,QAAgB,CAACH,OAAO,CAAC;EAE7C,IAAI,CAACA,OAAO,KAAK,SAAS,IAAIA,OAAO,KAAK,SAAS,KAAKO,UAAU,EAAE;IAClE,MAAMC,GAAG,GAAGX,QAAQ,CAAC;MACnBG,OAAO,EAAEA,OAAO;MAChBO,UAAU;MACVL,OAAO;MACPO,MAAM,EAAEL,KAAK,EAAEK,MAAM;MACrBC,SAAS,EAAEN,KAAK,CAACM,SAAS,CAACV,OAAO,CAAC;MACnCW,KAAK,EAAEP,KAAK,CAACQ,iBAAiB,CAACZ,OAAO,CAAC;MACvCa,KAAK,EAAE,IAAI;MACXC,UAAU,EAAElB,gBAAgB,CAACU,YAAY,CAAC;MAC1CD;KACD,CAAC;IACF,OAAO;MAACU,UAAU,EAAE,UAAU;MAAEC,MAAM,EAAER;IAAG,CAAC;EAC9C;EAEA,MAAMS,kBAAkB,GAAGf,OAAO,CAACF,OAAO,CAAC;EAC3C,IAAIiB,kBAAkB,EAAE;IACtB,OAAO;MAACF,UAAU,EAAE,QAAQ;MAAEC,MAAM,EAAEC;IAAkB,CAAC;EAC3D;EAEA,OAAO,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}