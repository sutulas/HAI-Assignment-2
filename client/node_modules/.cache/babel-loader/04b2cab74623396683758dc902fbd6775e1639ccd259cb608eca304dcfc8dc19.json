{"ast":null,"code":"import { isObject } from 'vega-util';\nexport function isScaleInvalidDataIncludeAsValue(invalidDataMode) {\n  return isObject(invalidDataMode) && 'value' in invalidDataMode;\n}","map":{"version":3,"names":["isObject","isScaleInvalidDataIncludeAsValue","invalidDataMode"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\invalid.ts"],"sourcesContent":["import type {SignalRef} from 'vega';\nimport {ScaleChannel} from './channel';\nimport {Mark, MarkDef} from './mark';\nimport {isObject} from 'vega-util';\n\n/**\n * Mixins for Vega-Lite Spec's Mark Definiton (to add mark.invalid)\n */\nexport interface MarkInvalidMixins {\n  /**\n   * Invalid data mode, which defines how the marks and corresponding scales should represent invalid values (`null` and `NaN` in continuous scales *without* defined output for invalid values).\n   *\n   * - `\"filter\"` — *Exclude* all invalid values from the visualization's *marks* and *scales*.\n   * For path marks (for line, area, trail), this option will create paths that connect valid points, as if the data rows with invalid values do not exist.\n   *\n   * - `\"break-paths-filter-domains\"` —\n   * Break path marks (for line, area, trail) at invalid values.  For non-path marks, this is equivalent to `\"filter\"`.\n   * All *scale* domains will *exclude* these filtered data points.\n   *\n   * - `\"break-paths-show-domains\"` —\n   * Break paths (for line, area, trail) at invalid values.  Hide invalid values for non-path marks.\n   * All *scale* domains will *include* these filtered data points (for both path and non-path marks).\n   *\n   * - `\"show\"` or `null` —\n   * Show all data points in the marks and scale domains. Each scale will use the output for invalid values defined in `config.scale.invalid`\n   * or, if unspecified, by default invalid values will produce the same visual values as zero (if the scale includes zero) or the minimum value (if the scale does not include zero).\n   *\n   * - `\"break-paths-show-path-domains\"` (default) —\n   * This is equivalent to `\"break-paths-show-domains\"` for path-based marks (line/area/trail)\n   * and `\"filter\"` for non-path marks.\n   *\n   * __Note__: If any channel's scale has an output for invalid values defined in `config.scale.invalid`,\n   * all values for the scales will be considered \"valid\" since they can produce a reasonable output for the scales.\n   * Thus, fields for such channels will not be filtered and will not cause path breaks.\n   */\n  invalid?: MarkInvalidDataMode | null;\n}\n\nexport type MarkInvalidDataMode =\n  | 'filter'\n  | 'break-paths-filter-domains'\n  | 'break-paths-show-domains'\n  | 'break-paths-show-path-domains'\n  | 'show';\n\n/**\n * Mixins for Vega-Lite Spec's config.scale\n */\nexport interface ScaleInvalidDataConfigMixins {\n  /**\n   * An object that defines scale outputs per channel for invalid values (nulls and NaNs on a continuous scale).\n   * - The keys in this object are the scale channels.\n   * - The values is either `\"zero-or-min\"` (use zero if the scale includes zero or min value otherwise) or a value definition `{value: ...}`.\n   *\n   * _Example:_ Setting this `config.scale.invalid` property to `{color: {value: '#aaa'}}`\n   * will make the visualization color all invalid values with '#aaa'.\n   *\n   * See [https://vega.github.io/vega-lite/docs/invalid-data.html](Invalid Data Docs) for more details.\n   */\n  invalid?: ScaleInvalidDataConfig;\n}\n\nexport type ScaleInvalidDataConfig = {\n  [c in ScaleChannel]?: ScaleInvalidDataShowAs<c>;\n};\n\nexport type ScaleInvalidDataShowAs<C extends ScaleChannel> = ScaleInvalidDataShowAsValue<C> | 'zero-or-min';\n\nexport type ScaleInvalidDataShowAsValue<C extends ScaleChannel> = {\n  value: MarkDef<Mark, SignalRef>[C];\n};\n\nexport function isScaleInvalidDataIncludeAsValue<C extends ScaleChannel>(\n  invalidDataMode: ScaleInvalidDataShowAs<C>\n): invalidDataMode is ScaleInvalidDataShowAsValue<C> {\n  return isObject(invalidDataMode) && 'value' in invalidDataMode;\n}\n"],"mappings":"AAGA,SAAQA,QAAQ,QAAO,WAAW;AAqElC,OAAM,SAAUC,gCAAgCA,CAC9CC,eAA0C;EAE1C,OAAOF,QAAQ,CAACE,eAAe,CAAC,IAAI,OAAO,IAAIA,eAAe;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}