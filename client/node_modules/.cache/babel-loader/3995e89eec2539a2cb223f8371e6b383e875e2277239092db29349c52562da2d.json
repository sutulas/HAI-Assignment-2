{"ast":null,"code":"import { hasOwnProperty, isArray } from 'vega-util';\nimport { hasProperty } from './util';\nexport const DEFAULT_SORT_OP = 'min';\nconst SORT_BY_CHANNEL_INDEX = {\n  x: 1,\n  y: 1,\n  color: 1,\n  fill: 1,\n  stroke: 1,\n  strokeWidth: 1,\n  size: 1,\n  shape: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  opacity: 1,\n  text: 1\n};\nexport function isSortByChannel(c) {\n  return hasOwnProperty(SORT_BY_CHANNEL_INDEX, c);\n}\nexport function isSortByEncoding(sort) {\n  return hasProperty(sort, 'encoding');\n}\nexport function isSortField(sort) {\n  return sort && (sort.op === 'count' || hasProperty(sort, 'field'));\n}\nexport function isSortArray(sort) {\n  return sort && isArray(sort);\n}","map":{"version":3,"names":["hasOwnProperty","isArray","hasProperty","DEFAULT_SORT_OP","SORT_BY_CHANNEL_INDEX","x","y","color","fill","stroke","strokeWidth","size","shape","fillOpacity","strokeOpacity","opacity","text","isSortByChannel","c","isSortByEncoding","sort","isSortField","op","isSortArray"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\sort.ts"],"sourcesContent":["import {hasOwnProperty, isArray} from 'vega-util';\nimport {NonArgAggregateOp} from './aggregate';\nimport {FieldName} from './channeldef';\nimport {DateTime} from './datetime';\nimport {hasProperty} from './util';\n\nexport type SortOrder = 'ascending' | 'descending';\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: FieldName;\n\n  /**\n   * Whether to sort the field in ascending or descending order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortFields {\n  field: FieldName[];\n  order?: SortOrder[];\n}\n\nexport const DEFAULT_SORT_OP = 'min';\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F; // Field is optional because `\"op\": \"count\"` does not require a field.\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * An aggregation is required when there are multiple values of the sort field for each encoded data field.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   *\n   * __Default value:__ `\"sum\"` for stacked plots. Otherwise, `\"min\"`.\n   */\n  op?: NonArgAggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortByEncoding {\n  /**\n   * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `\"x\"`, `\"y\"`)\n   */\n  encoding: SortByChannel;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport type SortArray = number[] | string[] | boolean[] | DateTime[];\n\nconst SORT_BY_CHANNEL_INDEX = {\n  x: 1,\n  y: 1,\n  color: 1,\n  fill: 1,\n  stroke: 1,\n  strokeWidth: 1,\n  size: 1,\n  shape: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  opacity: 1,\n  text: 1\n} as const;\n\nexport type SortByChannel = keyof typeof SORT_BY_CHANNEL_INDEX;\n\nexport function isSortByChannel(c: string): c is SortByChannel {\n  return hasOwnProperty(SORT_BY_CHANNEL_INDEX, c);\n}\n\nexport type SortByChannelDesc =\n  | '-x'\n  | '-y'\n  | '-color'\n  | '-fill'\n  | '-stroke'\n  | '-strokeWidth'\n  | '-size'\n  | '-shape'\n  | '-fillOpacity'\n  | '-strokeOpacity'\n  | '-opacity'\n  | '-text';\n\nexport type AllSortString = SortOrder | SortByChannel | SortByChannelDesc;\n\nexport type Sort<F> = SortArray | AllSortString | EncodingSortField<F> | SortByEncoding | null;\n\nexport function isSortByEncoding<F>(sort: Sort<F>): sort is SortByEncoding {\n  return hasProperty(sort, 'encoding');\n}\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return sort && ((sort as any).op === 'count' || hasProperty(sort, 'field'));\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is SortArray {\n  return sort && isArray(sort);\n}\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,OAAO,QAAO,WAAW;AAIjD,SAAQC,WAAW,QAAO,QAAQ;AAwBlC,OAAO,MAAMC,eAAe,GAAG,KAAK;AA4CpC,MAAMC,qBAAqB,GAAG;EAC5BC,CAAC,EAAE,CAAC;EACJC,CAAC,EAAE,CAAC;EACJC,KAAK,EAAE,CAAC;EACRC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,WAAW,EAAE,CAAC;EACdC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,WAAW,EAAE,CAAC;EACdC,aAAa,EAAE,CAAC;EAChBC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE;CACE;AAIV,OAAM,SAAUC,eAAeA,CAACC,CAAS;EACvC,OAAOlB,cAAc,CAACI,qBAAqB,EAAEc,CAAC,CAAC;AACjD;AAoBA,OAAM,SAAUC,gBAAgBA,CAAIC,IAAa;EAC/C,OAAOlB,WAAW,CAACkB,IAAI,EAAE,UAAU,CAAC;AACtC;AAEA,OAAM,SAAUC,WAAWA,CAAID,IAAa;EAC1C,OAAOA,IAAI,KAAMA,IAAY,CAACE,EAAE,KAAK,OAAO,IAAIpB,WAAW,CAACkB,IAAI,EAAE,OAAO,CAAC,CAAC;AAC7E;AAEA,OAAM,SAAUG,WAAWA,CAAIH,IAAa;EAC1C,OAAOA,IAAI,IAAInB,OAAO,CAACmB,IAAI,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}