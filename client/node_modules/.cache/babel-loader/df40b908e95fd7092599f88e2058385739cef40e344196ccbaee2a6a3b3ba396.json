{"ast":null,"code":"import { hasOwnProperty } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { getFieldOrDatumDef } from '../../channeldef';\nimport { DataSourceType } from '../../data';\nimport { replaceExprRef } from '../../expr';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { deepEqual, duplicate, every } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n}\nfunction parseUnitProjection(model) {\n  if (model.hasProjection) {\n    const proj = replaceExprRef(model.specifiedProjection);\n    const fit = !(proj && (proj.scale != null || proj.translate != null));\n    const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n    const data = fit ? gatherFitData(model) : undefined;\n    const projComp = new ProjectionComponent(model.projectionName(true), {\n      ...replaceExprRef(model.config.projection),\n      ...proj\n    }, size, data);\n    if (!projComp.get('type')) {\n      projComp.set('type', 'equalEarth', false);\n    }\n    return projComp;\n  }\n  return undefined;\n}\nfunction gatherFitData(model) {\n  const data = [];\n  const {\n    encoding\n  } = model;\n  for (const posssiblePair of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n    if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {\n      data.push({\n        signal: model.getName(`geojson_${data.length}`)\n      });\n    }\n  }\n  if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {\n    data.push({\n      signal: model.getName(`geojson_${data.length}`)\n    });\n  }\n  if (data.length === 0) {\n    // main source is geojson, so we can just use that\n    data.push(model.requestDataName(DataSourceType.Main));\n  }\n  return data;\n}\nfunction mergeIfNoConflict(first, second) {\n  const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n    // neither has the property\n    if (!hasOwnProperty(first.explicit, prop) && !hasOwnProperty(second.explicit, prop)) {\n      return true;\n    }\n    // both have property and an equal value for property\n    if (hasOwnProperty(first.explicit, prop) && hasOwnProperty(second.explicit, prop) &&\n    // some properties might be signals or objects and require hashing for comparison\n    deepEqual(first.get(prop), second.get(prop))) {\n      return true;\n    }\n    return false;\n  });\n  const size = deepEqual(first.size, second.size);\n  if (size) {\n    if (allPropertiesShared) {\n      return first;\n    } else if (deepEqual(first.explicit, {})) {\n      return second;\n    } else if (deepEqual(second.explicit, {})) {\n      return first;\n    }\n  }\n  // if all properties don't match, let each unit spec have its own projection\n  return null;\n}\nfunction parseNonUnitProjections(model) {\n  if (model.children.length === 0) {\n    return undefined;\n  }\n  let nonUnitProjection;\n  // parse all children first\n  for (const child of model.children) {\n    parseProjection(child);\n  }\n  // analyze parsed projections, attempt to merge\n  const mergable = every(model.children, child => {\n    const projection = child.component.projection;\n    if (!projection) {\n      // child layer does not use a projection\n      return true;\n    } else if (!nonUnitProjection) {\n      // cached 'projection' is null, cache this one\n      nonUnitProjection = projection;\n      return true;\n    } else {\n      const merge = mergeIfNoConflict(nonUnitProjection, projection);\n      if (merge) {\n        nonUnitProjection = merge;\n      }\n      return !!merge;\n    }\n  });\n  // if cached one and all other children share the same projection,\n  if (nonUnitProjection && mergable) {\n    // so we can elevate it to the layer level\n    const name = model.projectionName(true);\n    const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));\n    // rename and assign all others as merged\n    for (const child of model.children) {\n      const projection = child.component.projection;\n      if (projection) {\n        if (projection.isFit) {\n          modelProjection.data.push(...child.component.projection.data);\n        }\n        child.renameProjection(projection.get('name'), name);\n        projection.merged = true;\n      }\n    }\n    return modelProjection;\n  }\n  return undefined;\n}","map":{"version":3,"names":["hasOwnProperty","LATITUDE","LATITUDE2","LONGITUDE","LONGITUDE2","SHAPE","getFieldOrDatumDef","DataSourceType","replaceExprRef","PROJECTION_PROPERTIES","GEOJSON","deepEqual","duplicate","every","isUnitModel","ProjectionComponent","parseProjection","model","component","projection","parseUnitProjection","parseNonUnitProjections","hasProjection","proj","specifiedProjection","fit","scale","translate","size","getSizeSignalRef","undefined","data","gatherFitData","projComp","projectionName","config","get","set","encoding","posssiblePair","push","signal","getName","length","channelHasField","typedFieldDef","type","requestDataName","Main","mergeIfNoConflict","first","second","allPropertiesShared","prop","explicit","children","nonUnitProjection","child","mergable","merge","name","modelProjection","isFit","renameProjection","merged"],"sources":["C:\\Users\\sutul\\node_modules\\vega-lite\\src\\compile\\projection\\parse.ts"],"sourcesContent":["import type {SignalRef} from 'vega';\nimport {hasOwnProperty} from 'vega-util';\nimport {LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {getFieldOrDatumDef} from '../../channeldef';\nimport {DataSourceType} from '../../data';\nimport {replaceExprRef} from '../../expr';\nimport {PROJECTION_PROPERTIES} from '../../projection';\nimport {GEOJSON} from '../../type';\nimport {deepEqual, duplicate, every} from '../../util';\nimport {isUnitModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport {ProjectionComponent} from './component';\n\nexport function parseProjection(model: Model) {\n  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n}\n\nfunction parseUnitProjection(model: UnitModel): ProjectionComponent {\n  if (model.hasProjection) {\n    const proj = replaceExprRef(model.specifiedProjection);\n    const fit = !(proj && (proj.scale != null || proj.translate != null));\n    const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n    const data = fit ? gatherFitData(model) : undefined;\n\n    const projComp = new ProjectionComponent(\n      model.projectionName(true),\n      {\n        ...replaceExprRef(model.config.projection),\n        ...proj\n      },\n      size,\n      data\n    );\n\n    if (!projComp.get('type')) {\n      projComp.set('type', 'equalEarth', false);\n    }\n\n    return projComp;\n  }\n\n  return undefined;\n}\n\nfunction gatherFitData(model: UnitModel) {\n  const data: (SignalRef | string)[] = [];\n\n  const {encoding} = model;\n\n  for (const posssiblePair of [\n    [LONGITUDE, LATITUDE],\n    [LONGITUDE2, LATITUDE2]\n  ]) {\n    if (getFieldOrDatumDef(encoding[posssiblePair[0]]) || getFieldOrDatumDef(encoding[posssiblePair[1]])) {\n      data.push({\n        signal: model.getName(`geojson_${data.length}`)\n      });\n    }\n  }\n\n  if (model.channelHasField(SHAPE) && model.typedFieldDef(SHAPE).type === GEOJSON) {\n    data.push({\n      signal: model.getName(`geojson_${data.length}`)\n    });\n  }\n\n  if (data.length === 0) {\n    // main source is geojson, so we can just use that\n    data.push(model.requestDataName(DataSourceType.Main));\n  }\n\n  return data;\n}\n\nfunction mergeIfNoConflict(first: ProjectionComponent, second: ProjectionComponent): ProjectionComponent {\n  const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n    // neither has the property\n    if (!hasOwnProperty(first.explicit, prop) && !hasOwnProperty(second.explicit, prop)) {\n      return true;\n    }\n    // both have property and an equal value for property\n    if (\n      hasOwnProperty(first.explicit, prop) &&\n      hasOwnProperty(second.explicit, prop) &&\n      // some properties might be signals or objects and require hashing for comparison\n      deepEqual(first.get(prop), second.get(prop))\n    ) {\n      return true;\n    }\n    return false;\n  });\n\n  const size = deepEqual(first.size, second.size);\n  if (size) {\n    if (allPropertiesShared) {\n      return first;\n    } else if (deepEqual(first.explicit, {})) {\n      return second;\n    } else if (deepEqual(second.explicit, {})) {\n      return first;\n    }\n  }\n\n  // if all properties don't match, let each unit spec have its own projection\n  return null;\n}\n\nfunction parseNonUnitProjections(model: Model): ProjectionComponent {\n  if (model.children.length === 0) {\n    return undefined;\n  }\n\n  let nonUnitProjection: ProjectionComponent;\n\n  // parse all children first\n  for (const child of model.children) {\n    parseProjection(child);\n  }\n\n  // analyze parsed projections, attempt to merge\n  const mergable = every(model.children, child => {\n    const projection = child.component.projection;\n    if (!projection) {\n      // child layer does not use a projection\n      return true;\n    } else if (!nonUnitProjection) {\n      // cached 'projection' is null, cache this one\n      nonUnitProjection = projection;\n      return true;\n    } else {\n      const merge = mergeIfNoConflict(nonUnitProjection, projection);\n      if (merge) {\n        nonUnitProjection = merge;\n      }\n      return !!merge;\n    }\n  });\n\n  // if cached one and all other children share the same projection,\n  if (nonUnitProjection && mergable) {\n    // so we can elevate it to the layer level\n    const name = model.projectionName(true);\n    const modelProjection = new ProjectionComponent(\n      name,\n      nonUnitProjection.specifiedProjection,\n      nonUnitProjection.size,\n      duplicate(nonUnitProjection.data)\n    );\n\n    // rename and assign all others as merged\n    for (const child of model.children) {\n      const projection = child.component.projection;\n      if (projection) {\n        if (projection.isFit) {\n          modelProjection.data.push(...child.component.projection.data);\n        }\n        child.renameProjection(projection.get('name'), name);\n        projection.merged = true;\n      }\n    }\n\n    return modelProjection;\n  }\n\n  return undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}